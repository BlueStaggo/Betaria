--- net/minecraft/src/GuiErrorScreen.java
+++ net/minecraft/src/GuiErrorScreen.java
@@ -4,6 +4,7 @@
 	private int field_28098_a = 0;
 
 	public void updateScreen() {
+		super.updateScreen();
 		++this.field_28098_a;
 	}
 
--- net/minecraft/src/BlockTallGrass.java
+++ net/minecraft/src/BlockTallGrass.java
@@ -18,6 +18,8 @@
 		if(var5 == 0) {
 			return 16777215;
 		} else {
+			boolean onJungle = var1.getBlockId(var2, var3 - 1, var4) == Block.jungleGrass.blockID
+					|| var1.getBlockId(var2, var3 - 1, var4) == Block.mud.blockID;
 			long var6 = (long)(var2 * 3129871 + var4 * 6129781 + var3);
 			var6 = var6 * var6 * 42317861L + var6 * 11L;
 			var2 = (int)((long)var2 + (var6 >> 14 & 31L));
@@ -26,7 +28,19 @@
 			var1.getWorldChunkManager().func_4069_a(var2, var4, 1, 1);
 			double var8 = var1.getWorldChunkManager().temperature[0];
 			double var10 = var1.getWorldChunkManager().humidity[0];
-			return ColorizerGrass.getGrassColor(var8, var10);
+			int color = ColorizerGrass.getGrassColor(var8, var10);
+
+			if (onJungle) {
+				int r = (color & 0xFF0000) >> 16;
+				int g = (color & 0x00FF00) >> 8;
+				int b = color & 0x0000FF;
+
+				r = Math.min((int)(r * 1.5F), 255);
+				g = Math.min((int)(g * 1.5F), 255);
+				color = r << 16 | g << 8 | b;
+			}
+
+			return color;
 		}
 	}
 
--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -6,7 +6,7 @@
 	public ItemBlock(int var1) {
 		super(var1);
 		this.blockID = var1 + 256;
-		this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
+		this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(3));
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
@@ -47,7 +47,7 @@
 			if(var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.blockID, this.getPlacedBlockMetadata(var1.getItemDamage()))) {
 				Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
 				Block.blocksList[this.blockID].onBlockPlacedBy(var3, var4, var5, var6, var2);
-				var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.func_1145_d(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
+				var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), "Dig_", 1.0F, 1.0F);
 				--var1.stackSize;
 			}
 
@@ -63,5 +63,9 @@
 
 	public String getItemName() {
 		return Block.blocksList[this.blockID].getBlockName();
+	}
+
+	public int getSpeedVsEntity(Entity var1) {
+		return 5;
 	}
 }
--- net/minecraft/src/GuiIngameMenu.java
+++ net/minecraft/src/GuiIngameMenu.java
@@ -8,15 +8,18 @@
 		this.updateCounter2 = 0;
 		this.controlList.clear();
 		byte var1 = -16;
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + var1, "Save and quit to title"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 50, this.height / 2 + 60, 100, 20, "Save & Exit").asTransparent());
 		if(this.mc.isMultiplayerWorld()) {
 			((GuiButton)this.controlList.get(0)).displayString = "Disconnect";
 		}
 
-		this.controlList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24 + var1, "Back to game"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + var1, "Options..."));
-		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 4 + 48 + var1, 98, 20, StatCollector.translateToLocal("gui.achievements")));
-		this.controlList.add(new GuiButton(6, this.width / 2 + 2, this.height / 4 + 48 + var1, 98, 20, StatCollector.translateToLocal("gui.stats")));
+		this.controlList.add(new GuiButton(4, this.width / 2 - 50, this.height / 2 + 40, 100, 20, "Close Menu").asTransparent());
+		this.controlList.add(new GuiButton(0, this.width / 2 - 50, this.height / 2 - 80, 100, 20, "General").asTransparent());
+		this.controlList.add(new GuiButton(5, this.width / 2 - 50, this.height / 2 + 20, 100, 20, StatCollector.translateToLocal("gui.achievements")).asTransparent());
+		this.controlList.add(new GuiButton(6, this.width / 2 - 50, this.height / 2, 100, 20, StatCollector.translateToLocal("gui.stats")).asTransparent());
+		this.controlList.add(new GuiButton(7, this.width / 2 - 50, this.height / 2 - 60, 100, 20, "Video").asTransparent());
+		this.controlList.add(new GuiButton(8, this.width / 2 - 50, this.height / 2 - 40, 100, 20, "Cursor").asTransparent());
+		this.controlList.add(new GuiButton(9, this.width / 2 - 50, this.height / 2 - 20, 100, 20, "Controls").asTransparent());
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -47,6 +50,18 @@
 			this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
 		}
 
+		if(var1.id == 7) {
+			this.mc.displayGuiScreen(new GuiVideoSettings(this, this.mc.gameSettings));
+		}
+
+		if(var1.id == 8) {
+			this.mc.displayGuiScreen(new GuiCursorSettings(this, this.mc.gameSettings));
+		}
+
+		if(var1.id == 9) {
+			this.mc.displayGuiScreen(new GuiControls(this, this.mc.gameSettings));
+		}
+
 	}
 
 	public void updateScreen() {
@@ -56,6 +71,12 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
+		this.drawGradientRect(this.width / 2 - 60, this.height / 2 - 90, this.width / 2 + 60, this.height / 2 - 89, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 60, this.height / 2 + 89, this.width / 2 + 60, this.height / 2 + 90, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 60, this.height / 2 - 89, this.width / 2 - 59, this.height / 2 + 89, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 + 59, this.height / 2 - 89, this.width / 2 + 60, this.height / 2 + 89, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 59, this.height / 2 - 89, this.width / 2 + 59, this.height / 2 + 89, 0xC03F4197, 0xC03F4197);
+
 		boolean var4 = !this.mc.theWorld.func_650_a(this.updateCounter2++);
 		if(var4 || this.updateCounter < 20) {
 			float var5 = ((float)(this.updateCounter % 10) + var3) / 10.0F;
@@ -64,7 +85,7 @@
 			this.drawString(this.fontRenderer, "Saving level..", 8, this.height - 16, var6 << 16 | var6 << 8 | var6);
 		}
 
-		this.drawCenteredString(this.fontRenderer, "Game menu", this.width / 2, 40, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Game menu", this.width / 2, this.height / 2 - 110, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- net/minecraft/src/RecipesWeapons.java
+++ net/minecraft/src/RecipesWeapons.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class RecipesWeapons {
-	private String[][] recipePatterns = new String[][]{{"X", "X", "#"}};
-	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.swordWood, Item.swordStone, Item.swordSteel, Item.swordDiamond, Item.swordGold}};
+	private int[] recipeQuantities = new int[]{8, 6};
+	private Object[][] recipeItems = new Object[][]{{Item.itemsList[Block.planks.blockID], Item.ingotCopper, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.swordWood, Item.swordStone, Item.swordSteel, Item.swordDiamond, Item.swordGold}, {null, Item.shortswordStone, Item.shortswordSteel, Item.shortswordDiamond, Item.shortswordGold}};
 
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
@@ -10,7 +10,9 @@
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+				if (var5 != null) {
+					var1.addShapelessRecipe(new ItemStack(var5), new ItemStack((Item)var3, recipeQuantities[var4]), new ItemStack(Item.stick, 4)).requireBlock(Block.workbench);
+				}
 			}
 		}
 
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -1,25 +1,57 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
 
 public class BlockLog extends Block {
+	private final List<int[]> leavesToUpdate = new ArrayList<>();
+
 	protected BlockLog(int var1) {
 		super(var1, Material.wood);
 		this.blockIndexInTexture = 20;
 	}
 
 	public int quantityDropped(Random var1) {
-		return 1;
+		return 2 + var1.nextInt(3);
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return Block.wood.blockID;
+		return Block.planks.blockID;
 	}
 
 	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
 		super.harvestBlock(var1, var2, var3, var4, var5, var6);
 	}
 
+	protected Block setHardness(float var1) {
+		super.setHardness(var1);
+		this.blockHardness *= 5.0F;
+		return this;
+	}
+
+	private boolean recursiveDestroy(World worldObj, int x, int y, int z, int metadata) {
+		for (int rx = x - 1; rx <= x + 1; rx++) {
+			for (int ry = y; ry <= y + 1; ry++) {
+				for (int rz = z - 1; rz <= z + 1; rz++) {
+					int block = worldObj.getBlockId(rx, ry, rz);
+					if (block == this.blockID
+							&& (worldObj.getBlockMetadata(rx, ry, rz) & 7) == metadata
+							&& (rx != x || ry != y || rz != z)) {
+						this.dropBlockAsItem(worldObj, rx, ry, rz, metadata);
+						worldObj.setBlockWithNotify(rx, ry, rz, 0);
+						if (!this.recursiveDestroy(worldObj, rx, ry, rz, metadata)) {
+							return false;
+						}
+					} else if (block == Block.leaves.blockID) {
+						this.leavesToUpdate.add(new int[] {rx, ry, rz});
+					}
+				}
+			}
+		}
+		return true;
+	}
+
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		byte var5 = 4;
 		int var6 = var5 + 1;
@@ -41,11 +73,22 @@
 
 	}
 
+	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
+		this.recursiveDestroy(var1, var2, var3, var4, var5);
+		BlockLeaves.instantUpdate = true;
+		for (int[] leaves : this.leavesToUpdate) {
+			Block.leaves.updateTick(var1, leaves[0], leaves[1], leaves[2], var1.rand);
+		}
+		BlockLeaves.instantUpdate = false;
+		this.leavesToUpdate.clear();
+	}
+
+	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
+		var1.setBlockMetadata(var2, var3, var4, var1.getBlockMetadata(var2, var3, var4) | 8);
+	}
+
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : (var2 == 1 ? 116 : (var2 == 2 ? 117 : 20)));
-	}
-
-	protected int damageDropped(int var1) {
-		return var1;
+		var2 &= 7;
+		return var1 == 1 ? 21 : (var1 == 0 ? 21 : (var2 == 1 ? 116 : (var2 == 2 ? 117 : (var2 == 3 ? 100 : 20))));
 	}
 }
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -111,7 +111,7 @@
 		if(!this.worldObj.multiplayerWorld) {
 			int var2 = this.item.stackSize;
 			if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
-				if(this.item.itemID == Block.wood.blockID) {
+				if(this.item.itemID == Block.planks.blockID) {
 					var1.triggerAchievement(AchievementList.mineWood);
 				}
 
@@ -119,7 +119,7 @@
 					var1.triggerAchievement(AchievementList.killCow);
 				}
 
-				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+				this.worldObj.playSoundAtEntity(this, "Grab", 1.0F, 1.0F);
 				var1.onItemPickup(this, var2);
 				if(this.item.stackSize <= 0) {
 					this.setEntityDead();
--- net/minecraft/src/GuiSlider.java
+++ net/minecraft/src/GuiSlider.java
@@ -35,8 +35,16 @@
 			}
 
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-			this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, 20);
-			this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);
+
+			if(this.enabled3) {
+				this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, 20);
+				this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);
+			} else {
+				this.drawGradientRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 6)), this.yPosition + 1,
+						this.xPosition + (int)(this.sliderValue * (float)(this.width - 6)) + 6, this.yPosition + 19, 0xFF000000, 0xFF000000);
+				this.drawGradientRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 6)) + 1, this.yPosition + 2,
+						this.xPosition + (int)(this.sliderValue * (float)(this.width - 6)) + 5, this.yPosition + 18, 0xFFFFFFFF, 0xFFFFFFFF);
+			}
 		}
 	}
 
@@ -62,5 +70,31 @@
 
 	public void mouseReleased(int var1, int var2) {
 		this.dragging = false;
+	}
+
+	public void drawButton(Minecraft var1, int var2, int var3) {
+		if (!this.enabled3) {
+			this.drawGradientRect(this.xPosition, this.yPosition + 2,
+					this.xPosition + this.width, this.yPosition + this.height - 2,
+					0xFF000000, 0xFF000000);
+			this.drawGradientRect(this.xPosition + 1, this.yPosition + 3,
+					this.xPosition + this.width - 1, this.yPosition + this.height - 3,
+					0xFFFFFFFF, 0xFFFFFFFF);
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			GL11.glShadeModel(GL11.GL_SMOOTH);
+			Tessellator var15 = Tessellator.instance;
+			var15.startDrawingQuads();
+			var15.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
+			var15.addVertex(this.xPosition + this.width - 2, this.yPosition + this.height - 4, 0.0D);
+			var15.addVertex(this.xPosition + this.width - 2, this.yPosition + 4, 0.0D);
+			var15.setColorRGBA_F(0.0F, 0.0F, 0.0F, 1.0F);
+			var15.addVertex(this.xPosition + 2, this.yPosition + 4, 0.0D);
+			var15.addVertex(this.xPosition + 2, this.yPosition + this.height - 4, 0.0D);
+			var15.draw();
+			GL11.glShadeModel(GL11.GL_FLAT);
+			GL11.glEnable(GL11.GL_TEXTURE_2D);
+		}
+		super.drawButton(var1, var2, var3);
 	}
 }
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -8,12 +8,18 @@
 		super(var1);
 		this.healAmount = var2;
 		this.isWolfsFavoriteMeat = var3;
-		this.maxStackSize = 1;
+		this.maxStackSize = 30;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (var3.potionSickness > 0) {
+			return var1;
+		}
+
 		--var1.stackSize;
+		var3.potionSickness = 1200;
 		var3.heal(this.healAmount);
+		var2.playSoundAtEntity(var3, "Item_2", 1.0F, 1.0F);
 		return var1;
 	}
 
--- /dev/null
+++ net/minecraft/src/BlockLifeCrystal.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class BlockLifeCrystal extends Block {
+	protected BlockLifeCrystal(int var1, int var2) {
+		super(var1, var2, Material.plants);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+}
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -1752,7 +1752,7 @@
 		this.field_22339_T = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 + 1, var4 - 1)];
 		this.field_22355_ae = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 - 1, var4 + 1)];
 		this.field_22361_ab = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 - 1, var4 - 1)];
-		if(var1.blockIndexInTexture == 3) {
+		if(var1.blockIndexInTexture == 3 || var1.blockIndexInTexture == 227) {
 			var18 = false;
 			var17 = var18;
 			var16 = var18;
@@ -1953,7 +1953,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var19);
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var19 == 3 || var19 == 227) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2032,7 +2032,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
 			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var19 == 3 || var19 == 227) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2111,7 +2111,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
 			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var19);
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var19 == 3 || var19 == 227) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2190,7 +2190,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var19);
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var19 == 3 || var19 == 227) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2233,7 +2233,7 @@
 		float var23 = var10;
 		float var24 = var12;
 		float var25 = var13;
-		if(var1 != Block.grass) {
+		if(var1 != Block.grass && var1 != Block.jungleGrass) {
 			var17 = var10 * var5;
 			var18 = var12 * var5;
 			var19 = var13 * var5;
@@ -2275,7 +2275,7 @@
 			var8.setColorOpaque_F(var18 * var27, var21 * var27, var24 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var28 == 3 || var28 == 227) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var18 * var27 * var5, var21 * var27 * var6, var24 * var27 * var7);
 				this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, 38);
 			}
@@ -2292,7 +2292,7 @@
 			var8.setColorOpaque_F(var18 * var27, var21 * var27, var24 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
 			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var28 == 3 || var28 == 227) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var18 * var27 * var5, var21 * var27 * var6, var24 * var27 * var7);
 				this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, 38);
 			}
@@ -2309,7 +2309,7 @@
 			var8.setColorOpaque_F(var19 * var27, var22 * var27, var25 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
 			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var28 == 3 || var28 == 227) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var19 * var27 * var5, var22 * var27 * var6, var25 * var27 * var7);
 				this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, 38);
 			}
@@ -2326,7 +2326,7 @@
 			var8.setColorOpaque_F(var19 * var27, var22 * var27, var25 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && (var28 == 3 || var28 == 227) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var19 * var27 * var5, var22 * var27 * var6, var25 * var27 * var7);
 				this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, 38);
 			}
--- /dev/null
+++ net/minecraft/src/WorldGenMud.java
@@ -1,0 +1,56 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMud extends WorldGenerator {
+	private int numberOfBlocks;
+
+	public WorldGenMud(int var2) {
+		this.numberOfBlocks = var2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		float var6 = var2.nextFloat() * (float)Math.PI;
+		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var15 = (double)(var4 + var2.nextInt(3) + 2);
+		double var17 = (double)(var4 + var2.nextInt(3) + 2);
+
+		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
+			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
+			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
+			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
+			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			int var32 = MathHelper.floor_double(var20 - var28 / 2.0D);
+			int var33 = MathHelper.floor_double(var22 - var30 / 2.0D);
+			int var34 = MathHelper.floor_double(var24 - var28 / 2.0D);
+			int var35 = MathHelper.floor_double(var20 + var28 / 2.0D);
+			int var36 = MathHelper.floor_double(var22 + var30 / 2.0D);
+			int var37 = MathHelper.floor_double(var24 + var28 / 2.0D);
+
+			for(int var38 = var32; var38 <= var35; ++var38) {
+				double var39 = ((double)var38 + 0.5D - var20) / (var28 / 2.0D);
+				if(var39 * var39 < 1.0D) {
+					for(int var41 = var33; var41 <= var36; ++var41) {
+						double var42 = ((double)var41 + 0.5D - var22) / (var30 / 2.0D);
+						if(var39 * var39 + var42 * var42 < 1.0D) {
+							for(int var44 = var34; var44 <= var37; ++var44) {
+								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D
+										&& var1.getBlockId(var38, var41, var44) == Block.jungleGrass.blockID) {
+									var1.setBlockAndMetadata(var38, var41, var44, Block.mud.blockID, 0);
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/ItemCloth.java
+++ net/minecraft/src/ItemCloth.java
@@ -8,7 +8,7 @@
 	}
 
 	public int getIconFromDamage(int var1) {
-		return Block.cloth.getBlockTextureFromSideAndMetadata(2, BlockCloth.func_21034_c(var1));
+		return Block.cloth.getBlockTextureFromSideAndMetadata(3, var1 & 15);
 	}
 
 	public int getPlacedBlockMetadata(int var1) {
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -240,6 +240,7 @@
 
 		this.worldInfo.setSpawnX(var1);
 		this.worldInfo.setSpawnZ(var2);
+		this.worldInfo.setSpawnY(this.getHeightValue(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnZ()));
 	}
 
 	public int getFirstUncoveredBlock(int var1, int var2) {
@@ -690,7 +691,7 @@
 	}
 
 	public boolean isDaytime() {
-		return this.skylightSubtracted < 4;
+		return this.skylightSubtracted < 8;
 	}
 
 	public MovingObjectPosition rayTraceBlocks(Vec3D var1, Vec3D var2) {
@@ -1436,7 +1437,7 @@
 							double var16 = (double)((float)(var13 + 1) - BlockFluid.getPercentAir(this.getBlockMetadata(var12, var13, var14)));
 							if((double)var7 >= var16) {
 								var10 = true;
-								var15.velocityToAddToEntity(this, var12, var13, var14, var3, var11);
+								break;
 							}
 						}
 					}
@@ -1738,18 +1739,6 @@
 	public void tick() {
 		this.updateWeather();
 		long var2;
-		if(this.isAllPlayersFullyAsleep()) {
-			boolean var1 = false;
-			if(this.spawnHostileMobs && this.difficultySetting >= 1) {
-				var1 = SpawnerAnimals.performSleepSpawning(this, this.playerEntities);
-			}
-
-			if(!var1) {
-				var2 = this.worldInfo.getWorldTime() + 24000L;
-				this.worldInfo.setWorldTime(var2 - var2 % 24000L);
-				this.wakeUpAllPlayers();
-			}
-		}
 
 		SpawnerAnimals.performSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs);
 		this.chunkProvider.unload100OldestChunks();
@@ -1762,7 +1751,7 @@
 			}
 		}
 
-		var2 = this.worldInfo.getWorldTime() + 1L;
+		var2 = this.worldInfo.getWorldTime() + (this.isAllPlayersFullyAsleep() ? 10L : 1L);
 		if(var2 % (long)this.autosavePeriod == 0L) {
 			this.saveWorld(false, (IProgressUpdate)null);
 		}
--- net/minecraft/src/RecipesFood.java
+++ net/minecraft/src/RecipesFood.java
@@ -2,8 +2,7 @@
 
 public class RecipesFood {
 	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomBrown, Character.valueOf('Y'), Block.mushroomRed, Character.valueOf('#'), Item.bowlEmpty});
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomRed, Character.valueOf('Y'), Block.mushroomBrown, Character.valueOf('#'), Item.bowlEmpty});
+		var1.addShapelessRecipe(new ItemStack(Item.bowlSoup), Item.bowlEmpty, Block.mushroomBrown, Block.mushroomRed);
 		var1.addRecipe(new ItemStack(Item.cookie, 8), new Object[]{"#X#", Character.valueOf('X'), new ItemStack(Item.dyePowder, 1, 3), Character.valueOf('#'), Item.wheat});
 	}
 }
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -204,7 +204,7 @@
 				GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * var1, -1.0F, 0.0F, 0.0F);
 			}
 		} else if(this.mc.gameSettings.thirdPersonView) {
-			double var27 = (double)(this.field_22227_s + (this.field_22228_r - this.field_22227_s) * var1);
+			double var27 = (double)(this.field_22227_s + (this.field_22228_r - this.field_22227_s) * var1) * 0.5F;
 			float var13;
 			float var28;
 			if(this.mc.gameSettings.field_22273_E) {
@@ -238,7 +238,7 @@
 
 				GL11.glRotatef(var2.rotationPitch - var13, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(var2.rotationYaw - var28, 0.0F, 1.0F, 0.0F);
-				GL11.glTranslatef(0.0F, 0.0F, (float)(-var27));
+				GL11.glTranslatef((float)-var27 * 0.5F, 0.0F, (float)(-var27));
 				GL11.glRotatef(var28 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
 				GL11.glRotatef(var13 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
 			}
@@ -420,7 +420,7 @@
 
 			if(this.mc.currentScreen != null) {
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-				this.mc.currentScreen.drawScreen(var16, var17, var1);
+				this.mc.currentScreen.drawScreen(Mouse.isGrabbed() ? -1000 : var16, Mouse.isGrabbed() ? -1000 : var17, var1);
 				if(this.mc.currentScreen != null && this.mc.currentScreen.field_25091_h != null) {
 					this.mc.currentScreen.field_25091_h.func_25087_a(var1);
 				}
@@ -618,15 +618,6 @@
 							this.mc.effectRenderer.addEffect(new EntityRainFX(var3, (double)((float)var16 + var20), (double)((float)var18 + 0.1F) - Block.blocksList[var19].minY, (double)((float)var17 + var21)));
 						}
 					}
-				}
-			}
-
-			if(var14 > 0 && this.random.nextInt(3) < this.rainSoundCounter++) {
-				this.rainSoundCounter = 0;
-				if(var10 > var2.posY + 1.0D && var3.findTopSolidBlock(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posZ)) > MathHelper.floor_double(var2.posY)) {
-					this.mc.theWorld.playSoundEffect(var8, var10, var12, "ambient.weather.rain", 0.1F, 0.5F);
-				} else {
-					this.mc.theWorld.playSoundEffect(var8, var10, var12, "ambient.weather.rain", 0.2F, 1.0F);
 				}
 			}
 
--- net/minecraft/src/ContainerDispenser.java
+++ net/minecraft/src/ContainerDispenser.java
@@ -10,18 +10,22 @@
 		int var4;
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(var4 = 0; var4 < 3; ++var4) {
-				this.addSlot(new Slot(var2, var4 + var3 * 3, 62 + var4 * 18, 17 + var3 * 18));
+				this.addSlot(new Slot(var2, var4 + var3 * 3, 43 + var4 * 20, 69 + var3 * 20));
 			}
 		}
 
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(var4 = 0; var4 < 9; ++var4) {
-				this.addSlot(new Slot(var1, var4 + var3 * 9 + 9, 8 + var4 * 18, 84 + var3 * 18));
+				this.addSlot(new Slot(var1, var4 + var3 * 9 + 9, 3 + var4 * 20, 3 + var3 * 20));
 			}
 		}
 
 		for(var3 = 0; var3 < 9; ++var3) {
-			this.addSlot(new Slot(var1, var3, 8 + var3 * 18, 142));
+			this.addSlot(new Slot(var1, var3, 3 + var3 * 20, -21));
+		}
+
+		for(var3 = 0; var3 < 4; ++var3) {
+			this.addSlot(new SlotArmor(null, var1, var1.getSizeInventory() - 1 - var3, -29, 3 + var3 * 20, var3));
 		}
 
 	}
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -8,7 +8,7 @@
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex : this.blockID));
+		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex : this.blockID);
 	}
 
 	public int quantityDropped(Random var1) {
--- net/minecraft/src/BlockLever.java
+++ net/minecraft/src/BlockLever.java
@@ -139,7 +139,7 @@
 			int var8 = 8 - (var6 & 8);
 			var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
 			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, var8 > 0 ? 0.6F : 0.5F);
+			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "Menu_Tick", 1.0F, 1.0F);
 			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
 			if(var7 == 1) {
 				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
--- net/minecraft/src/EntityArrow.java
+++ net/minecraft/src/EntityArrow.java
@@ -160,7 +160,7 @@
 			float var19;
 			if(var3 != null) {
 				if(var3.entityHit != null) {
-					if(var3.entityHit.attackEntityFrom(this.owner, 4)) {
+					if(var3.entityHit.attackEntityFrom(this.owner, 15)) {
 						this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 						this.setEntityDead();
 					} else {
--- net/minecraft/src/IRecipe.java
+++ net/minecraft/src/IRecipe.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Set;
+
 public interface IRecipe {
 	boolean matches(InventoryCrafting var1);
 
@@ -8,4 +10,15 @@
 	int getRecipeSize();
 
 	ItemStack getRecipeOutput();
+
+	ItemStack[] getStackedItems();
+
+	Block getRequiredBlock();
+
+	default boolean matchesStacked(IInventory var1) {
+		for (ItemStack item : this.getStackedItems()) {
+			if (!var1.hasStackedItem(item)) return false;
+		}
+		return true;
+	}
 }
--- net/minecraft/src/GuiInventory.java
+++ net/minecraft/src/GuiInventory.java
@@ -3,24 +3,20 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import java.util.Map;
+
 public class GuiInventory extends GuiContainer {
 	private float xSize_lo;
 	private float ySize_lo;
 
 	public GuiInventory(EntityPlayer var1) {
 		super(var1.inventorySlots);
+		this.xSize = 182;
+		this.ySize = 62;
 		this.field_948_f = true;
 		var1.addStat(AchievementList.openInventory, 1);
 	}
 
-	public void initGui() {
-		this.controlList.clear();
-	}
-
-	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 86, 16, 4210752);
-	}
-
 	public void drawScreen(int var1, int var2, float var3) {
 		super.drawScreen(var1, var2, var3);
 		this.xSize_lo = (float)var1;
@@ -31,49 +27,13 @@
 		int var2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
+		int var3 = this.offX;
+		int var4 = this.offY;
+		GL11.glEnable(GL11.GL_BLEND);
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
-		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(var3 + 51), (float)(var4 + 75), 50.0F);
-		float var5 = 30.0F;
-		GL11.glScalef(-var5, var5, var5);
-		GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
-		float var6 = this.mc.thePlayer.renderYawOffset;
-		float var7 = this.mc.thePlayer.rotationYaw;
-		float var8 = this.mc.thePlayer.rotationPitch;
-		float var9 = (float)(var3 + 51) - this.xSize_lo;
-		float var10 = (float)(var4 + 75 - 50) - this.ySize_lo;
-		GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
-		RenderHelper.enableStandardItemLighting();
-		GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(-((float)Math.atan((double)(var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
-		this.mc.thePlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
-		this.mc.thePlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
-		this.mc.thePlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
-		this.mc.thePlayer.entityBrightness = 1.0F;
-		GL11.glTranslatef(0.0F, this.mc.thePlayer.yOffset, 0.0F);
-		RenderManager.instance.playerViewY = 180.0F;
-		RenderManager.instance.renderEntityWithPosYaw(this.mc.thePlayer, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
-		this.mc.thePlayer.entityBrightness = 0.0F;
-		this.mc.thePlayer.renderYawOffset = var6;
-		this.mc.thePlayer.rotationYaw = var7;
-		this.mc.thePlayer.rotationPitch = var8;
-		GL11.glPopMatrix();
-		RenderHelper.disableStandardItemLighting();
-		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-	}
-
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiAchievements(this.mc.statFileWriter));
-		}
-
-		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
-		}
-
-	}
+		this.drawTexturedModalRect(this.width - 32, var4, 0, 62, 22, 82);
+		GL11.glDisable(GL11.GL_BLEND);
+	}
+
+
 }
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -9,6 +9,14 @@
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
 	}
 
+	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
+		return var1 == Block.grass.blockID
+				|| var1 == Block.dirt.blockID
+				|| var1 == Block.jungleGrass.blockID
+				|| var1 == Block.mud.blockID
+				|| var1 == Block.blockSnow.blockID;
+	}
+
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(!var1.multiplayerWorld) {
 			super.updateTick(var1, var2, var3, var4, var5);
@@ -26,7 +34,7 @@
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
 		var2 &= 3;
-		return var2 == 1 ? 63 : (var2 == 2 ? 79 : super.getBlockTextureFromSideAndMetadata(var1, var2));
+		return var2 == 1 ? 63 : (var2 == 2 ? 79 : (var2 == 3 ? 111 : super.getBlockTextureFromSideAndMetadata(var1, var2)));
 	}
 
 	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
@@ -37,9 +45,11 @@
 			var7 = new WorldGenTaiga2();
 		} else if(var6 == 2) {
 			var7 = new WorldGenForest();
+		} else if(var6 == 3) {
+			var7 = new WorldGenBigTree().asMahogany();
 		} else {
 			var7 = new WorldGenTrees();
-			if(var5.nextInt(10) == 0) {
+			if(var5.nextInt(5) == 0) {
 				var7 = new WorldGenBigTree();
 			}
 		}
@@ -50,7 +60,19 @@
 
 	}
 
-	protected int damageDropped(int var1) {
-		return var1 & 3;
+	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
+		int var6 = var1.getBlockId(var2, var3 - 1, var4);
+		if (var6 == Block.blockSnow.blockID) {
+			var6 = 1;
+		} else if (var6 == Block.jungleGrass.blockID || var6 == Block.mud.blockID) {
+			var6 = 3;
+		} else {
+			var6 = 0;
+		}
+		var1.setBlockMetadata(var2, var3, var4, var6);
+	}
+
+	public int quantityDropped(Random var1) {
+		return 0;
 	}
 }
--- net/minecraft/src/ItemSapling.java
+++ net/minecraft/src/ItemSapling.java
@@ -3,15 +3,9 @@
 public class ItemSapling extends ItemBlock {
 	public ItemSapling(int var1) {
 		super(var1);
-		this.setMaxDamage(0);
-		this.setHasSubtypes(true);
-	}
-
-	public int getPlacedBlockMetadata(int var1) {
-		return var1;
 	}
 
 	public int getIconFromDamage(int var1) {
-		return Block.sapling.getBlockTextureFromSideAndMetadata(0, var1);
+		return 127;
 	}
 }
--- /dev/null
+++ net/minecraft/src/PlayerInfo.java
@@ -1,0 +1,104 @@
+package net.minecraft.src;
+
+public class PlayerInfo implements Comparable<PlayerInfo> {
+	private long lastPlayed;
+	private String name;
+	private String saveFile;
+	private String skin;
+	private NBTTagList inventory;
+	private int health = 100;
+	private int maxHealth = 100;
+
+	public PlayerInfo(NBTTagCompound var1) {
+		this.lastPlayed = var1.getLong("LastPlayed");
+		this.name = var1.getString("Name");
+		this.saveFile = var1.getString("SaveFile");
+		this.skin = var1.getString("Skin");
+		this.inventory = var1.getTagList("Inventory");
+		this.health = var1.getShort("Health");
+		this.maxHealth = var1.getShort("MaxHealth");
+
+		if (this.maxHealth <= 0) {
+			this.maxHealth = 100;
+		}
+	}
+
+	public PlayerInfo(EntityPlayerSP var1) {
+		this.lastPlayed = System.currentTimeMillis();
+		this.name = var1.username;
+		this.saveFile = var1.saveFile;
+		this.skin = var1.skinName;
+		this.inventory = new NBTTagList();
+		var1.inventory.writeToNBT(this.inventory);
+		this.health = var1.health;
+		this.maxHealth = var1.getMaxHealth();
+	}
+
+	public PlayerInfo(String name, String saveFile, String skin) {
+		this.lastPlayed = System.currentTimeMillis();
+		this.name = name;
+		this.saveFile = saveFile;
+		if (skin != null && !skin.isEmpty()) {
+			this.skin = skin;
+		}
+	}
+
+	public PlayerInfo onRespawn() {
+		this.health = this.maxHealth;
+		return this;
+	}
+
+	public PlayerInfo rename(String name, String skin) {
+		this.name = name;
+		if (skin != null && !skin.isEmpty()) {
+			this.skin = skin;
+		} else {
+			this.skin = null;
+		}
+		return this;
+	}
+
+	public void writeToNBT(NBTTagCompound var1) {
+		var1.setLong("LastPlayed", this.lastPlayed);
+		var1.setString("SaveFile", this.saveFile);
+		var1.setString("Name", this.name);
+		if (this.skin != null && !this.skin.isEmpty()) var1.setString("Skin", this.skin);
+		if (this.inventory != null) var1.setTag("Inventory", this.inventory);
+		var1.setShort("Health", (short)this.health);
+		var1.setShort("MaxHealth", (short)this.maxHealth);
+	}
+
+	public long getLastPlayed() {
+		return this.lastPlayed;
+	}
+
+	public String getSaveFile() {
+		return this.saveFile;
+	}
+
+	public String getName() {
+		return this.name;
+	}
+
+	public String getSkin() {
+		return this.skin;
+	}
+
+	public NBTTagList getInventory() {
+		return this.inventory;
+	}
+
+	public int getHealth() {
+		return this.health;
+	}
+
+	public int getMaxHealth() {
+		return this.maxHealth;
+	}
+
+	public int compareTo(PlayerInfo o) {
+		int compare = Long.compare(o.lastPlayed, this.lastPlayed);
+		if (compare == 0) compare = o.name.compareTo(this.name);
+		return compare;
+	}
+}
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -1,13 +1,8 @@
 package net.minecraft.src;
 
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.nio.charset.Charset;
-import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
-import org.lwjgl.opengl.GL11;
 
 public class GuiMainMenu extends GuiScreen {
 	private static final Random rand = new Random();
@@ -15,36 +10,29 @@
 	private String splashText = "missingno";
 	private GuiButton multiplayerButton;
 
-	public GuiMainMenu() {
-		try {
-			ArrayList var1 = new ArrayList();
-			BufferedReader var2 = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt"), Charset.forName("UTF-8")));
-			String var3 = "";
-
-			while(true) {
-				var3 = var2.readLine();
-				if(var3 == null) {
-					this.splashText = (String)var1.get(rand.nextInt(var1.size()));
-					break;
-				}
-
-				var3 = var3.trim();
-				if(var3.length() > 0) {
-					var1.add(var3);
-				}
-			}
-		} catch (Exception var4) {
-		}
-
-	}
-
 	public void updateScreen() {
+		super.updateScreen();
 		++this.updateCounter;
 	}
 
 	protected void keyTyped(char var1, int var2) {
 	}
 
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+		if (var1 >= this.width / 2 - 155 && var1 < this.width / 2 + 155
+				&& var2 >= 22 && var2 < 66) {
+			this.mc.sndManager.playSoundFX("Tink_", 1.0F, 1.0F);
+			this.mc.gameSettings.betariaLogo = !this.mc.gameSettings.betariaLogo;
+
+			if (rand.nextInt(5) == 0) {
+				this.mc.sndManager.playSoundFX("Item_4", 1.0F, 1.0F);
+				this.mc.gameSettings.titleMusicType = (this.mc.gameSettings.titleMusicType + 1) % 4;
+				this.mc.gameSettings.saveOptions();
+			}
+		}
+	}
+
 	public void initGui() {
 		Calendar var1 = Calendar.getInstance();
 		var1.setTime(new Date());
@@ -59,16 +47,12 @@
 		}
 
 		StringTranslate var2 = StringTranslate.getInstance();
-		int var4 = this.height / 4 + 48;
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.translateKey("menu.singleplayer")));
-		this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 24, var2.translateKey("menu.multiplayer")));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48, var2.translateKey("menu.mods")));
-		if(this.mc.hideQuitButton) {
-			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72, var2.translateKey("menu.options")));
-		} else {
-			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72 + 12, 98, 20, var2.translateKey("menu.options")));
-			this.controlList.add(new GuiButton(4, this.width / 2 + 2, var4 + 72 + 12, 98, 20, var2.translateKey("menu.quit")));
-		}
+		int var4 = 90;
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.translateKey("menu.singleplayer")).asTransparent());
+		this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 20, var2.translateKey("menu.multiplayer")).asTransparent());
+		this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 40, var2.translateKey("menu.mods")).asTransparent());
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 60, var2.translateKey("menu.options")).asTransparent());
+		this.controlList.add(new GuiButton(4, this.width / 2 - 100, var4 + 80, var2.translateKey("menu.quit")).asTransparent());
 
 		if(this.mc.session == null) {
 			this.multiplayerButton.enabled = false;
@@ -82,7 +66,7 @@
 		}
 
 		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiSelectWorld(this));
+			this.mc.displayGuiScreen(new GuiSelectCharacter(this));
 		}
 
 		if(var1.id == 2) {
@@ -101,26 +85,12 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		Tessellator var4 = Tessellator.instance;
-		short var5 = 274;
-		int var6 = this.width / 2 - var5 / 2;
-		byte var7 = 30;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/mclogo.png"));
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.drawTexturedModalRect(var6 + 0, var7 + 0, 0, 0, 155, 44);
-		this.drawTexturedModalRect(var6 + 155, var7 + 0, 0, 45, 155, 44);
-		var4.setColorOpaque_I(16777215);
-		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
-		GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
-		float var8 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
-		var8 = var8 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashText) + 32);
-		GL11.glScalef(var8, var8, var8);
-		this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
-		GL11.glPopMatrix();
-		this.drawString(this.fontRenderer, "Minecraft Beta 1.7.3", 2, 2, 5263440);
-		String var9 = "Copyright Mojang AB. Do not distribute.";
-		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 10, 16777215);
+		this.drawString(this.fontRenderer, "v1.7.0.3", 4, this.height - 12, 16777215);
+
+		if (var2 >= this.height - 12) {
+			this.drawString(this.fontRenderer, "Betaria 1.0", 4, this.height - 24, 14737632);
+		}
+
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- net/minecraft/src/GuiMultiplayer.java
+++ net/minecraft/src/GuiMultiplayer.java
@@ -11,6 +11,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		this.field_22111_h.updateCursorCounter();
 	}
 
--- net/minecraft/src/GuiConnectFailed.java
+++ net/minecraft/src/GuiConnectFailed.java
@@ -15,9 +15,6 @@
 
 	}
 
-	public void updateScreen() {
-	}
-
 	protected void keyTyped(char var1, int var2) {
 	}
 
--- net/minecraft/src/TileEntityDispenser.java
+++ net/minecraft/src/TileEntityDispenser.java
@@ -98,7 +98,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public boolean canInteractWith(EntityPlayer var1) {
--- net/minecraft/src/ScaledResolution.java
+++ net/minecraft/src/ScaledResolution.java
@@ -16,7 +16,7 @@
 			var4 = 1000;
 		}
 
-		while(this.scaleFactor < var4 && this.scaledWidth / (this.scaleFactor + 1) >= 320 && this.scaledHeight / (this.scaleFactor + 1) >= 240) {
+		while(this.scaleFactor < var4 && this.scaledWidth / (this.scaleFactor + 1) >= 400 && this.scaledHeight / (this.scaleFactor + 1) >= 300) {
 			++this.scaleFactor;
 		}
 
--- net/minecraft/src/BlockTorch.java
+++ net/minecraft/src/BlockTorch.java
@@ -167,4 +167,14 @@
 		}
 
 	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		if (!var1.multiplayerWorld) {
+			var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "Dig_", 1.0F, 1.0F);
+			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			var1.setBlockWithNotify(var2, var3, var4, 0);
+			this.harvestBlock(var1, var5, var2, var3, var4, var6);
+		}
+		return true;
+	}
 }
--- net/minecraft/src/MinecraftImpl.java
+++ net/minecraft/src/MinecraftImpl.java
@@ -19,4 +19,9 @@
 		this.mcFrame.add(new PanelCrashReport(var1), "Center");
 		this.mcFrame.validate();
 	}
+
+	public void setTitle(String var1) {
+		super.setTitle(var1);
+		this.mcFrame.setTitle(var1);
+	}
 }
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -6,7 +6,9 @@
 	}
 
 	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID ? 10.0F : this.worldObj.getLightBrightness(var1, var2, var3) - 0.5F;
+		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID
+				|| this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.jungleGrass.blockID
+				? 10.0F : this.worldObj.getLightBrightness(var1, var2, var3) - 0.5F;
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
@@ -21,10 +23,20 @@
 		int var1 = MathHelper.floor_double(this.posX);
 		int var2 = MathHelper.floor_double(this.boundingBox.minY);
 		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID && this.worldObj.getFullBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
+		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID
+				|| this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.jungleGrass.blockID
+				&& this.worldObj.getFullBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
 	}
 
 	public int getTalkInterval() {
 		return 120;
+	}
+
+	public int getMaxHealth() {
+		return 5;
+	}
+
+	protected void jump() {
+		this.motionY = 0.42F;
 	}
 }
--- net/minecraft/src/EntityMob.java
+++ net/minecraft/src/EntityMob.java
@@ -1,11 +1,10 @@
 package net.minecraft.src;
 
 public class EntityMob extends EntityCreature implements IMob {
-	protected int attackStrength = 2;
+	protected int attackStrength = 10;
 
 	public EntityMob(World var1) {
 		super(var1);
-		this.health = 20;
 	}
 
 	public void onLivingUpdate() {
@@ -14,6 +13,10 @@
 			this.entityAge += 2;
 		}
 
+		if(this.worldObj.isDaytime() && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+			this.attackEntityFrom(null, 5);
+		}
+
 		super.onLivingUpdate();
 	}
 
@@ -83,5 +86,9 @@
 
 			return var4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
 		}
+	}
+
+	public int getMaxHealth() {
+		return this.worldObj != null && this.worldObj.difficultySetting == 3 ? 100 : 50;
 	}
 }
--- net/minecraft/src/BlockFlower.java
+++ net/minecraft/src/BlockFlower.java
@@ -16,7 +16,11 @@
 	}
 
 	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.grass.blockID || var1 == Block.dirt.blockID || var1 == Block.tilledField.blockID;
+		return var1 == Block.grass.blockID
+				|| var1 == Block.dirt.blockID
+				|| var1 == Block.mud.blockID
+				|| var1 == Block.jungleGrass.blockID
+				|| var1 == Block.tilledField.blockID;
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -50,88 +50,67 @@
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/gui.png"));
 		InventoryPlayer var11 = this.mc.thePlayer.inventory;
 		this.zLevel = -90.0F;
-		this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
-		this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var11.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
+		this.drawTexturedModalRect(4, 16, 0, 0, 182, 22);
+		this.drawTexturedModalRect(3 + var11.currentItem * 20, 15, 0, 22, 24, 24);
+		ItemStack i = var11.getCurrentItem();
+		if (i != null) {
+			this.drawCenteredString(this.mc.fontRenderer, StringTranslate.getInstance().translateNamedKey(i.getItemName()), 94, 4, 0xFFFFFF);
+		}
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
 		GL11.glEnable(GL11.GL_BLEND);
-		GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
-		this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+		GL11.glColor4f(this.mc.gameSettings.cursorBorderR, this.mc.gameSettings.cursorBorderG, this.mc.gameSettings.cursorBorderB, this.mc.gameSettings.cursorBorderA);
+		this.drawTexturedModalRect(var6 / 2 - (this.mc.gameSettings.thirdPersonView ? 60 : 7), var7 / 2 - 7, 0, 16, 16, 16);
+		GL11.glColor4f(this.mc.gameSettings.cursorR, this.mc.gameSettings.cursorG, this.mc.gameSettings.cursorB, 1.0F);
+		this.drawTexturedModalRect(var6 / 2 - (this.mc.gameSettings.thirdPersonView ? 60 : 7), var7 / 2 - 7, 0, 0, 16, 16);
 		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		boolean var12 = this.mc.thePlayer.heartsLife / 3 % 2 == 1;
 		if(this.mc.thePlayer.heartsLife < 10) {
 			var12 = false;
 		}
 
-		int var13 = this.mc.thePlayer.health;
-		int var14 = this.mc.thePlayer.prevHealth;
+		float var13 = this.mc.thePlayer.health / 20.0F;
 		this.rand.setSeed((long)(this.updateCounter * 312871));
 		int var15;
 		int var16;
 		int var17;
 		if(this.mc.playerController.shouldDrawHUD()) {
-			var15 = this.mc.thePlayer.getPlayerArmorValue();
-
 			int var18;
-			for(var16 = 0; var16 < 10; ++var16) {
-				var17 = var7 - 32;
-				if(var15 > 0) {
-					var18 = var6 / 2 + 91 - var16 * 8 - 9;
-					if(var16 * 2 + 1 < var15) {
-						this.drawTexturedModalRect(var18, var17, 34, 9, 9, 9);
-					}
-
-					if(var16 * 2 + 1 == var15) {
-						this.drawTexturedModalRect(var18, var17, 25, 9, 9, 9);
-					}
-
-					if(var16 * 2 + 1 > var15) {
-						this.drawTexturedModalRect(var18, var17, 16, 9, 9, 9);
-					}
-				}
-
-				byte var28 = 0;
-				if(var12) {
-					var28 = 1;
-				}
-
-				int var19 = var6 / 2 - 91 + var16 * 8;
-				if(var13 <= 4) {
-					var17 += this.rand.nextInt(2);
-				}
-
-				this.drawTexturedModalRect(var19, var17, 16 + var28 * 9, 0, 9, 9);
-				if(var12) {
-					if(var16 * 2 + 1 < var14) {
-						this.drawTexturedModalRect(var19, var17, 70, 0, 9, 9);
-					}
-
-					if(var16 * 2 + 1 == var14) {
-						this.drawTexturedModalRect(var19, var17, 79, 0, 9, 9);
-					}
-				}
-
-				if(var16 * 2 + 1 < var13) {
+			for(var16 = 0; var16 < Math.ceil(this.mc.thePlayer.getMaxHealth() / 20.0F); ++var16) {
+				int var19 = var6 + (var16 % 10) * 8 - 85;
+				var17 = 16 + var16 / 10 * 8;
+
+				this.drawTexturedModalRect(var19, var17, 16, 0, 9, 9);
+				if (var16 == (int)Math.ceil(var13 - 1)) {
+					var17 -= (int)Math.abs(Math.sin((this.updateCounter + var1) / 10.0F) * 3.0F);
+				}
+
+				if(var16 < (int)Math.ceil(var13)) {
+					GL11.glEnable(GL11.GL_BLEND);
+					GL11.glColor4f(1.0F, 1.0F, 1.0F, var13 - var16);
 					this.drawTexturedModalRect(var19, var17, 52, 0, 9, 9);
-				}
-
-				if(var16 * 2 + 1 == var13) {
-					this.drawTexturedModalRect(var19, var17, 61, 0, 9, 9);
+					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+					GL11.glDisable(GL11.GL_BLEND);
 				}
 			}
 
-			if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
-				var16 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
-				var17 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var16;
+			if(this.mc.thePlayer.air < this.mc.thePlayer.maxAir) {
+				var16 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / this.mc.thePlayer.maxAir);
+				var17 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / this.mc.thePlayer.maxAir) - var16;
 
 				for(var18 = 0; var18 < var16 + var17; ++var18) {
 					if(var18 < var16) {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var18 * 8, var7 - 32 - 9, 16, 18, 9, 9);
+						this.drawTexturedModalRect(var6 / 2 - 40 + var18 * 8, var7 / 2 - 24, 16, 18, 9, 9);
 					} else {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var18 * 8, var7 - 32 - 9, 25, 18, 9, 9);
+						this.drawTexturedModalRect(var6 / 2 - 40 + var18 * 8, var7 / 2 - 24, 25, 18, 9, 9);
 					}
 				}
 			}
 		}
+
+		this.drawCenteredString(this.mc.fontRenderer, "Life: "
+				+ Math.min(Math.max(this.mc.thePlayer.health, 0), this.mc.thePlayer.getMaxHealth())
+				+ " / " + this.mc.thePlayer.getMaxHealth(), var6 - 45, 4, 0xFFFFFF);
 
 		GL11.glDisable(GL11.GL_BLEND);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
@@ -140,10 +119,12 @@
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
 
-		for(var15 = 0; var15 < 9; ++var15) {
-			var16 = var6 / 2 - 90 + var15 * 20 + 2;
-			var17 = var7 - 16 - 3;
-			this.renderInventorySlot(var15, var16, var17, var1);
+		if (!(this.mc.currentScreen instanceof GuiContainer)) {
+			for(var15 = 0; var15 < 9; ++var15) {
+				var16 = 7 + var15 * 20;
+				var17 = 19;
+				this.renderInventorySlot(var15, var16, var17, var1);
+			}
 		}
 
 		RenderHelper.disableStandardItemLighting();
@@ -188,6 +169,26 @@
 			this.drawString(var8, "z: " + this.mc.thePlayer.posZ, 2, 80, 14737632);
 			this.drawString(var8, "f: " + (MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3), 2, 88, 14737632);
 			GL11.glPopMatrix();
+		}
+
+		for (int ii = 0; ii < this.mc.thePlayer.inventory.getSizeInventory(); ii++) {
+			ItemStack item = this.mc.thePlayer.inventory.getStackInSlot(ii);
+			if (item != null && item.itemID == Item.compass.shiftedIndex) {
+				int x = (int)(this.mc.thePlayer.posX * 3.28084D);
+				int y = (int)((this.mc.thePlayer.posY - 57.62D) * 3.28084D);
+				int z = (int)(this.mc.thePlayer.posZ * 3.28084D);
+				String[] dirs = {
+						"South",
+						"West",
+						"North",
+						"East"
+				};
+				this.drawStringRight(var8, (Math.signum(x) == 0 ? "Center, " : Math.abs(x) + (Math.signum(x) == -1 ? "' West, " : "' East, "))
+						+ (Math.signum(z) == 0 ? "Center" : Math.abs(z) + (Math.signum(z) == -1 ? "' North" : "' South")), var6 - 2, 32, 14737632);
+				this.drawStringRight(var8, (Math.signum(y) == 0 ? "Level Surface" : Math.abs(y) + (Math.signum(y) == -1 ? "' Underground" : "' Surface")), var6 - 2, 42, 14737632);
+				this.drawStringRight(var8, "Facing " + dirs[MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3], var6 - 2, 52, 14737632);
+				break;
+			}
 		}
 
 		if(this.recordPlayingUpFor > 0) {
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -4,17 +4,16 @@
 	public ItemHoe(int var1, EnumToolMaterial var2) {
 		super(var1);
 		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
 		int var8 = var3.getBlockId(var4, var5, var6);
 		int var9 = var3.getBlockId(var4, var5 + 1, var6);
-		if((var7 == 0 || var9 != 0 || var8 != Block.grass.blockID) && var8 != Block.dirt.blockID) {
+		if((var7 == 0 || var9 != 0 || var8 != Block.grass.blockID || var8 != Block.jungleGrass.blockID) && (var8 != Block.dirt.blockID || var8 != Block.mud.blockID)) {
 			return false;
 		} else {
 			Block var10 = Block.tilledField;
-			var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var10.stepSound.func_1145_d(), (var10.stepSound.getVolume() + 1.0F) / 2.0F, var10.stepSound.getPitch() * 0.8F);
+			var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), "Dig_", 1.0F, 1.0F);
 			if(var3.multiplayerWorld) {
 				return true;
 			} else {
--- net/minecraft/src/ShapedRecipes.java
+++ net/minecraft/src/ShapedRecipes.java
@@ -1,10 +1,15 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
 public class ShapedRecipes implements IRecipe {
 	private int recipeWidth;
 	private int recipeHeight;
 	private ItemStack[] recipeItems;
 	private ItemStack recipeOutput;
+	private ItemStack[] stackedRecipeItems;
 	public final int recipeOutputItemID;
 
 	public ShapedRecipes(int var1, int var2, ItemStack[] var3, ItemStack var4) {
@@ -13,10 +18,31 @@
 		this.recipeHeight = var2;
 		this.recipeItems = var3;
 		this.recipeOutput = var4;
+
+		List<ItemStack> stackedRecipeItems = new ArrayList<>();
+		itemLoop: for (ItemStack item : var3) {
+			if (item == null) continue;
+			for (ItemStack stackedItem : stackedRecipeItems) {
+				if (item.itemID == stackedItem.itemID && (item.getItemDamage() == -1 || item.getItemDamage() == stackedItem.getItemDamage())) {
+					stackedItem.stackSize += item.stackSize;
+					continue itemLoop;
+				}
+			}
+			stackedRecipeItems.add(new ItemStack(item.itemID, item.stackSize, item.getItemDamage()));
+		}
+		this.stackedRecipeItems = stackedRecipeItems.toArray(new ItemStack[0]);
 	}
 
 	public ItemStack getRecipeOutput() {
 		return this.recipeOutput;
+	}
+
+	public ItemStack[] getStackedItems() {
+		return this.stackedRecipeItems;
+	}
+
+	public Block getRequiredBlock() {
+		return this.recipeWidth > 2 || this.recipeHeight > 2 ? Block.workbench : null;
 	}
 
 	public boolean matches(InventoryCrafting var1) {
--- /dev/null
+++ net/minecraft/src/StepSoundRail.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class StepSoundRail extends StepSound {
+	public StepSoundRail(String var1, float var2, float var3) {
+		super(var1, var2, var3);
+	}
+
+	public String stepSoundDir() {
+		return "Item_52";
+	}
+
+	public String breakSoundDir() {
+		return "Item_52";
+	}
+
+	public boolean isTerraSound() {
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiSplash.java
@@ -1,0 +1,109 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+import org.lwjgl.opengl.GL11;
+
+import java.io.File;
+import java.util.Random;
+
+public class GuiSplash extends GuiScreen {
+	private int updateCounter;
+	private int background = new Random().nextInt(4);
+	private boolean missingAssets;
+
+	public GuiSplash() {
+		File resources = new File(Minecraft.getMinecraftDir(), "resources");
+		File tmusic = new File(resources, "tmusic");
+		File tsound = new File(resources, "tsound");
+		missingAssets = !tmusic.exists() || !tsound.exists();
+	}
+
+	public void initGui() {
+		if (this.mc.gameSettings.titleMusicType == 0) {
+			this.mc.sndManager.playTMusic("50_Unknown");
+		}
+	}
+
+	public void updateScreen() {
+		++this.updateCounter;
+		if (this.updateCounter >= (this.mc.gameSettings.musicVolume == 0.0F || this.mc.gameSettings.titleMusicType > 0 ? 87 : 207)) {
+			this.mc.displayGuiScreen(this.missingAssets ? new GuiMissingAssets() : null);
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		GL11.glEnable(GL11.GL_BLEND);
+
+		boolean quickSplash = this.mc.gameSettings.musicVolume == 0.0F || this.mc.gameSettings.titleMusicType > 0;
+		float splashCounter = (this.updateCounter + var3) * 3.0F;
+
+		if (!quickSplash) {
+			splashCounter += 120;
+		}
+
+		byte b = 0;
+		if (quickSplash) {
+			if (splashCounter <= 75) {
+				b = (byte)((float)splashCounter / 75F * 255F);
+			} else if (splashCounter <= 125) {
+				b = (byte)255;
+			} else if (splashCounter <= 200) {
+				b = (byte)((float)(75 - (splashCounter - 125)) / 75F * 255F);
+			}
+		} else {
+			int num3 = 90;
+			int num4 = 410;
+			int num5 = 620;
+			int num6 = 60;
+			if (splashCounter >= num3) {
+				if (splashCounter <= num4) {
+					float num7 = (float)(splashCounter - num3) / (float)(num4 - num3);
+					num7 *= num7 * num7 * num7;
+					num7 *= 255F;
+					b = (byte)num7;
+				} else if (splashCounter <= num5) {
+					b = (byte)255;
+					if (splashCounter >= num5 - num6) {
+						b = (byte)((float)(num6 - (splashCounter - (num5 - num6))) / (float)num6 * 255F);
+					}
+				}
+			}
+		}
+		float f = (b & 0xFF) / 255.0F;
+
+		int texMojang = this.mc.renderEngine.getTexture("/title/mojang.png");
+		int texC418 = this.mc.renderEngine.getTexture("/title/c418.png");
+		int texBackground = this.mc.renderEngine.getTexture("/title/bg/logo" + this.background + ".jpg");
+
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
+		GL11.glColor4f(f, f, f, 1.0F);
+
+		if (this.mc.gameSettings.titleMusicType != 1) {
+			GL11.glDisable(GL11.GL_ALPHA_TEST);
+			this.mc.renderEngine.bindTexture(texBackground);
+			Tessellator t = Tessellator.instance;
+			t.startDrawingQuads();
+			t.addVertexWithUV(0, this.height, this.zLevel - 1.0F, 0, 1);
+			t.addVertexWithUV(this.width, this.height, this.zLevel - 1.0F, 1, 1);
+			t.addVertexWithUV(this.width, 0, this.zLevel - 1.0F, 1, 0);
+			t.addVertexWithUV(0, 0, this.zLevel - 1.0F, 0, 0);
+			t.draw();
+			GL11.glEnable(GL11.GL_ALPHA_TEST);
+		}
+
+		GL11.glColor4f(f, f, f, 1.0F);
+		if (this.mc.gameSettings.titleMusicType == 1) {
+			GL11.glEnable(GL11.GL_BLEND);
+			this.mc.renderEngine.bindTexture(texC418);
+			this.drawTexturedModalRect(0, this.height - 64, 0, 32, 256, 64);
+		}
+
+		this.mc.renderEngine.bindTexture(texMojang);
+		this.drawTexturedModalRect((this.width - 256) / 2, (this.height - 256) / 2, 0, 0, 256, 256);
+
+		GL11.glDisable(GL11.GL_BLEND);
+	}
+
+	protected void keyTyped(char var1, int var2) {
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -4,7 +4,7 @@
 
 public class WorldGenTrees extends WorldGenerator {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
+		int var6 = var2.nextInt(5) + 6;
 		boolean var7 = true;
 		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
 			int var8;
@@ -39,8 +39,12 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID || var8 == Block.jungleGrass.blockID || var8 == Block.mud.blockID) && var4 < 128 - var6 - 1) {
+					if (var8 == Block.grass.blockID) {
+						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+					} else if (var8 == Block.jungleGrass.blockID) {
+						var1.setBlock(var3, var4 - 1, var5, Block.mud.blockID);
+					}
 
 					int var16;
 					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
--- /dev/null
+++ net/minecraft/src/ItemShortsword.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class ItemShortsword extends ItemSword {
+	public ItemShortsword(int var1, EnumToolMaterial var2) {
+		super(var1, var2);
+		this.weaponDamage = var2.getShortDamageVsEntity();
+		this.weaponSpeed = var2.getShortSpeedVsEntity();
+	}
+
+	public float getReach() {
+		return 3.0F;
+	}
+}
--- net/minecraft/src/ItemDoor.java
+++ net/minecraft/src/ItemDoor.java
@@ -6,7 +6,6 @@
 	public ItemDoor(int var1, Material var2) {
 		super(var1);
 		this.doorMaterial = var2;
-		this.maxStackSize = 1;
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
--- /dev/null
+++ net/minecraft/src/WorldGenLifeCrystal.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenLifeCrystal extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		if (var1.isBlockNormalCube(var3, var4 - 1, var5) && var1.isAirBlock(var3, var4, var5)) {
+			var1.setBlock(var3, var4, var5, Block.lifeCrystal.blockID);
+			return true;
+		}
+		return false;
+	}
+}
--- net/minecraft/src/GuiDownloadTerrain.java
+++ net/minecraft/src/GuiDownloadTerrain.java
@@ -16,6 +16,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		++this.updateCounter;
 		if(this.updateCounter % 20 == 0) {
 			this.netHandler.addToSendQueue(new Packet0KeepAlive());
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -83,7 +83,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public int getCookProgressScaled(int var1) {
@@ -136,7 +136,6 @@
 
 			if(var1 != this.furnaceBurnTime > 0) {
 				var2 = true;
-				BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
 			}
 		}
 
--- net/minecraft/src/GuiTexturePackSlot.java
+++ net/minecraft/src/GuiTexturePackSlot.java
@@ -32,7 +32,7 @@
 	}
 
 	protected void drawBackground() {
-		this.parentTexturePackGui.drawDefaultBackground();
+		this.parentTexturePackGui.drawWorldBackground(1);
 	}
 
 	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
--- net/minecraft/src/WorldProvider.java
+++ net/minecraft/src/WorldProvider.java
@@ -17,7 +17,7 @@
 	}
 
 	protected void generateLightBrightnessTable() {
-		float var1 = 0.05F;
+		float var1 = 0.0F;
 
 		for(int var2 = 0; var2 <= 15; ++var2) {
 			float var3 = 1.0F - (float)var2 / 15.0F;
--- net/minecraft/src/ItemFishingRod.java
+++ net/minecraft/src/ItemFishingRod.java
@@ -21,7 +21,7 @@
 			var1.damageItem(var4, var3);
 			var3.swingItem();
 		} else {
-			var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
+			var2.playSoundAtEntity(var3, "Item_5", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
 			if(!var2.multiplayerWorld) {
 				var2.entityJoinedWorld(new EntityFish(var2, var3));
 			}
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -1,9 +1,6 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
+import java.util.*;
 
 public class CraftingManager {
 	private static final CraftingManager instance = new CraftingManager();
@@ -45,17 +42,19 @@
 		this.addRecipe(new ItemStack(Item.cake, 1), new Object[]{"AAA", "BEB", "CCC", Character.valueOf('A'), Item.bucketMilk, Character.valueOf('B'), Item.sugar, Character.valueOf('C'), Item.wheat, Character.valueOf('E'), Item.egg});
 		this.addRecipe(new ItemStack(Item.sugar, 1), new Object[]{"#", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
+		this.addRecipe(new ItemStack(Block.wood, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), new ItemStack(Item.coal, 1, 1), Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.slimeBall, Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.rail, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.railPowered, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.ingotGold, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Item.stick});
+		this.addShapelessRecipe(new ItemStack(Block.rail, 16), Item.ingotIron, Item.stick).requireBlock(Block.workbench);
+//		this.addRecipe(new ItemStack(Block.railPowered, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.ingotGold, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.railDetector, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Block.pressurePlateStone});
-		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ingotIron});
+		this.addShapelessRecipe(new ItemStack(Item.minecartEmpty, 1), new ItemStack(Item.ingotIron, 15), new ItemStack(Block.planks, 10)).requireBlock(Block.workbench);
 		this.addRecipe(new ItemStack(Block.pumpkinLantern, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.pumpkin, Character.valueOf('B'), Block.torchWood});
-		this.addRecipe(new ItemStack(Item.minecartCrate, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.minecartPowered, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
+//		this.addRecipe(new ItemStack(Item.minecartCrate, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecartEmpty});
+//		this.addRecipe(new ItemStack(Item.minecartPowered, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
 		this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
 		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
@@ -77,7 +76,19 @@
 		this.addRecipe(new ItemStack(Block.dispenser, 1), new Object[]{"###", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.bow, Character.valueOf('R'), Item.redstone});
 		this.addRecipe(new ItemStack(Block.pistonBase, 1), new Object[]{"TTT", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('T'), Block.planks});
 		this.addRecipe(new ItemStack(Block.pistonStickyBase, 1), new Object[]{"S", "P", Character.valueOf('S'), Item.slimeBall, Character.valueOf('P'), Block.pistonBase});
-		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.cloth, Character.valueOf('X'), Block.planks});
+		this.addShapelessRecipe(new ItemStack(Item.bed, 1), new ItemStack(Block.planks, 15), new ItemStack(Block.cloth, 5)).requireBlock(Block.workbench);
+		this.addShapelessRecipe(new ItemStack(Item.ingotCopper), new ItemStack(Block.oreCopper, 3)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.ingotIron), new ItemStack(Block.oreIron, 3)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.ingotGold), new ItemStack(Block.oreGold, 4)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.diamond), new ItemStack(Block.oreDiamond, 4)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Block.glass), new ItemStack(Block.sand, 2)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.porkCooked), new ItemStack(Item.porkRaw)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.fishCooked), new ItemStack(Item.fishRaw)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Block.stone), new ItemStack(Block.cobblestone)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.brick), new ItemStack(Item.clay)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.dyePowder, 1, 2), new ItemStack(Block.cactus)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Item.coal, 1, 1), new ItemStack(Block.wood, 1)).requireBlock(Block.stoneOvenIdle);
+		this.addShapelessRecipe(new ItemStack(Block.mud), Block.dirt).requireBlock(Block.waterStill);
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
@@ -134,7 +145,7 @@
 		this.recipes.add(new ShapedRecipes(var5, var6, var14, var1));
 	}
 
-	void addShapelessRecipe(ItemStack var1, Object... var2) {
+	ShapelessRecipes addShapelessRecipe(ItemStack var1, Object... var2) {
 		ArrayList var3 = new ArrayList();
 		Object[] var4 = var2;
 		int var5 = var2.length;
@@ -154,7 +165,9 @@
 			}
 		}
 
-		this.recipes.add(new ShapelessRecipes(var1, var3));
+		ShapelessRecipes recipe = new ShapelessRecipes(var1, var3);
+		this.recipes.add(recipe);
+		return recipe;
 	}
 
 	public ItemStack findMatchingRecipe(InventoryCrafting var1) {
@@ -170,5 +183,17 @@
 
 	public List getRecipeList() {
 		return this.recipes;
+	}
+
+	public List<StackedRecipe> findMatchingRecipes(IInventory inventory, Set<Block> nearbyBlocks) {
+		List<StackedRecipe> recipes = new ArrayList<>();
+
+		for (IRecipe recipe : (List<IRecipe>)this.recipes) {
+			if (recipe.matchesStacked(inventory) && (recipe.getRequiredBlock() == null || nearbyBlocks.contains(recipe.getRequiredBlock()))) {
+				recipes.add(new StackedRecipe(recipe, recipe.getRecipeOutput(), recipe.getStackedItems()));
+			}
+		}
+
+		return recipes;
 	}
 }
--- net/minecraft/src/EntityPigZombie.java
+++ net/minecraft/src/EntityPigZombie.java
@@ -11,7 +11,7 @@
 		super(var1);
 		this.texture = "/mob/pigzombie.png";
 		this.moveSpeed = 0.5F;
-		this.attackStrength = 5;
+		this.attackStrength = 15;
 		this.isImmuneToFire = true;
 	}
 
--- /dev/null
+++ net/minecraft/src/GuiMissingAssets.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+public class GuiMissingAssets extends GuiScreen {
+	private static final String[] message = {
+			"Note: Missing Terraria assets!",
+			"",
+			"To obtain Terraria's assets, extract them with TExtract.",
+			"The assets must be extracted from version 1.4 or later.",
+			"Move the 'Wave Bank' and 'Sounds' folders to .minecraft/resources",
+			"and rename them to 'tmusic' and 'tsound' respectively."
+	};
+
+	public void initGui() {
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height * 3 / 4, "Understood"));
+	}
+
+	protected void keyTyped(char var1, int var2) {
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		int i = 0;
+		for (String line : message) {
+			this.drawCenteredString(this.fontRenderer, line, this.width / 2, this.height / 2 + (i - message.length / 2) * 10, 0xFFFF55);
+			i++;
+		}
+		super.drawScreen(var1, var2, var3);
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		this.mc.displayGuiScreen(null);
+		this.mc.setIngameFocus();
+	}
+}
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -77,9 +77,10 @@
 
 							for(int var52 = 0; var52 < 4; ++var52) {
 								double var53 = var5[(var11 * 4 + var43) * 16 + var12 * 4 + var52];
+								BiomeGenBase var53a = var4[(var11 * 4 + var43) * 16 + var12 * 4 + var52];
 								int var55 = 0;
 								if(var13 * 8 + var32 < var7) {
-									if(var53 < 0.5D && var13 * 8 + var32 >= var7 - 1) {
+									if(var53a.getEnableSnow() && var13 * 8 + var32 >= var7 - 1) {
 										var55 = Block.ice.blockID;
 									} else {
 										var55 = Block.waterStill.blockID;
@@ -87,7 +88,7 @@
 								}
 
 								if(var48 > 0.0D) {
-									var55 = Block.stone.blockID;
+									var55 = var53a.groundBlock;
 								}
 
 								var3[var44] = (byte)var55;
@@ -135,7 +136,7 @@
 						byte var19 = var3[var18];
 						if(var19 == 0) {
 							var14 = -1;
-						} else if(var19 == Block.stone.blockID) {
+						} else if(var19 == var10.groundBlock) {
 							if(var14 == -1) {
 								if(var13 <= 0) {
 									var15 = 0;
@@ -320,7 +321,7 @@
 		int var13;
 		int var14;
 		int var15;
-		if(this.rand.nextInt(4) == 0) {
+		if(this.rand.nextInt(4) == 0 || var6 == BiomeGenBase.rainforest) {
 			var13 = var4 + this.rand.nextInt(16) + 8;
 			var14 = this.rand.nextInt(128);
 			var15 = var5 + this.rand.nextInt(16) + 8;
@@ -337,6 +338,13 @@
 		}
 
 		int var16;
+		for(var13 = 0; var13 < 10; ++var13) {
+			var14 = var4 + this.rand.nextInt(16) + 8;
+			var15 = this.rand.nextInt(56);
+			var16 = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenLifeCrystal()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
 		for(var13 = 0; var13 < 8; ++var13) {
 			var14 = var4 + this.rand.nextInt(16) + 8;
 			var15 = this.rand.nextInt(128);
@@ -355,35 +363,112 @@
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(128);
 			var16 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var13 = 0; var13 < 10; ++var13) {
-			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var13 = 0; var13 < 20; ++var13) {
-			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var13 = 0; var13 < 20; ++var13) {
-			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(64);
-			var16 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new WorldGenMinable(Block.dirt.blockID, 32).only().inStone()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 10; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.gravel.blockID, 32).only().inStone()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 20; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(56);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.cobblestoneMossy.blockID, 32).only().inMud()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 20; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(56);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.packedIce.blockID, 32).only().inSnow()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 5; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(56);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.gravel.blockID, 32).only().inSnow().inMud()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 50; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenSand(32)).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 50; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(56);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMud(32)).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 14; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreCoal.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inAnyStone()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 7; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(56);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreCoal.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inSnow().inMud()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 20; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreCopper.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inAnyStone()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 10; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(60);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreCopper.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inSnow().inMud()).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 2; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(32);
-			var16 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreCopper.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inDirt()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 16; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreIron.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inAnyStone()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 8; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(60);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreIron.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inSnow().inMud()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 1; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(128);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreIron.blockID, 20 + this.rand.nextInt(8) - (var15) / 8).only().inDirt()).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 5; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(48);
+			var16 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreGold.blockID, 20 + this.rand.nextInt(8) - (var15) / 8)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 8; ++var13) {
@@ -393,11 +478,11 @@
 			(new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
-		for(var13 = 0; var13 < 1; ++var13) {
+		for(var13 = 0; var13 < 3; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(16);
+			var15 = this.rand.nextInt(48);
 			var16 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new WorldGenMinable(Block.oreDiamond.blockID, 20 + this.rand.nextInt(8) - (var15) / 8)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 1; ++var13) {
@@ -410,8 +495,8 @@
 		var11 = 0.5D;
 		var13 = (int)((this.mobSpawnerNoise.func_806_a((double)var4 * var11, (double)var5 * var11) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
 		var14 = 0;
-		if(this.rand.nextInt(10) == 0) {
-			++var14;
+		if(this.rand.nextInt(5) == 0) {
+			var14 += this.rand.nextInt(2) + 1;
 		}
 
 		if(var6 == BiomeGenBase.forest) {
@@ -435,11 +520,10 @@
 		}
 
 		if(var6 == BiomeGenBase.tundra) {
-			var14 -= 20;
-		}
-
-		if(var6 == BiomeGenBase.plains) {
-			var14 -= 20;
+			var14 = 0;
+			if (this.rand.nextInt(3) == 0) {
+				var14 += this.rand.nextInt(2) + 1;
+			}
 		}
 
 		int var17;
@@ -593,7 +677,11 @@
 				var21 = var19 - (var5 + 8);
 				int var22 = this.worldObj.findTopSolidBlock(var25, var19);
 				double var23 = this.generatedTemperatures[var20 * 16 + var21] - (double)(var22 - 64) / 64.0D * 0.3D;
-				if(var23 < 0.5D && var22 > 0 && var22 < 128 && this.worldObj.isAirBlock(var25, var22, var19) && this.worldObj.getBlockMaterial(var25, var22 - 1, var19).getIsSolid() && this.worldObj.getBlockMaterial(var25, var22 - 1, var19) != Material.ice) {
+				if(this.worldObj.getWorldChunkManager().getBiomeGenAt(var25, var19).getEnableSnow()
+						&& var22 > 0 && var22 < 128 && this.worldObj.isAirBlock(var25, var22, var19)
+						&& this.worldObj.getBlockMaterial(var25, var22 - 1, var19).getIsSolid()
+						&& this.worldObj.getBlockMaterial(var25, var22 - 1, var19) != Material.ice
+						&& this.worldObj.getBlockMaterial(var25, var22 - 1, var19) != Material.builtSnow) {
 					this.worldObj.setBlockWithNotify(var25, var22, var19, Block.snow.blockID);
 				}
 			}
--- net/minecraft/src/ItemReed.java
+++ net/minecraft/src/ItemReed.java
@@ -45,7 +45,7 @@
 				if(var3.setBlockWithNotify(var4, var5, var6, this.field_320_a)) {
 					Block.blocksList[this.field_320_a].onBlockPlaced(var3, var4, var5, var6, var7);
 					Block.blocksList[this.field_320_a].onBlockPlacedBy(var3, var4, var5, var6, var2);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.func_1145_d(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
+					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), "Dig_", 1.0F, 1.0F);
 					--var1.stackSize;
 				}
 			}
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -1,29 +1,109 @@
 package net.minecraft.src;
 
 import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import java.util.List;
+import java.util.Map;
+
 public abstract class GuiContainer extends GuiScreen {
 	private static RenderItem itemRenderer = new RenderItem();
 	protected int xSize = 176;
 	protected int ySize = 166;
+	protected int offX = 4;
+	protected int offY = 40;
 	public Container inventorySlots;
+	private List<StackedRecipe> recipes;
+	private ItemStack recipeResult;
+	private int recipeIndex;
+	private int rlist;
 
 	public GuiContainer(Container var1) {
 		this.inventorySlots = var1;
 	}
 
 	public void initGui() {
-		super.initGui();
+		this.controlList.add(new GuiButton(0, this.width - 80, this.height - 20, 80, 20, "Settings").asTransparent());
 		this.mc.thePlayer.craftingInventory = this.inventorySlots;
+		this.updateRecipes();
+	}
+
+	private void updateRecipes() {
+		List<StackedRecipe> oldRecipes = this.recipes;
+		this.recipes = CraftingManager.getInstance().findMatchingRecipes(this.mc.thePlayer.inventory, this.mc.thePlayer.getNearbyBlocks());
+
+		if (oldRecipes == null || oldRecipes.equals(this.recipes)) {
+			if (this.recipes.size() > 0) {
+				this.recipeResult = this.recipes.get(this.recipeIndex).result;
+			}
+		}
+
+		if (this.recipeResult != null) {
+			int i = 0;
+			for (StackedRecipe recipe : this.recipes) {
+				if (recipe.result.equals(this.recipeResult)) {
+					this.recipeIndex = i;
+					break;
+				}
+				i++;
+			}
+		}
+
+		if (this.recipeIndex >= this.recipes.size()) {
+			this.recipeIndex = this.recipes.size() - 1;
+		}
+
+		if (this.recipeIndex < 0) {
+			this.recipeIndex = 0;
+		}
+
+		if (this.recipes.size() > 0) {
+			this.recipeResult = this.recipes.get(this.recipeIndex).result;
+		}
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		int var4 = (this.width - this.xSize) / 2;
-		int var5 = (this.height - this.ySize) / 2;
+		this.rlist = ((this.height - 106) / 24 - 1) / 2;
+
+		int var4 = this.offX;
+		int var5 = this.offY;
 		this.drawGuiContainerBackgroundLayer(var3);
+
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glDisable(GL11.GL_ALPHA_TEST);
+
+		ItemStack[] ingredients = this.recipes.size() > 0 && this.ySize + this.offY < 106 + rlist * 24 ? this.recipes.get(this.recipeIndex).ingredients : null;
+		int tex = this.mc.renderEngine.getTexture("/gui/gui.png");
+		this.mc.renderEngine.bindTexture(tex);
+		for (int i = this.recipeIndex - rlist; i <= Math.min(this.recipeIndex + rlist, this.recipes.size() - 1); i++) {
+			int j = i - this.recipeIndex + rlist;
+			if (i >= 0) {
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, j == 0 || j == rlist * 2 ? 0.5F : 1.0F);
+				this.drawTexturedModalRect(4, 106 + j * 24, 24, 22, 22, 22);
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			}
+		}
+
+		if (ingredients != null) {
+			this.drawTexturedModalRect(32, 106 + rlist * 24, 0, 0, 1, 22);
+			this.drawTexturedModalRect(33, 106 + rlist * 24, 1, 0, 20 * ingredients.length, 22);
+			this.drawTexturedModalRect(33 + 20 * ingredients.length, 106 + rlist * 24, 181, 0, 1, 22);
+		}
+		if (this.recipes.size() > 0) {
+			this.drawTexturedModalRect(3, 105 + rlist * 24, 0, 22, 24, 24);
+		}
+
+		tex = this.mc.renderEngine.getTexture("/gui/icons.png");
+		this.mc.renderEngine.bindTexture(tex);
+		this.drawTexturedModalRect(this.width - 19, 86 + var5, 34, 9, 9, 9);
+		this.drawStringRight(this.fontRenderer, String.valueOf(this.mc.thePlayer.getPlayerArmorValue()), this.width - 21, 87 + var5, 0xFFFFFF);
+
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glDisable(GL11.GL_BLEND);
+
 		GL11.glPushMatrix();
 		GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
@@ -45,12 +125,32 @@
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
 				var9 = var8.xDisplayPosition;
 				var10 = var8.yDisplayPosition;
+				if (var9 < 0) var9 = this.width + var9 - var4;
 				this.drawGradientRect(var9, var10, var9 + 16, var10 + 16, -2130706433, -2130706433);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
 		}
 
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glDisable(GL11.GL_ALPHA_TEST);
+		itemRenderer.field_27004_a = false;
+
+		for (int i = this.recipeIndex - rlist; i <= Math.min(this.recipeIndex + rlist, this.recipes.size() - 1); i++) {
+			int j = i - this.recipeIndex + rlist;
+			if (i >= 0) {
+				ItemStack item = this.recipes.get(i).result;
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, j == 0 || j == rlist * 2 ? 0.5F : 1.0F);
+				itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, item, 7 - var4, 109 + j * 24 - var5);
+				itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, item, 7 - var4, 109 + j * 24 - var5);
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			}
+		}
+
+		itemRenderer.field_27004_a = true;
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glDisable(GL11.GL_BLEND);
+
 		InventoryPlayer var12 = this.mc.thePlayer.inventory;
 		if(var12.getItemStack() != null) {
 			GL11.glTranslatef(0.0F, 0.0F, 32.0F);
@@ -58,26 +158,61 @@
 			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var12.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
 		}
 
+		if (ingredients != null) {
+			int i = 0;
+			for (ItemStack ingredient : ingredients) {
+				if (ingredient.getItemDamage() == -1) {
+					ingredient = ingredient.copy();
+					ingredient.setItemDamage(0);
+				}
+				itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, ingredient, 35 + 20 * i - var4, 109 + rlist * 24 - var5);
+				itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, ingredient, 35 + 20 * i - var4, 109 + rlist * 24 - var5);
+				i++;
+			}
+		}
+
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
-		this.drawGuiContainerForegroundLayer();
+		String tooltip = "";
 		if(var12.getItemStack() == null && var6 != null && var6.getHasStack()) {
-			String var13 = ("" + StringTranslate.getInstance().translateNamedKey(var6.getStack().getItemName())).trim();
-			if(var13.length() > 0) {
-				var9 = var1 - var4 + 12;
-				var10 = var2 - var5 - 12;
-				int var11 = this.fontRenderer.getStringWidth(var13);
-				this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
-				this.fontRenderer.drawStringWithShadow(var13, var9, var10, -1);
-			}
+			tooltip = StringTranslate.getInstance().translateNamedKey(var6.getStack().getItemName()).trim();
+		}
+
+		if (tooltip.isEmpty() && this.recipes.size() > 0) {
+			for (int i = this.recipeIndex - rlist; i <= Math.min(this.recipeIndex + rlist, this.recipes.size() - 1); i++) {
+				int j = i - this.recipeIndex + rlist;
+				if (i >= 0 && var2 >= 109 + j * 24 && var2 < 125 + j * 24) {
+					if (var1 >= 7 && var1 < 23) {
+						tooltip = StringTranslate.getInstance().translateNamedKey(this.recipes.get(i).result.getItemName()).trim();
+						this.drawGradientRect(7 - var4, 109 + j * 24 - var5, 23 - var4, 125 + j * 24 - var5, -2130706433, -2130706433);
+						break;
+					}
+				}
+			}
+		}
+
+		if (tooltip.isEmpty() && ingredients != null && var2 >= 109 + rlist * 24 && var2 < 125 + rlist * 24) {
+			for (int i = 0; i < ingredients.length; i++) {
+				if (var1 >= 35 + 20 * i && var1 < 53 + 20 * i) {
+					tooltip = StringTranslate.getInstance().translateNamedKey(ingredients[i].getItemName()).trim();
+				}
+			}
+		}
+
+		this.drawGuiContainerForegroundLayer();
+
+		if(tooltip.length() > 0) {
+			var9 = var1 - var4 + 12;
+			var10 = var2 - var5 - 12;
+			int var11 = this.fontRenderer.getStringWidth(tooltip);
+			this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
+			this.fontRenderer.drawStringWithShadow(tooltip, var9, var10, -1);
 		}
 
 		GL11.glPopMatrix();
 		super.drawScreen(var1, var2, var3);
-		GL11.glEnable(GL11.GL_LIGHTING);
-		GL11.glEnable(GL11.GL_DEPTH_TEST);
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
@@ -88,6 +223,7 @@
 	private void drawSlotInventory(Slot var1) {
 		int var2 = var1.xDisplayPosition;
 		int var3 = var1.yDisplayPosition;
+		if (var2 < 0) var2 = this.width + var2 - this.offX;
 		ItemStack var4 = var1.getStack();
 		if(var4 == null) {
 			int var5 = var1.getBackgroundIconIndex();
@@ -116,32 +252,60 @@
 	}
 
 	private boolean getIsMouseOverSlot(Slot var1, int var2, int var3) {
-		int var4 = (this.width - this.xSize) / 2;
-		int var5 = (this.height - this.ySize) / 2;
+		int var4 = this.offX;
+		int var5 = this.offY;
 		var2 -= var4;
 		var3 -= var5;
-		return var2 >= var1.xDisplayPosition - 1 && var2 < var1.xDisplayPosition + 16 + 1 && var3 >= var1.yDisplayPosition - 1 && var3 < var1.yDisplayPosition + 16 + 1;
+		int xDisplayPosition = var1.xDisplayPosition;
+		int yDisplayPosition = var1.yDisplayPosition;
+		if (xDisplayPosition < 0) xDisplayPosition = this.width + xDisplayPosition - var4;
+		return var2 >= xDisplayPosition - 1 && var2 < xDisplayPosition + 16 + 1 && var3 >= yDisplayPosition - 1 && var3 < yDisplayPosition + 16 + 1;
 	}
 
 	protected void mouseClicked(int var1, int var2, int var3) {
 		super.mouseClicked(var1, var2, var3);
 		if(var3 == 0 || var3 == 1) {
+			if (this.recipes.size() > 0 && var1 >= 4 && var1 < 26 && var2 >= 109 && var2 < 125 + (rlist * 2 + 1) * 24) {
+				if (var2 >= 109 + rlist * 24 && var2 < 125 + rlist * 24) {
+					if (this.mc.playerController.craft(this.mc.thePlayer, this.recipes.get(this.recipeIndex))) {
+						this.mc.sndManager.playSoundFX("Grab", 1.0F, 1.0F);
+					}
+				}
+
+				for (int i = 0; i < rlist * 2 + 1; i++) {
+					if (var2 >= 109 + i * 24 && var2 < 125 + i * 24) {
+						int newRecipeIndex = this.recipeIndex + i - rlist;
+						if (newRecipeIndex >= 0 && newRecipeIndex < this.recipes.size()) {
+							this.recipeIndex = newRecipeIndex;
+							this.mc.sndManager.playSoundFX("Menu_Tick", 1.0F, 1.0F);
+						}
+						break;
+					}
+				}
+
+				return;
+			}
+
 			Slot var4 = this.getSlotAtPosition(var1, var2);
-			int var5 = (this.width - this.xSize) / 2;
-			int var6 = (this.height - this.ySize) / 2;
-			boolean var7 = var1 < var5 || var2 < var6 || var1 >= var5 + this.xSize || var2 >= var6 + this.ySize;
-			int var8 = -1;
+			int var8 = -999;
 			if(var4 != null) {
 				var8 = var4.slotNumber;
 			}
 
-			if(var7) {
-				var8 = -999;
+			if (var8 != -999 && (var4.getHasStack() || this.mc.thePlayer.inventory.getItemStack() != null)) {
+				this.mc.sndManager.playSoundFX("Grab", 1.0F, 1.0F);
 			}
 
-			if(var8 != -1) {
-				boolean var9 = var8 != -999 && (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT));
+			if (var8 != -999 || var3 == 1) {
+				boolean var9 = this.mc.thePlayer.craftingInventory != this.mc.thePlayer.inventorySlots
+						&& Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
 				this.mc.playerController.func_27174_a(this.inventorySlots.windowId, var8, var3, var9, this.mc.thePlayer);
+			} else if (!this.mc.gameSettings.autopause) {
+				ItemStack currentItem = this.mc.thePlayer.inventory.getCurrentItem();
+				this.mc.thePlayer.inventory.setInventorySlotContents(this.mc.thePlayer.inventory.currentItem, this.mc.thePlayer.inventory.getItemStack());
+				this.mc.clickMouse(1);
+				this.mc.thePlayer.inventory.setItemStack(this.mc.thePlayer.inventory.getCurrentItem());
+				this.mc.thePlayer.inventory.setInventorySlotContents(this.mc.thePlayer.inventory.currentItem, currentItem);
 			}
 		}
 
@@ -167,13 +331,44 @@
 	}
 
 	public boolean doesGuiPauseGame() {
-		return false;
+		return this.mc.gameSettings.autopause;
 	}
 
 	public void updateScreen() {
 		super.updateScreen();
+		this.updateRecipes();
 		if(!this.mc.thePlayer.isEntityAlive() || this.mc.thePlayer.isDead) {
 			this.mc.thePlayer.closeScreen();
+		}
+
+	}
+
+	public void handleMouseInput() {
+		super.handleMouseInput();
+		int wheel = Mouse.getEventDWheel();
+		if (wheel != 0 && this.recipes.size() > 0) {
+			if (wheel < 0 && this.recipeIndex < this.recipes.size() - 1) {
+				this.recipeIndex++;
+				this.mc.sndManager.playSoundFX("Menu_Tick", 1.0F, 1.0F);
+			}
+
+			if (wheel > 0 && this.recipeIndex > 0) {
+				this.recipeIndex--;
+				this.mc.sndManager.playSoundFX("Menu_Tick", 1.0F, 1.0F);
+			}
+
+			this.recipeResult = this.recipes.get(this.recipeIndex).result;
+		}
+	}
+
+	public boolean ingameFocus() {
+		return true;
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(var1.id == 0) {
+			this.mc.displayGuiScreen(null);
+			this.mc.displayInGameMenu();
 		}
 
 	}
--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -97,7 +97,7 @@
 				var19 /= var39;
 				double var40 = (double)this.worldObj.func_675_a(var31, var33.boundingBox);
 				double var41 = (1.0D - var13) * var40;
-				var33.attackEntityFrom(this.exploder, (int)((var41 * var41 + var41) / 2.0D * 8.0D * (double)this.explosionSize + 1.0D));
+				var33.attackEntityFrom(this.exploder, (int)(((var41 * var41 + var41) / 2.0D * 8.0D * (double)this.explosionSize + 1.0D) * 5.0D));
 				var33.motionX += var15 * var41;
 				var33.motionY += var17 * var41;
 				var33.motionZ += var19 * var41;
--- net/minecraft/src/BlockOreStorage.java
+++ net/minecraft/src/BlockOreStorage.java
@@ -2,7 +2,7 @@
 
 public class BlockOreStorage extends Block {
 	public BlockOreStorage(int var1, int var2) {
-		super(var1, Material.iron);
+		super(var1, Material.rock);
 		this.blockIndexInTexture = var2;
 	}
 
--- net/minecraft/src/BiomeGenTaiga.java
+++ net/minecraft/src/BiomeGenTaiga.java
@@ -4,6 +4,9 @@
 
 public class BiomeGenTaiga extends BiomeGenBase {
 	public BiomeGenTaiga() {
+		this.topBlock = (byte)Block.blockSnow.blockID;
+		this.fillerBlock = (byte)Block.blockSnow.blockID;
+		this.groundBlock = (byte)Block.blockSnow.blockID;
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 2));
 	}
 
--- net/minecraft/src/BlockNetherrack.java
+++ net/minecraft/src/BlockNetherrack.java
@@ -2,6 +2,6 @@
 
 public class BlockNetherrack extends Block {
 	public BlockNetherrack(int var1, int var2) {
-		super(var1, var2, Material.rock);
+		super(var1, var2, Material.ground);
 	}
 }
--- net/minecraft/src/StatList.java
+++ net/minecraft/src/StatList.java
@@ -154,6 +154,7 @@
 		replaceSimilarBlocks(var0, Block.stairDouble.blockID, Block.stairSingle.blockID);
 		replaceSimilarBlocks(var0, Block.grass.blockID, Block.dirt.blockID);
 		replaceSimilarBlocks(var0, Block.tilledField.blockID, Block.dirt.blockID);
+		replaceSimilarBlocks(var0, Block.jungleGrass.blockID, Block.mud.blockID);
 	}
 
 	private static void replaceSimilarBlocks(StatBase[] var0, int var1, int var2) {
--- /dev/null
+++ net/minecraft/src/PlayerSaveManager.java
@@ -1,0 +1,75 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PlayerSaveManager {
+	protected final File playerDirectory;
+
+	public PlayerSaveManager(File var1) {
+		if (!var1.exists()) {
+			var1.mkdirs();
+		}
+
+		this.playerDirectory = var1;
+	}
+
+	public List<PlayerInfo> getPlayerList() {
+		List<PlayerInfo> list = new ArrayList<>();
+		for (File file : this.playerDirectory.listFiles()) {
+			if (file.isFile() && file.getName().endsWith(".dat")) {
+				PlayerInfo info = this.loadPlayer(file.getName().replace(".dat", ""));
+				if (info != null) {
+					list.add(info);
+				}
+			}
+		}
+		return list;
+	}
+
+	public PlayerInfo loadPlayer(String name) {
+		File player = new File(this.playerDirectory, name + ".dat");
+		if (!player.exists()) {
+			return null;
+		}
+
+		try {
+			NBTTagCompound data = CompressedStreamTools.func_1138_a(new FileInputStream(player));
+			return new PlayerInfo(data);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		return null;
+	}
+
+	public PlayerInfo loadOrCreatePlayer(String name, String saveFile, String skin) {
+		PlayerInfo info = this.loadPlayer(saveFile);
+		if (info != null) {
+			return info;
+		}
+
+		return new PlayerInfo(name, saveFile, skin);
+	}
+
+	public void savePlayer(PlayerInfo info) {
+		File file = new File(this.playerDirectory, info.getSaveFile() + ".dat");
+		try {
+			NBTTagCompound nbt = new NBTTagCompound();
+			info.writeToNBT(nbt);
+			CompressedStreamTools.writeGzippedCompoundToOutputStream(nbt, new FileOutputStream(file));
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	public void deletePlayer(String name) {
+		File file = new File(this.playerDirectory, name + ".dat");
+		if (file.exists()) {
+			file.delete();
+		}
+	}
+}
--- net/minecraft/src/ItemSoup.java
+++ net/minecraft/src/ItemSoup.java
@@ -7,6 +7,8 @@
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		super.onItemRightClick(var1, var2, var3);
-		return new ItemStack(Item.bowlEmpty);
+		--var1.stackSize;
+		var3.inventory.addItemStackToInventory(new ItemStack(Item.bowlEmpty, 1));
+		return var1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenSand.java
@@ -1,0 +1,57 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenSand extends WorldGenerator {
+	private int numberOfBlocks;
+
+	public WorldGenSand(int var2) {
+		this.numberOfBlocks = var2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		float var6 = var2.nextFloat() * (float)Math.PI;
+		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var15 = (double)(var4 + var2.nextInt(3) + 2);
+		double var17 = (double)(var4 + var2.nextInt(3) + 2);
+
+		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
+			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
+			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
+			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
+			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			int var32 = MathHelper.floor_double(var20 - var28 / 2.0D);
+			int var33 = MathHelper.floor_double(var22 - var30 / 2.0D);
+			int var34 = MathHelper.floor_double(var24 - var28 / 2.0D);
+			int var35 = MathHelper.floor_double(var20 + var28 / 2.0D);
+			int var36 = MathHelper.floor_double(var22 + var30 / 2.0D);
+			int var37 = MathHelper.floor_double(var24 + var28 / 2.0D);
+
+			for(int var38 = var32; var38 <= var35; ++var38) {
+				double var39 = ((double)var38 + 0.5D - var20) / (var28 / 2.0D);
+				if(var39 * var39 < 1.0D) {
+					for(int var41 = var33; var41 <= var36; ++var41) {
+						double var42 = ((double)var41 + 0.5D - var22) / (var30 / 2.0D);
+						if(var39 * var39 + var42 * var42 < 1.0D) {
+							for(int var44 = var34; var44 <= var37; ++var44) {
+								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D
+										&& var1.getBlockId(var38, var41, var44) == Block.sandStone.blockID
+										&& !var1.isAirBlock(var38, var41 - 1, var44)) {
+									var1.setBlock(var38, var41, var44, Block.sand.blockID);
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/RenderLiving.java
+++ net/minecraft/src/RenderLiving.java
@@ -163,10 +163,13 @@
 	}
 
 	protected void passSpecialRender(EntityLiving var1, double var2, double var4, double var6) {
+		if (this.renderManager.livingPlayer == null) return;
+
 		if(Minecraft.isDebugInfoEnabled()) {
 			this.renderLivingLabel(var1, Integer.toString(var1.entityId), var2, var4, var6, 64);
+		} else {
+			this.renderLivingLabel(var1, var1.getEntityString() + ": " + Math.max(var1.health, 0) + " / " + var1.getMaxHealth(), var2, var4, var6, 10);
 		}
-
 	}
 
 	protected void renderLivingLabel(EntityLiving var1, String var2, double var3, double var5, double var7, int var9) {
--- net/minecraft/src/WorldGenTaiga2.java
+++ net/minecraft/src/WorldGenTaiga2.java
@@ -40,8 +40,7 @@
 				return false;
 			} else {
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+				if(var11 == Block.blockSnow.blockID && var4 < 128 - var6 - 1) {
 					var21 = var2.nextInt(2);
 					var13 = 1;
 					byte var22 = 0;
--- net/minecraft/src/EntityDiggingFX.java
+++ net/minecraft/src/EntityDiggingFX.java
@@ -15,7 +15,7 @@
 	}
 
 	public EntityDiggingFX func_4041_a(int var1, int var2, int var3) {
-		if(this.field_4082_a == Block.grass) {
+		if(this.field_4082_a == Block.grass || this.field_4082_a == Block.jungleGrass) {
 			return this;
 		} else {
 			int var4 = this.field_4082_a.colorMultiplier(this.worldObj, var1, var2, var3);
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -10,6 +10,8 @@
 	private float prevBlockDamage = 0.0F;
 	private float field_1069_h = 0.0F;
 	private int blockHitWait = 0;
+	private String dayTheme = "02_OverworldDay";
+	private String undergroundTheme = "12_Underground";
 
 	public PlayerControllerSP(Minecraft var1) {
 		super(var1);
@@ -55,7 +57,6 @@
 
 	public void resetBlockRemoving() {
 		this.curBlockDamage = 0.0F;
-		this.blockHitWait = 0;
 	}
 
 	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
@@ -69,9 +70,20 @@
 				}
 
 				Block var6 = Block.blocksList[var5];
-				this.curBlockDamage += var6.blockStrength(this.mc.thePlayer);
-				if(this.field_1069_h % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.func_1145_d(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
+				if (this.mc.thePlayer.getCurrentPlayerStrVsBlock(var6) == 0.0F) {
+					return;
+				}
+
+				float strength = var6.blockStrength(this.mc.thePlayer);
+				if (var5 == Block.wood.blockID && (this.mc.theWorld.getBlockMetadata(var1, var2, var3) & 8) != 0) {
+					strength *= 5.0F;
+				}
+
+				this.curBlockDamage += strength;
+				if(this.field_1069_h % (var6.stepSound.isTerraSound() ? this.mc.thePlayer.swingMax : 4.0F) == 0.0F && var6 != null) {
+					this.mc.sndManager.playSound(var6.stepSound.breakSoundDir(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F,
+							var6.stepSound.isTerraSound() ? var6.stepSound.getVolume() : (var6.stepSound.getVolume() + 1.0F) / 8.0F,
+							(var6.stepSound.isTerraSound() ? 1.0F : var6.stepSound.getPitch() * 0.5F));
 				}
 
 				++this.field_1069_h;
@@ -80,7 +92,7 @@
 					this.curBlockDamage = 0.0F;
 					this.prevBlockDamage = 0.0F;
 					this.field_1069_h = 0.0F;
-					this.blockHitWait = 5;
+					this.blockHitWait = this.mc.thePlayer.swingMax / 2;
 				}
 			} else {
 				this.curBlockDamage = 0.0F;
@@ -106,16 +118,103 @@
 
 	}
 
-	public float getBlockReachDistance() {
-		return 4.0F;
-	}
-
 	public void func_717_a(World var1) {
 		super.func_717_a(var1);
 	}
 
 	public void updateController() {
 		this.prevBlockDamage = this.curBlockDamage;
-		this.mc.sndManager.playRandomMusicIfReady();
+
+		BiomeGenBase biome = this.mc.theWorld.getWorldChunkManager().getBiomeGenAt(
+				MathHelper.floor_double(this.mc.thePlayer.posX), MathHelper.floor_double(this.mc.thePlayer.posZ));
+		if (this.mc.gameSettings.titleMusicType == 3) {
+			if (this.mc.thePlayer.dimension == -1) {
+				this.mc.sndManager.playTMusic("71_Unknown");
+			} else if (this.mc.thePlayer.posY < 56.0D) {
+				if (biome.getEnableSnow()) {
+					this.mc.sndManager.playTMusic("77_Unknown");
+				} else if (biome == BiomeGenBase.desert) {
+					this.mc.sndManager.playTMusic("66_Unknown");
+				} else if (biome == BiomeGenBase.rainforest || biome == BiomeGenBase.seasonalForest) {
+					this.mc.sndManager.playTMusic("86_Unknown");
+				} else {
+					this.mc.sndManager.playTMusic("65_Unknown");
+				}
+			} else {
+				if (biome.getEnableSnow()) {
+					this.mc.sndManager.playTMusic("72_Unknown");
+				} else if (biome == BiomeGenBase.desert) {
+					this.mc.sndManager.playTMusic("66_Unknown");
+				} else if (biome == BiomeGenBase.rainforest) {
+					this.mc.sndManager.playTMusic("86_Unknown");
+				} else if (this.mc.theWorld.isDaytime()) {
+					if (this.mc.theWorld.func_27161_C()) {
+						this.mc.sndManager.playTMusic("62_Unknown");
+					} else {
+						this.mc.sndManager.playTMusic("63_Unknown");
+					}
+				} else {
+					this.mc.sndManager.playTMusic("64_Unknown");
+				}
+			}
+		} else {
+			if (this.mc.thePlayer.dimension == -1) {
+				this.mc.sndManager.playTMusic("36_Underworld");
+			} else if (this.mc.thePlayer.posY < 56.0D) {
+				if (biome.getEnableSnow()) {
+					this.mc.sndManager.playTMusic("20_UndergroundSnow");
+				} else if (biome == BiomeGenBase.desert) {
+					this.mc.sndManager.playTMusic("61_Unknown");
+				} else if (biome == BiomeGenBase.rainforest || biome == BiomeGenBase.seasonalForest) {
+					this.mc.sndManager.playTMusic("54_Unknown");
+				} else {
+					if (!this.mc.sndManager.isTMusicPlaying("12_Underground")
+							&& !this.mc.sndManager.isTMusicPlaying("31_AlternateUnderground")) {
+						this.undergroundTheme = this.mc.thePlayer.rand.nextBoolean()
+								? "12_Underground" : "31_AlternateUnderground";
+					}
+					this.mc.sndManager.playTMusic(this.undergroundTheme);
+				}
+			} else {
+				if (biome.getEnableSnow()) {
+					if (!this.mc.theWorld.isDaytime() && this.mc.sndManager.hasTMusic("Custom_SnowNight")) {
+						this.mc.sndManager.playTMusic("Custom_SnowNight");
+					} else {
+						this.mc.sndManager.playTMusic("14_Snow");
+					}
+				} else if (biome == BiomeGenBase.desert) {
+					if (!this.mc.theWorld.isDaytime() && this.mc.sndManager.hasTMusic("Custom_DesertNight")) {
+						this.mc.sndManager.playTMusic("Custom_DesertNight");
+					} else {
+						this.mc.sndManager.playTMusic("21_Desert");
+					}
+				} else if (biome == BiomeGenBase.rainforest) {
+					if (this.mc.theWorld.isDaytime()) {
+						this.mc.sndManager.playTMusic("06_Jungle");
+					} else {
+						this.mc.sndManager.playTMusic("55_Unknown");
+					}
+				} else if (this.mc.theWorld.func_27161_C()) {
+					if (this.mc.theWorld.func_27160_B()) {
+						this.mc.sndManager.playTMusic("52_Unknown");
+					} else if (this.mc.theWorld.getWorldTime() % 24000L < 3600L) {
+						this.mc.sndManager.playTMusic("59_Unknown");
+					} else {
+						this.mc.sndManager.playTMusic("19_Rain");
+					}
+				} else if (this.mc.theWorld.isDaytime()) {
+					if (!this.mc.sndManager.isTMusicPlaying("03_OverworldDay")
+							&& !this.mc.sndManager.isTMusicPlaying("18_AlternateDay")) {
+						this.dayTheme = this.mc.thePlayer.rand.nextBoolean()
+								? "03_OverworldDay" : "18_AlternateDay";
+					}
+					this.mc.sndManager.playTMusic(this.dayTheme);
+				} else {
+					this.mc.sndManager.playTMusic("01_OverworldNight");
+				}
+			}
+		}
+
+		this.mc.sndManager.playTRain(this.mc.theWorld.func_27161_C() && biome.canSpawnLightningBolt());
 	}
 }
--- /dev/null
+++ net/minecraft/src/StepSoundShatter.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class StepSoundShatter extends StepSound {
+	public StepSoundShatter(String var1, float var2, float var3) {
+		super(var1, var2, var3);
+	}
+
+	public String stepSoundDir() {
+		return "Shatter";
+	}
+
+	public String breakSoundDir() {
+		return "Shatter";
+	}
+
+	public boolean isTerraSound() {
+		return true;
+	}
+}
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -90,14 +90,6 @@
 		return this.modelBlock.getRenderBlockPass();
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
-	}
-
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
 		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, var2);
 	}
@@ -141,10 +133,6 @@
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
 	}
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
--- net/minecraft/src/RecipesArmor.java
+++ net/minecraft/src/RecipesArmor.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class RecipesArmor {
-	private String[][] recipePatterns = new String[][]{{"XXX", "X X"}, {"X X", "XXX", "XXX"}, {"XXX", "X X", "X X"}, {"X X", "X X"}};
-	private Object[][] recipeItems = new Object[][]{{Item.leather, Block.fire, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.helmetLeather, Item.helmetChain, Item.helmetSteel, Item.helmetDiamond, Item.helmetGold}, {Item.plateLeather, Item.plateChain, Item.plateSteel, Item.plateDiamond, Item.plateGold}, {Item.legsLeather, Item.legsChain, Item.legsSteel, Item.legsDiamond, Item.legsGold}, {Item.bootsLeather, Item.bootsChain, Item.bootsSteel, Item.bootsDiamond, Item.bootsGold}};
+	private int[] recipeQuantities = new int[]{15, 25, 20, 15};
+	private Object[][] recipeItems = new Object[][]{{Item.itemsList[Block.planks.blockID], Item.ingotCopper, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.helmetLeather, Item.helmetChain, Item.helmetSteel, Item.helmetDiamond, Item.helmetGold}, {Item.plateLeather, Item.plateChain, Item.plateSteel, Item.plateDiamond, Item.plateGold}, {Item.legsLeather, Item.legsChain, Item.legsSteel, Item.legsDiamond, Item.legsGold}, {Item.bootsLeather, Item.bootsChain, Item.bootsSteel, Item.bootsDiamond, Item.bootsGold}};
 
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
@@ -10,7 +10,9 @@
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('X'), var3});
+				if (var5 != null) {
+					var1.addShapelessRecipe(new ItemStack(var5), new ItemStack((Item)var3, recipeQuantities[var4])).requireBlock(Block.workbench);
+				}
 			}
 		}
 
--- net/minecraft/src/ItemEgg.java
+++ net/minecraft/src/ItemEgg.java
@@ -3,12 +3,12 @@
 public class ItemEgg extends Item {
 	public ItemEgg(int var1) {
 		super(var1);
-		this.maxStackSize = 16;
+		this.maxStackSize = 99;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
+		var2.playSoundAtEntity(var3, "Item_5", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
 		if(!var2.multiplayerWorld) {
 			var2.entityJoinedWorld(new EntityEgg(var2, var3));
 		}
--- net/minecraft/src/ContainerPlayer.java
+++ net/minecraft/src/ContainerPlayer.java
@@ -14,28 +14,22 @@
 		this.craftResult = new InventoryCraftResult();
 		this.isSinglePlayer = false;
 		this.isSinglePlayer = var2;
-		this.addSlot(new SlotCrafting(var1.player, this.craftMatrix, this.craftResult, 0, 144, 36));
 
 		int var3;
 		int var4;
-		for(var3 = 0; var3 < 2; ++var3) {
-			for(var4 = 0; var4 < 2; ++var4) {
-				this.addSlot(new Slot(this.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 26 + var3 * 18));
-			}
-		}
 
 		for(var3 = 0; var3 < 4; ++var3) {
-			this.addSlot(new SlotArmor(this, var1, var1.getSizeInventory() - 1 - var3, 8, 8 + var3 * 18, var3));
+			this.addSlot(new SlotArmor(this, var1, var1.getSizeInventory() - 1 - var3, -29, 3 + var3 * 20, var3));
 		}
 
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(var4 = 0; var4 < 9; ++var4) {
-				this.addSlot(new Slot(var1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
+				this.addSlot(new Slot(var1, var4 + (var3 + 1) * 9, var4 * 20 + 3, var3 * 20 + 3));
 			}
 		}
 
 		for(var3 = 0; var3 < 9; ++var3) {
-			this.addSlot(new Slot(var1, var3, 8 + var3 * 18, 142));
+			this.addSlot(new Slot(var1, var3, var3 * 20 + 3, -21));
 		}
 
 		this.onCraftMatrixChanged(this.craftMatrix);
--- net/minecraft/src/EntityLightningBolt.java
+++ net/minecraft/src/EntityLightningBolt.java
@@ -36,7 +36,7 @@
 	public void onUpdate() {
 		super.onUpdate();
 		if(this.field_27028_b == 2) {
-			this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "ambient.weather.thunder", 10000.0F, 0.8F + this.rand.nextFloat() * 0.2F);
+			this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "Thunder_", 10000.0F, 0.8F + this.rand.nextFloat() * 0.2F);
 			this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "random.explode", 2.0F, 0.5F + this.rand.nextFloat() * 0.2F);
 		}
 
--- net/minecraft/src/GuiButton.java
+++ net/minecraft/src/GuiButton.java
@@ -12,6 +12,7 @@
 	public int id;
 	public boolean enabled;
 	public boolean enabled2;
+	public boolean enabled3;
 
 	public GuiButton(int var1, int var2, int var3, String var4) {
 		this(var1, var2, var3, 200, 20, var4);
@@ -22,6 +23,7 @@
 		this.height = 20;
 		this.enabled = true;
 		this.enabled2 = true;
+		this.enabled3 = true;
 		this.id = var1;
 		this.xPosition = var2;
 		this.yPosition = var3;
@@ -30,6 +32,11 @@
 		this.displayString = var6;
 	}
 
+	public GuiButton asTransparent() {
+		this.enabled3 = false;
+		return this;
+	}
+
 	protected int getHoverState(boolean var1) {
 		byte var2 = 1;
 		if(!this.enabled) {
@@ -48,15 +55,17 @@
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			boolean var5 = var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
 			int var6 = this.getHoverState(var5);
-			this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 46 + var6 * 20, this.width / 2, this.height);
-			this.drawTexturedModalRect(this.xPosition + this.width / 2, this.yPosition, 200 - this.width / 2, 46 + var6 * 20, this.width / 2, this.height);
+			if(this.enabled3) {
+				this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 46 + var6 * 20, this.width / 2, this.height);
+				this.drawTexturedModalRect(this.xPosition + this.width / 2, this.yPosition, 200 - this.width / 2, 46 + var6 * 20, this.width / 2, this.height);
+			}
 			this.mouseDragged(var1, var2, var3);
 			if(!this.enabled) {
 				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, -6250336);
 			} else if(var5) {
 				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 16777120);
 			} else {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 14737632);
+				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, this.enabled3 ? 14737632 : 16777215);
 			}
 
 		}
--- net/minecraft/src/EntityGiantZombie.java
+++ net/minecraft/src/EntityGiantZombie.java
@@ -6,12 +6,15 @@
 		this.texture = "/mob/zombie.png";
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 50;
-		this.health *= 10;
 		this.yOffset *= 6.0F;
 		this.setSize(this.width * 6.0F, this.height * 6.0F);
 	}
 
 	protected float getBlockPathWeight(int var1, int var2, int var3) {
 		return this.worldObj.getLightBrightness(var1, var2, var3) - 0.5F;
+	}
+
+	public int getMaxHealth() {
+		return 1000;
 	}
 }
--- /dev/null
+++ net/minecraft/src/StepSoundTink.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class StepSoundTink extends StepSound {
+	public StepSoundTink(String var1, float var2, float var3) {
+		super(var1, var2, var3);
+	}
+
+	public String stepSoundDir() {
+		return "Tink_";
+	}
+
+	public String breakSoundDir() {
+		return "Tink_";
+	}
+
+	public boolean isTerraSound() {
+		return true;
+	}
+}
--- net/minecraft/src/RenderEngine.java
+++ net/minecraft/src/RenderEngine.java
@@ -22,7 +22,7 @@
 	private HashMap field_28151_c = new HashMap();
 	private HashMap textureNameToImageMap = new HashMap();
 	private IntBuffer singleIntBuffer = GLAllocation.createDirectIntBuffer(1);
-	private ByteBuffer imageData = GLAllocation.createDirectByteBuffer(1048576);
+	private ByteBuffer imageData = GLAllocation.createDirectByteBuffer(8294400);
 	private List textureList = new ArrayList();
 	private Map urlToImageDataMap = new HashMap();
 	private GameSettings options;
--- net/minecraft/src/EnumToolMaterial.java
+++ net/minecraft/src/EnumToolMaterial.java
@@ -1,27 +1,43 @@
 package net.minecraft.src;
 
 public enum EnumToolMaterial {
-	WOOD(0, 59, 2.0F, 0),
-	STONE(1, 131, 4.0F, 1),
-	IRON(2, 250, 6.0F, 2),
-	EMERALD(3, 1561, 8.0F, 3),
-	GOLD(0, 32, 12.0F, 0);
-
-	private final int harvestLevel;
-	private final int maxUses;
-	private final float efficiencyOnProperMaterial;
-	private final int damageVsEntity;
-
-	private EnumToolMaterial(int var3, int var4, float var5, int var6) {
-		this.harvestLevel = var3;
-		this.maxUses = var4;
-		this.efficiencyOnProperMaterial = var5;
-		this.damageVsEntity = var6;
-	}
-
-	public int getMaxUses() {
-		return this.maxUses;
-	}
+	WOOD,
+	STONE,
+	IRON,
+	EMERALD,
+	GOLD;
+
+	static {
+		WOOD.setHarvestLevel(0).setEfficiencyOnProperMaterial(2.0F)
+				.setDamageVsEntity(7).setSpeedVsEntity(6)
+				.setShortDamageVsEntity(5).setShortSpeedVsEntity(5)
+				.setRenderIndex(0).setDefenseValues(1, 1, 1, 0);
+		STONE.setHarvestLevel(1).setEfficiencyOnProperMaterial(2.0F)
+				.setDamageVsEntity(9).setSpeedVsEntity(7)
+				.setShortDamageVsEntity(5).setShortSpeedVsEntity(4)
+				.setRenderIndex(1).setDefenseValues(1, 2, 2, 1);
+		IRON.setHarvestLevel(1).setEfficiencyOnProperMaterial(4.0F)
+				.setDamageVsEntity(12).setSpeedVsEntity(7)
+				.setShortDamageVsEntity(8).setShortSpeedVsEntity(4)
+				.setRenderIndex(2).setDefenseValues(2, 3, 2, 2);
+		GOLD.setHarvestLevel(1).setEfficiencyOnProperMaterial(6.0F)
+				.setDamageVsEntity(14).setSpeedVsEntity(7)
+				.setShortDamageVsEntity(9).setShortSpeedVsEntity(4)
+				.setRenderIndex(4).setDefenseValues(3, 4, 3, 3);
+		EMERALD.setHarvestLevel(2).setEfficiencyOnProperMaterial(8.0F)
+				.setDamageVsEntity(15).setSpeedVsEntity(6)
+				.setShortDamageVsEntity(12).setShortSpeedVsEntity(4)
+				.setRenderIndex(3).setDefenseValues(4, 5, 4, 3);
+	}
+
+	private int harvestLevel;
+	private float efficiencyOnProperMaterial;
+	private int damageVsEntity;
+	private int speedVsEntity;
+	private int shortDamageVsEntity;
+	private int shortSpeedVsEntity;
+	private int renderIndex;
+	private int[] defenseValues;
 
 	public float getEfficiencyOnProperMaterial() {
 		return this.efficiencyOnProperMaterial;
@@ -31,7 +47,67 @@
 		return this.damageVsEntity;
 	}
 
+	public int getSpeedVsEntity() {
+		return speedVsEntity;
+	}
+
+	public int getShortDamageVsEntity() {
+		return this.shortDamageVsEntity;
+	}
+
+	public int getShortSpeedVsEntity() {
+		return this.shortSpeedVsEntity;
+	}
+
 	public int getHarvestLevel() {
 		return this.harvestLevel;
+	}
+
+	public int getRenderIndex() {
+		return this.renderIndex;
+	}
+
+	public int getDefenseValue(int var1) {
+		return this.defenseValues[var1];
+	}
+
+	private EnumToolMaterial setHarvestLevel(int harvestLevel) {
+		this.harvestLevel = harvestLevel;
+		return this;
+	}
+
+	private EnumToolMaterial setEfficiencyOnProperMaterial(float efficiencyOnProperMaterial) {
+		this.efficiencyOnProperMaterial = efficiencyOnProperMaterial;
+		return this;
+	}
+
+	private EnumToolMaterial setDamageVsEntity(int damageVsEntity) {
+		this.damageVsEntity = damageVsEntity;
+		return this;
+	}
+
+	private EnumToolMaterial setSpeedVsEntity(int speedVsEntity) {
+		this.speedVsEntity = speedVsEntity;
+		return this;
+	}
+
+	private EnumToolMaterial setShortDamageVsEntity(int shortDamageVsEntity) {
+		this.shortDamageVsEntity = shortDamageVsEntity;
+		return this;
+	}
+
+	private EnumToolMaterial setShortSpeedVsEntity(int shortSpeedVsEntity) {
+		this.shortSpeedVsEntity = shortSpeedVsEntity;
+		return this;
+	}
+
+	private EnumToolMaterial setRenderIndex(int renderIndex) {
+		this.renderIndex = renderIndex;
+		return this;
+	}
+
+	private EnumToolMaterial setDefenseValues(int... defenseValues) {
+		this.defenseValues = defenseValues;
+		return this;
 	}
 }
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -7,92 +7,14 @@
 import java.awt.Dimension;
 import java.awt.Frame;
 import java.awt.Graphics;
+import java.io.BufferedReader;
 import java.io.File;
-import net.minecraft.src.AchievementList;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.ChunkCoordinates;
-import net.minecraft.src.ChunkProviderLoadOrGenerate;
-import net.minecraft.src.ColorizerFoliage;
-import net.minecraft.src.ColorizerGrass;
-import net.minecraft.src.ColorizerWater;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumMovingObjectType;
-import net.minecraft.src.EnumOS2;
-import net.minecraft.src.EnumOSMappingHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiAchievement;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiSleepMP;
-import net.minecraft.src.GuiUnused;
-import net.minecraft.src.IChunkProvider;
-import net.minecraft.src.ISaveFormat;
-import net.minecraft.src.ISaveHandler;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerControllerTest;
-import net.minecraft.src.RenderBlocks;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.SaveConverterMcRegion;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.StatFileWriter;
-import net.minecraft.src.StatList;
-import net.minecraft.src.StatStringFormatKeyInv;
-import net.minecraft.src.Teleporter;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.TexturePortalFX;
-import net.minecraft.src.TextureWatchFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.ThreadCheckHasPaid;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadSleepForever;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldProvider;
-import net.minecraft.src.WorldRenderer;
+import java.io.InputStreamReader;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.Random;
+
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -111,7 +33,7 @@
 	public int displayWidth;
 	public int displayHeight;
 	private OpenGlCapsChecker glCapabilities;
-	private Timer timer = new Timer(20.0F);
+	public Timer timer = new Timer(20.0F);
 	public World theWorld;
 	public RenderGlobal renderGlobal;
 	public EntityPlayerSP thePlayer;
@@ -144,6 +66,8 @@
 	public TexturePackList texturePackList;
 	private File mcDataDir;
 	private ISaveFormat saveLoader;
+	private PlayerSaveManager playerSaveManager;
+	public String selectedPlayer = "default";
 	public static long[] frameTimes = new long[512];
 	public static long[] tickTimes = new long[512];
 	public static int numRecordedFrameTimes = 0;
@@ -181,6 +105,10 @@
 		theMinecraft = this;
 	}
 
+	public static Minecraft getInstance() {
+		return theMinecraft;
+	}
+
 	public void onMinecraftCrash(UnexpectedThrowable var1) {
 		this.hasCrashed = true;
 		this.displayUnexpectedThrowable(var1);
@@ -218,7 +146,25 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Beta 1.7.3");
+		try {
+			ArrayList var1 = new ArrayList();
+			BufferedReader var2 = new BufferedReader(new InputStreamReader(Minecraft.class.getResourceAsStream("/title/splashes.txt"), Charset.forName("UTF-8")));
+			String var3 = "";
+
+			while(true) {
+				var3 = var2.readLine();
+				if(var3 == null) {
+					this.setTitle("Minecraft: " + var1.get(new Random().nextInt(var1.size())));
+					break;
+				}
+
+				var3 = var3.trim();
+				if(var3.length() > 0) {
+					var1.add(var3);
+				}
+			}
+		} catch (Exception var4) {
+		}
 
 		try {
 			Display.create();
@@ -235,6 +181,7 @@
 
 		this.mcDataDir = getMinecraftDir();
 		this.saveLoader = new SaveConverterMcRegion(new File(this.mcDataDir, "saves"));
+		this.playerSaveManager = new PlayerSaveManager(new File(this.mcDataDir, "tplayers"));
 		this.gameSettings = new GameSettings(this, this.mcDataDir);
 		this.texturePackList = new TexturePackList(this, this.mcDataDir);
 		this.renderEngine = new RenderEngine(this.texturePackList, this.gameSettings);
@@ -246,7 +193,6 @@
 		RenderManager.instance.itemRenderer = new ItemRenderer(this);
 		this.statFileWriter = new StatFileWriter(this.session, this.mcDataDir);
 		AchievementList.openInventory.setStatStringFormatter(new StatStringFormatKeyInv(this));
-		this.loadScreen();
 		Keyboard.create();
 		Mouse.create();
 		this.mouseHelper = new MouseHelper(this.mcCanvas);
@@ -296,7 +242,7 @@
 		if(this.serverName != null) {
 			this.displayGuiScreen(new GuiConnecting(this, this.serverName, this.serverPort));
 		} else {
-			this.displayGuiScreen(new GuiMainMenu());
+			this.displayGuiScreen(new GuiSplash());
 		}
 
 	}
@@ -395,8 +341,20 @@
 		return this.saveLoader;
 	}
 
+	public PlayerSaveManager getPlayerSaveManager() {
+		return this.playerSaveManager;
+	}
+
 	public void displayGuiScreen(GuiScreen var1) {
 		if(!(this.currentScreen instanceof GuiUnused)) {
+			if(this.theWorld != null) {
+				if(var1 == null && this.currentScreen != null) {
+					this.sndManager.playSoundFX("Menu_Close", 1.0F, 1.0F);
+				} else if (var1 != null && this.currentScreen == null) {
+					this.sndManager.playSoundFX("Menu_Open", 1.0F, 1.0F);
+				}
+			}
+
 			if(this.currentScreen != null) {
 				this.currentScreen.onGuiClosed();
 			}
@@ -545,10 +503,6 @@
 						Display.update();
 					}
 
-					if(this.thePlayer != null && this.thePlayer.isEntityInsideOpaqueBlock()) {
-						this.gameSettings.thirdPersonView = false;
-					}
-
 					if(!this.skipRenderWorld) {
 						if(this.playerController != null) {
 							this.playerController.setPartialTime(this.timer.renderPartialTicks);
@@ -749,7 +703,7 @@
 
 	public void setIngameNotInFocus() {
 		if(this.inGameHasFocus) {
-			if(this.thePlayer != null) {
+			if(this.thePlayer != null && !this.currentScreen.ingameFocus()) {
 				this.thePlayer.resetPlayerKeyState();
 			}
 
@@ -759,12 +713,12 @@
 	}
 
 	public void displayInGameMenu() {
-		if(this.currentScreen == null) {
+		if(this.currentScreen == null || (this.currentScreen.ingameFocus() && Mouse.isGrabbed())) {
 			this.displayGuiScreen(new GuiIngameMenu());
 		}
 	}
 
-	private void func_6254_a(int var1, boolean var2) {
+	void func_6254_a(int var1, boolean var2) {
 		if(!this.playerController.field_1064_b) {
 			if(!var2) {
 				this.leftClickCounter = 0;
@@ -776,7 +730,9 @@
 					int var4 = this.objectMouseOver.blockY;
 					int var5 = this.objectMouseOver.blockZ;
 					this.playerController.sendBlockRemoving(var3, var4, var5, this.objectMouseOver.sideHit);
-					this.effectRenderer.addBlockHitEffects(var3, var4, var5, this.objectMouseOver.sideHit);
+					if (this.thePlayer.getCurrentPlayerStrVsBlock(Block.blocksList[this.theWorld.getBlockId(var3, var4, var5)]) > 0.0F) {
+						this.effectRenderer.addBlockHitEffects(var3, var4, var5, this.objectMouseOver.sideHit);
+					}
 				} else {
 					this.playerController.resetBlockRemoving();
 				}
@@ -785,18 +741,18 @@
 		}
 	}
 
-	private void clickMouse(int var1) {
+	public void clickMouse(int var1) {
+		boolean swing = var1 == 0 && !this.thePlayer.isSwinging;
+
 		if(var1 != 0 || this.leftClickCounter <= 0) {
-			if(var1 == 0) {
-				this.thePlayer.swingItem();
-			}
-
 			boolean var2 = true;
 			if(this.objectMouseOver == null) {
-				if(var1 == 0 && !(this.playerController instanceof PlayerControllerTest)) {
-					this.leftClickCounter = 10;
-				}
+				if (swing) this.thePlayer.swingItem();
 			} else if(this.objectMouseOver.typeOfHit == EnumMovingObjectType.ENTITY) {
+				if (swing) this.thePlayer.swingItem();
+				else if (var1 == 1) this.thePlayer.swingItemSilent();
+				else return;
+
 				if(var1 == 0) {
 					this.playerController.attackEntity(this.thePlayer, this.objectMouseOver.entityHit);
 				}
@@ -809,14 +765,17 @@
 				int var4 = this.objectMouseOver.blockY;
 				int var5 = this.objectMouseOver.blockZ;
 				int var6 = this.objectMouseOver.sideHit;
-				if(var1 == 0) {
+				if(var1 == 0 && this.thePlayer.getCurrentPlayerStrVsBlock(Block.blocksList[this.theWorld.getBlockId(var3, var4, var5)]) > 0.0F) {
+					if (swing) {
+						this.thePlayer.swingItem();
+					}
 					this.playerController.clickBlock(var3, var4, var5, this.objectMouseOver.sideHit);
-				} else {
+				} else if (this.currentScreen != null || var1 == 1 || (float)(this.ticksRan - this.mouseTicksRan) >= this.timer.ticksPerSecond / 4.0F) {
 					ItemStack var7 = this.thePlayer.inventory.getCurrentItem();
 					int var8 = var7 != null ? var7.stackSize : 0;
 					if(this.playerController.sendPlaceBlock(this.thePlayer, this.theWorld, var7, var3, var4, var5, var6)) {
 						var2 = false;
-						this.thePlayer.swingItem();
+						this.thePlayer.swingItemSilent();
 					}
 
 					if(var7 == null) {
@@ -912,6 +871,10 @@
 				var1 = Block.dirt.blockID;
 			}
 
+			if(var1 == Block.jungleGrass.blockID) {
+				var1 = Block.mud.blockID;
+			}
+
 			if(var1 == Block.stairDouble.blockID) {
 				var1 = Block.stairSingle.blockID;
 			}
@@ -923,6 +886,9 @@
 			this.thePlayer.inventory.setCurrentItem(var1, this.playerController instanceof PlayerControllerTest);
 		}
 
+		if (this.currentScreen != null && this.currentScreen.ingameFocus()) {
+			this.mouseHelper.ungrabMouseCursor();
+		}
 	}
 
 	private void func_28001_B() {
@@ -967,20 +933,39 @@
 			this.displayGuiScreen((GuiScreen)null);
 		}
 
-		if(this.currentScreen != null) {
+		if(this.currentScreen != null && (!this.currentScreen.ingameFocus() || !Mouse.isGrabbed())) {
 			this.leftClickCounter = 10000;
 			this.mouseTicksRan = this.ticksRan + 10000;
 		}
 
+		if(this.theWorld == null) {
+			if(this.gameSettings.titleMusicType == 1) {
+				this.sndManager.playTMusic("05_TitleScreen");
+			} else if(this.gameSettings.titleMusicType == 2) {
+				this.sndManager.playTMusic("60_Unknown");
+			} else if(this.gameSettings.titleMusicType == 3) {
+				this.sndManager.playTMusic("65_Unknown");
+			} else if(!(this.currentScreen instanceof GuiSplash)) {
+				this.sndManager.playTMusic("50_Unknown");
+			}
+			this.sndManager.playTRain(false);
+		}
+		this.sndManager.updateTMusic();
+
 		if(this.currentScreen != null) {
-			this.currentScreen.handleInput();
+			if(!this.currentScreen.ingameFocus() || !Mouse.isGrabbed()) {
+				this.currentScreen.handleInput();
+			}
 			if(this.currentScreen != null) {
 				this.currentScreen.field_25091_h.func_25088_a();
 				this.currentScreen.updateScreen();
 			}
 		}
 
-		if(this.currentScreen == null || this.currentScreen.field_948_f) {
+		if(this.currentScreen == null || this.currentScreen.field_948_f || this.currentScreen.ingameFocus()) {
+			if (this.currentScreen != null && this.currentScreen.ingameFocus()) {
+				this.inGameHasFocus = Mouse.isGrabbed();
+			}
 			label301:
 			while(true) {
 				while(true) {
@@ -996,8 +981,8 @@
 									while(true) {
 										do {
 											if(!Keyboard.next()) {
-												if(this.currentScreen == null) {
-													if(Mouse.isButtonDown(0) && (float)(this.ticksRan - this.mouseTicksRan) >= this.timer.ticksPerSecond / 4.0F && this.inGameHasFocus) {
+												if(this.currentScreen == null || this.currentScreen.ingameFocus()) {
+													if(Mouse.isButtonDown(0) && this.inGameHasFocus) {
 														this.clickMouse(0);
 														this.mouseTicksRan = this.ticksRan;
 													}
@@ -1008,7 +993,7 @@
 													}
 												}
 
-												this.func_6254_a(0, this.currentScreen == null && Mouse.isButtonDown(0) && this.inGameHasFocus);
+												this.func_6254_a(0, Mouse.isButtonDown(0) && (this.currentScreen == null || this.inGameHasFocus));
 												break label301;
 											}
 
@@ -1018,11 +1003,11 @@
 										if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
 											this.toggleFullscreen();
 										} else {
-											if(this.currentScreen != null) {
+											if(this.currentScreen != null && !this.currentScreen.ingameFocus()) {
 												this.currentScreen.handleKeyboardInput();
 											} else {
 												if(Keyboard.getEventKey() == Keyboard.KEY_ESCAPE) {
-													this.displayInGameMenu();
+													this.displayGuiScreen(new GuiInventory(this.thePlayer));
 												}
 
 												if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(Keyboard.KEY_F3)) {
@@ -1056,10 +1041,19 @@
 												if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.gameSettings.keyBindChat.keyCode) {
 													this.displayGuiScreen(new GuiChat());
 												}
+
+												if(this.thePlayer.isPlayerSleeping() && Keyboard.getEventKey() == this.gameSettings.keyBindSneak.keyCode) {
+													this.thePlayer.wakeUpPlayer(false, true, true);
+												}
+
+												if(Keyboard.getEventKey() == this.gameSettings.keyBindQuickHeal.keyCode) {
+													this.thePlayer.quickHeal();
+												}
 											}
 
 											for(int var6 = 0; var6 < 9; ++var6) {
 												if(Keyboard.getEventKey() == Keyboard.KEY_1 + var6) {
+													this.sndManager.playSoundFX("Menu_Tick", 1.0F, 1.0F);
 													this.thePlayer.inventory.currentItem = var6;
 												}
 											}
@@ -1077,6 +1071,7 @@
 
 						var3 = Mouse.getEventDWheel();
 						if(var3 != 0) {
+							this.sndManager.playSoundFX("Menu_Tick", 1.0F, 1.0F);
 							this.thePlayer.inventory.changeCurrentItem(var3);
 							if(this.gameSettings.field_22275_C) {
 								if(var3 > 0) {
@@ -1091,8 +1086,8 @@
 							}
 						}
 
-						if(this.currentScreen == null) {
-							if(!this.inGameHasFocus && Mouse.getEventButtonState()) {
+						if(this.currentScreen == null || this.currentScreen.ingameFocus()) {
+							if(!this.inGameHasFocus && Mouse.getEventButtonState() && (this.currentScreen == null || !this.currentScreen.ingameFocus())) {
 								this.setIngameFocus();
 							} else {
 								if(Mouse.getEventButton() == 0 && Mouse.getEventButtonState()) {
@@ -1109,7 +1104,7 @@
 									this.clickMiddleMouseButton();
 								}
 							}
-						} else if(this.currentScreen != null) {
+						} else if(this.currentScreen != null && (!this.currentScreen.ingameFocus() || !Mouse.isGrabbed())) {
 							this.currentScreen.handleMouseInput();
 						}
 					}
@@ -1221,7 +1216,7 @@
 
 			var7 = null;
 			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(-1));
-			this.changeWorld(var7, "Entering the Nether", this.thePlayer);
+			this.changeWorld(var7, "Entering the Underworld", this.thePlayer);
 		} else {
 			var1 *= var5;
 			var3 *= var5;
@@ -1232,7 +1227,7 @@
 
 			var7 = null;
 			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(0));
-			this.changeWorld(var7, "Leaving the Nether", this.thePlayer);
+			this.changeWorld(var7, "Leaving the Underworld", this.thePlayer);
 		}
 
 		this.thePlayer.worldObj = this.theWorld;
@@ -1282,7 +1277,7 @@
 			}
 
 			if(this.thePlayer == null) {
-				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(var1);
+				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(var1, this.playerSaveManager.loadPlayer(this.selectedPlayer));
 				this.thePlayer.preparePlayerToSpawn();
 				this.playerController.flipPlayer(this.thePlayer);
 			}
@@ -1372,6 +1367,8 @@
 			this.sndManager.addSound(var1, var2);
 		} else if(var4.equalsIgnoreCase("newsound")) {
 			this.sndManager.addSound(var1, var2);
+		} else if(var4.equalsIgnoreCase("tsound")) {
+			this.sndManager.addSound(var1, var2);
 		} else if(var4.equalsIgnoreCase("streaming")) {
 			this.sndManager.addStreaming(var1, var2);
 		} else if(var4.equalsIgnoreCase("music")) {
@@ -1440,7 +1437,8 @@
 		}
 
 		this.renderViewEntity = null;
-		this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(this.theWorld);
+		PlayerInfo info = this.thePlayer == null ? this.playerSaveManager.loadPlayer(this.selectedPlayer) : new PlayerInfo(this.thePlayer);
+		this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(this.theWorld, info.onRespawn());
 		this.thePlayer.dimension = var2;
 		this.renderViewEntity = this.thePlayer;
 		this.thePlayer.preparePlayerToSpawn();
@@ -1472,10 +1470,10 @@
 		Canvas var6 = new Canvas();
 		var5.setLayout(new BorderLayout());
 		var5.add(var6, "Center");
-		var6.setPreferredSize(new Dimension(854, 480));
+		var6.setPreferredSize(new Dimension(1280, 720));
 		var5.pack();
 		var5.setLocationRelativeTo((Component)null);
-		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
+		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 1280, 720, var3, var5);
 		Thread var8 = new Thread(var7, "Minecraft main thread");
 		var8.setPriority(10);
 		var7.minecraftUri = "www.minecraft.net";
@@ -1536,5 +1534,13 @@
 		}
 
 		return false;
+	}
+
+	public void resetLeftClicks() {
+		this.leftClickCounter = 0;
+	}
+
+	public void setTitle(String var1) {
+		Display.setTitle(var1);
 	}
 }
--- net/minecraft/src/WorldChunkManager.java
+++ net/minecraft/src/WorldChunkManager.java
@@ -29,7 +29,7 @@
 	}
 
 	public double getTemperature(int var1, int var2) {
-		this.temperature = this.field_4194_e.func_4112_a(this.temperature, (double)var1, (double)var2, 1, 1, (double)0.025F, (double)0.025F, 0.5D);
+		this.temperature = this.field_4194_e.func_4112_a(this.temperature, (double)var1, (double)var2, 1, 1, (double)0.05F, (double)0.05F, 0.5D);
 		return this.temperature[0];
 	}
 
@@ -43,7 +43,7 @@
 			var1 = new double[var4 * var5];
 		}
 
-		var1 = this.field_4194_e.func_4112_a(var1, (double)var2, (double)var3, var4, var5, (double)0.025F, (double)0.025F, 0.25D);
+		var1 = this.field_4194_e.func_4112_a(var1, (double)var2, (double)var3, var4, var5, (double)0.05F, (double)0.05F, 0.25D);
 		this.field_4196_c = this.field_4192_g.func_4112_a(this.field_4196_c, (double)var2, (double)var3, var4, var5, 0.25D, 0.25D, 0.5882352941176471D);
 		int var6 = 0;
 
@@ -75,7 +75,7 @@
 			var1 = new BiomeGenBase[var4 * var5];
 		}
 
-		this.temperature = this.field_4194_e.func_4112_a(this.temperature, (double)var2, (double)var3, var4, var4, (double)0.025F, (double)0.025F, 0.25D);
+		this.temperature = this.field_4194_e.func_4112_a(this.temperature, (double)var2, (double)var3, var4, var4, (double)0.05F, (double)0.05F, 0.25D);
 		this.humidity = this.field_4193_f.func_4112_a(this.humidity, (double)var2, (double)var3, var4, var4, (double)0.05F, (double)0.05F, 1.0D / 3.0D);
 		this.field_4196_c = this.field_4192_g.func_4112_a(this.field_4196_c, (double)var2, (double)var3, var4, var4, 0.25D, 0.25D, 0.5882352941176471D);
 		int var6 = 0;
@@ -89,7 +89,6 @@
 				var11 = 0.002D;
 				var13 = 1.0D - var11;
 				double var17 = (this.humidity[var6] * 0.15D + 0.5D) * var13 + var9 * var11;
-				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
 				if(var15 < 0.0D) {
 					var15 = 0.0D;
 				}
--- net/minecraft/src/GuiOptions.java
+++ net/minecraft/src/GuiOptions.java
@@ -4,7 +4,7 @@
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Options";
 	private GameSettings options;
-	private static EnumOptions[] field_22135_k = new EnumOptions[]{EnumOptions.MUSIC, EnumOptions.SOUND, EnumOptions.INVERT_MOUSE, EnumOptions.SENSITIVITY, EnumOptions.DIFFICULTY};
+	private static EnumOptions[] field_22135_k = new EnumOptions[]{EnumOptions.MUSIC, EnumOptions.SOUND, EnumOptions.INVERT_MOUSE, EnumOptions.SENSITIVITY, EnumOptions.DIFFICULTY, EnumOptions.AUTOPAUSE};
 
 	public GuiOptions(GuiScreen var1, GameSettings var2) {
 		this.parentScreen = var1;
@@ -21,17 +21,22 @@
 		for(int var5 = 0; var5 < var4; ++var5) {
 			EnumOptions var6 = var3[var5];
 			if(!var6.getEnumFloat()) {
-				this.controlList.add(new GuiSmallButton(var6.returnEnumOrdinal(), this.width / 2 - 155 + var2 % 2 * 160, this.height / 6 + 24 * (var2 >> 1), var6, this.options.getKeyBinding(var6)));
+				this.controlList.add(new GuiSmallButton(var6.returnEnumOrdinal(), this.width / 2 - 75, 80 + 20 * var2, var6, this.options.getKeyBinding(var6)).asTransparent());
 			} else {
-				this.controlList.add(new GuiSlider(var6.returnEnumOrdinal(), this.width / 2 - 155 + var2 % 2 * 160, this.height / 6 + 24 * (var2 >> 1), var6, this.options.getKeyBinding(var6), this.options.getOptionFloatValue(var6)));
+				this.controlList.add(new GuiSlider(var6.returnEnumOrdinal(), this.width / 2 - 75, 80 + 20 * var2, var6, this.options.getKeyBinding(var6), this.options.getOptionFloatValue(var6)).asTransparent());
 			}
 
 			++var2;
 		}
 
-		this.controlList.add(new GuiButton(101, this.width / 2 - 100, this.height / 6 + 96 + 12, var1.translateKey("options.video")));
-		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 120 + 12, var1.translateKey("options.controls")));
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, var1.translateKey("gui.done")));
+		if (this.mc.theWorld != null) {
+			this.controlList.add(new GuiButton(200, this.width / 2 - 100, 90 + 20 * field_22135_k.length, var1.translateKey("gui.back")).asTransparent());
+		} else {
+			this.controlList.add(new GuiButton(101, this.width / 2 - 100, 90 + 20 * field_22135_k.length, var1.translateKey("options.video")).asTransparent());
+			this.controlList.add(new GuiButton(100, this.width / 2 - 100, 110 + 20 * field_22135_k.length, var1.translateKey("options.controls")).asTransparent());
+			this.controlList.add(new GuiButton(102, this.width / 2 - 100, 130 + 20 * field_22135_k.length, var1.translateKey("options.cursor")).asTransparent());
+			this.controlList.add(new GuiButton(200, this.width / 2 - 100, 150 + 20 * field_22135_k.length, var1.translateKey("gui.back")).asTransparent());
+		}
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -51,6 +56,11 @@
 				this.mc.displayGuiScreen(new GuiControls(this, this.options));
 			}
 
+			if(var1.id == 102) {
+				this.mc.gameSettings.saveOptions();
+				this.mc.displayGuiScreen(new GuiCursorSettings(this, this.options));
+			}
+
 			if(var1.id == 200) {
 				this.mc.gameSettings.saveOptions();
 				this.mc.displayGuiScreen(this.parentScreen);
@@ -61,7 +71,6 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -26,6 +26,16 @@
 		return -1;
 	}
 
+	private int getInventorySlotContainItem(int var1, int var1a) {
+		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
+			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1 && this.mainInventory[var2].getItemDamage() == var1a) {
+				return var2;
+			}
+		}
+
+		return -1;
+	}
+
 	private int storeItemStack(ItemStack var1) {
 		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
 			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1.itemID && this.mainInventory[var2].isStackable() && this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize() && this.mainInventory[var2].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[var2].getHasSubtypes() || this.mainInventory[var2].getItemDamage() == var1.getItemDamage())) {
@@ -128,6 +138,19 @@
 		}
 	}
 
+	public boolean consumeInventoryItem(int var1, int var1a) {
+		int var2 = this.getInventorySlotContainItem(var1, var1a);
+		if(var2 < 0) {
+			return false;
+		} else {
+			if(--this.mainInventory[var2].stackSize <= 0) {
+				this.mainInventory[var2] = null;
+			}
+
+			return true;
+		}
+	}
+
 	public boolean addItemStackToInventory(ItemStack var1) {
 		int var2;
 		if(var1.isItemDamaged()) {
@@ -187,9 +210,16 @@
 	}
 
 	public float getStrVsBlock(Block var1) {
-		float var2 = 1.0F;
+		if (var1 == null || var1.getHardness() == 0.0F) {
+			return 1.0F;
+		}
+
+		float var2 = 0.0F;
 		if(this.mainInventory[this.currentItem] != null) {
-			var2 *= this.mainInventory[this.currentItem].getStrVsBlock(var1);
+			var2 = this.mainInventory[this.currentItem].getStrVsBlock(var1);
+			if (var2 <= 1.0F) {
+				return 0.0F;
+			}
 		}
 
 		return var2;
@@ -259,12 +289,22 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public int getDamageVsEntity(Entity var1) {
 		ItemStack var2 = this.getStackInSlot(this.currentItem);
-		return var2 != null ? var2.getDamageVsEntity(var1) : 1;
+		return var2 != null ? var2.getDamageVsEntity(var1) : 0;
+	}
+
+	public int getSpeedVsEntity(Entity var1) {
+		ItemStack var2 = this.getStackInSlot(this.currentItem);
+		return var2 != null ? var2.getSpeedVsEntity(var1) : 10;
+	}
+
+	public float getReach() {
+		ItemStack var2 = this.getStackInSlot(this.currentItem);
+		return var2 != null ? var2.getReach() : 4.0F;
 	}
 
 	public boolean canHarvestBlock(Block var1) {
@@ -282,26 +322,12 @@
 
 	public int getTotalArmorValue() {
 		int var1 = 0;
-		int var2 = 0;
-		int var3 = 0;
-
 		for(int var4 = 0; var4 < this.armorInventory.length; ++var4) {
 			if(this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
-				int var5 = this.armorInventory[var4].getMaxDamage();
-				int var6 = this.armorInventory[var4].getItemDamageForDisplay();
-				int var7 = var5 - var6;
-				var2 += var7;
-				var3 += var5;
-				int var8 = ((ItemArmor)this.armorInventory[var4].getItem()).damageReduceAmount;
-				var1 += var8;
+				var1 += ((ItemArmor)this.armorInventory[var4].getItem()).damageReduceAmount;
 			}
 		}
-
-		if(var3 == 0) {
-			return 0;
-		} else {
-			return (var1 - 1) * var2 / var3 + 1;
-		}
+		return var1;
 	}
 
 	public void damageArmor(int var1) {
@@ -366,6 +392,19 @@
 			}
 		}
 
+		return false;
+	}
+
+	public boolean hasStackedItem(ItemStack var1) {
+		int count = 0;
+		for (ItemStack item : this.mainInventory) {
+			if (item == null) continue;
+
+			if (item.itemID == var1.itemID && (var1.getItemDamage() == -1 || item.getItemDamage() == var1.getItemDamage())) {
+				count += item.stackSize;
+				if (count >= var1.stackSize) return true;
+			}
+		}
 		return false;
 	}
 }
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -8,16 +8,40 @@
 	private MouseFilter field_21903_bJ = new MouseFilter();
 	private MouseFilter field_21904_bK = new MouseFilter();
 	private MouseFilter field_21902_bL = new MouseFilter();
+	public String saveFile;
+	public String skinName;
 
-	public EntityPlayerSP(Minecraft var1, World var2, Session var3, int var4) {
+	public EntityPlayerSP(Minecraft var1, World var2, PlayerInfo var3, int var4) {
 		super(var2);
 		this.mc = var1;
 		this.dimension = var4;
-		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://s3.amazonaws.com/MinecraftSkins/" + var3.username + ".png";
-		}
-
-		this.username = var3.username;
+		this.username = var3.getName();
+		this.saveFile = var3.getSaveFile();
+		this.skinUrl = this.skinName = var3.getSkin();
+		this.health = var3.getHealth();
+		this.maxHealth = var3.getMaxHealth();
+
+		if (this.skinUrl == null || this.skinUrl.isEmpty()) {
+			this.skinUrl = var1.session.username;
+		}
+
+		if (!this.skinUrl.startsWith("http://") && !this.skinUrl.startsWith("https://")) {
+			this.skinUrl = "http://s3.amazonaws.com/MinecraftSkins/" + this.skinUrl + ".png";
+		}
+
+		if (var3.getInventory() != null && var3.getInventory().tagCount() > 0) {
+			this.inventory.readFromNBT(var3.getInventory());
+		} else {
+			if (this.mc.gameSettings.difficulty < 2) {
+				this.inventory.setInventorySlotContents(0, new ItemStack(Item.shortswordSteel));
+				this.inventory.setInventorySlotContents(1, new ItemStack(Item.axeSteel));
+				this.inventory.setInventorySlotContents(2, new ItemStack(Item.pickaxeSteel));
+			} else {
+				this.inventory.setInventorySlotContents(0, new ItemStack(Item.shortswordStone));
+				this.inventory.setInventorySlotContents(1, new ItemStack(Item.axeStone));
+				this.inventory.setInventorySlotContents(2, new ItemStack(Item.pickaxeStone));
+			}
+		}
 	}
 
 	public void moveEntity(double var1, double var3, double var5) {
@@ -27,7 +51,7 @@
 	public void updatePlayerActionState() {
 		super.updatePlayerActionState();
 		this.moveStrafing = this.movementInput.moveStrafe;
-		this.moveForward = this.movementInput.moveForward;
+		this.moveForward = this.moveVehicleForward = this.movementInput.moveForward;
 		this.isJumping = this.movementInput.jump;
 	}
 
@@ -95,14 +119,45 @@
 		this.movementInput.checkKeyForMovementInput(var1, var2);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("Score", this.score);
+	public void readFromNBT(NBTTagCompound var1) {
+		if(var1.hasKey("SpawnX") && var1.hasKey("SpawnY") && var1.hasKey("SpawnZ")) {
+			this.setPlayerSpawnCoordinate(new ChunkCoordinates(var1.getInteger("SpawnX"), var1.getInteger("SpawnY"), var1.getInteger("SpawnZ")));
+		}
+
+		ChunkCoordinates spawn = this.getPlayerSpawnCoordinate();
+		if(spawn != null) {
+			spawn = EntityPlayer.func_25060_a(this.worldObj, spawn);
+		}
+		if (spawn == null) {
+			spawn = this.worldObj.getSpawnPoint();
+			spawn.y = this.worldObj.getHeightValue(spawn.x, spawn.z);
+		}
+
+		IChunkProvider var6 = this.worldObj.getIChunkProvider();
+		if(var6 instanceof ChunkProviderLoadOrGenerate) {
+			ChunkProviderLoadOrGenerate var7 = (ChunkProviderLoadOrGenerate)var6;
+			var7.setCurrentChunkOver(spawn.x >> 4, spawn.z >> 4);
+		}
+
+		this.motionX = this.motionY = this.motionZ = 0.0D;
+		this.setLocationAndAngles(spawn.x + 0.5F, spawn.y + this.yOffset, spawn.z + 0.5F, 0.0F, 0.0F);
+		while (this.isEntityInsideOpaqueBlock()) {
+			++this.posY;
+		}
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.score = var1.getInteger("Score");
+	public void writeToNBT(NBTTagCompound var1) {
+		if(!this.isEntityAlive()) {
+			return;
+		}
+
+		if(this.getPlayerSpawnCoordinate() != null) {
+			var1.setInteger("SpawnX", this.getPlayerSpawnCoordinate().x);
+			var1.setInteger("SpawnY", this.getPlayerSpawnCoordinate().y);
+			var1.setInteger("SpawnZ", this.getPlayerSpawnCoordinate().z);
+		}
+
+		this.mc.getPlayerSaveManager().savePlayer(new PlayerInfo(this));
 	}
 
 	public void closeScreen() {
@@ -115,19 +170,22 @@
 	}
 
 	public void displayGUIChest(IInventory var1) {
-		this.mc.displayGuiScreen(new GuiChest(this.inventory, var1));
+		if (this.mc.currentScreen == null) {
+			this.mc.displayGuiScreen(new GuiChest(this.inventory, var1));
+		}
 	}
 
 	public void displayWorkbenchGUI(int var1, int var2, int var3) {
-		this.mc.displayGuiScreen(new GuiCrafting(this.inventory, this.worldObj, var1, var2, var3));
+		this.mc.displayGuiScreen(new GuiInventory(this));
 	}
 
 	public void displayGUIFurnace(TileEntityFurnace var1) {
-		this.mc.displayGuiScreen(new GuiFurnace(this.inventory, var1));
 	}
 
 	public void displayGUIDispenser(TileEntityDispenser var1) {
-		this.mc.displayGuiScreen(new GuiDispenser(this.inventory, var1));
+		if (this.mc.currentScreen == null) {
+			this.mc.displayGuiScreen(new GuiDispenser(this.inventory, var1));
+		}
 	}
 
 	public void onItemPickup(Entity var1, int var2) {
--- net/minecraft/src/GuiAchievement.java
+++ net/minecraft/src/GuiAchievement.java
@@ -91,7 +91,7 @@
 
 				var9 *= var9;
 				var9 *= var9;
-				int var5 = this.achievementWindowWidth - 160;
+				int var5 = (this.achievementWindowWidth - 160) / 2;
 				int var6 = 0 - (int)(var9 * 36.0D);
 				int var7 = this.theGame.renderEngine.getTexture("/achievement/bg.png");
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
--- net/minecraft/src/EntityFish.java
+++ net/minecraft/src/EntityFish.java
@@ -281,7 +281,7 @@
 						if(this.rand.nextInt(var29) == 0) {
 							this.ticksCatchable = this.rand.nextInt(30) + 10;
 							this.motionY -= (double)0.2F;
-							this.worldObj.playSoundAtEntity(this, "random.splash", 0.25F, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+							this.worldObj.playSoundAtEntity(this, "Splash_0", 0.25F, 1.0F);
 							float var30 = (float)MathHelper.floor_double(this.boundingBox.minY);
 
 							int var15;
--- net/minecraft/src/GuiConflictWarning.java
+++ net/minecraft/src/GuiConflictWarning.java
@@ -4,6 +4,7 @@
 	private int updateCounter = 0;
 
 	public void updateScreen() {
+		super.updateScreen();
 		++this.updateCounter;
 	}
 
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -1,7 +1,9 @@
 package net.minecraft.src;
 
-import java.util.Iterator;
-import java.util.List;
+import org.lwjgl.input.Keyboard;
+
+import java.util.*;
+import java.util.stream.IntStream;
 
 public abstract class EntityPlayer extends EntityLiving {
 	public InventoryPlayer inventory = new InventoryPlayer(this);
@@ -13,6 +15,7 @@
 	public float field_774_f;
 	public boolean isSwinging = false;
 	public int swingProgressInt = 0;
+	public int swingMax = 0;
 	public String username;
 	public int dimension;
 	public String playerCloakUrl;
@@ -36,15 +39,20 @@
 	public float prevTimeInPortal;
 	private int damageRemainder = 0;
 	public EntityFish fishEntity = null;
+	private int regenTime;
+	private int regenRate;
+	private int regenCounter;
+	public int potionSickness = 0;
+	public int maxHealth = 100;
+	public float moveVehicleForward;
 
 	public EntityPlayer(World var1) {
 		super(var1);
-		this.inventorySlots = new ContainerPlayer(this.inventory, !var1.multiplayerWorld);
+		this.inventorySlots = new ContainerPlayer(this.inventory, var1 == null || !var1.multiplayerWorld);
 		this.craftingInventory = this.inventorySlots;
 		this.yOffset = 1.62F;
-		ChunkCoordinates var2 = var1.getSpawnPoint();
+		ChunkCoordinates var2 = var1 != null ? var1.getSpawnPoint() : new ChunkCoordinates(0, 0, 0);
 		this.setLocationAndAngles((double)var2.x + 0.5D, (double)(var2.y + 1), (double)var2.z + 0.5D, 0.0F, 0.0F);
-		this.health = 20;
 		this.field_9351_C = "humanoid";
 		this.field_9353_B = 180.0F;
 		this.fireResistance = 20;
@@ -66,8 +74,6 @@
 			if(!this.worldObj.multiplayerWorld) {
 				if(!this.isInBed()) {
 					this.wakeUpPlayer(true, true, false);
-				} else if(this.worldObj.isDaytime()) {
-					this.wakeUpPlayer(false, true, true);
 				}
 			}
 		} else if(this.sleepTimer > 0) {
@@ -151,14 +157,13 @@
 		this.yOffset = 1.62F;
 		this.setSize(0.6F, 1.8F);
 		super.preparePlayerToSpawn();
-		this.health = 20;
 		this.deathTime = 0;
 	}
 
 	protected void updatePlayerActionState() {
 		if(this.isSwinging) {
 			++this.swingProgressInt;
-			if(this.swingProgressInt >= 8) {
+			if(this.swingProgressInt >= this.swingMax) {
 				this.swingProgressInt = 0;
 				this.isSwinging = false;
 			}
@@ -166,11 +171,57 @@
 			this.swingProgressInt = 0;
 		}
 
-		this.swingProgress = (float)this.swingProgressInt / 8.0F;
+		this.swingProgress = (float)this.swingProgressInt / this.swingMax;
 	}
 
 	public void onLivingUpdate() {
-		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 12 == 0) {
+		if (--this.potionSickness < 0) {
+			this.potionSickness = 0;
+		}
+
+		if (this.isPlayerSleeping() && this.isJumping) {
+			this.wakeUpPlayer(false, true, true);
+		}
+
+		if (this.isEntityAlive()) {
+			int effectiveRegenTime = Math.min(this.regenTime, 600) / 100;
+			if (this.regenTime > 600) {
+				effectiveRegenTime += (this.regenTime - 600) / 200;
+			}
+			float regenRateFloat = (this.getMaxHealth() / 400.0F * 0.85F + 0.15F) * effectiveRegenTime;
+
+			if (this.moveForward != 0.0F || this.moveStrafing != 0.0F) regenRateFloat *= 0.5F;
+			else regenRateFloat *= 1.25F;
+			if (this.isPlayerSleeping()) regenRateFloat *= 1.5F;
+
+			this.regenRate = Math.round(regenRateFloat);
+
+			this.regenCounter += this.regenRate;
+			while (this.regenCounter > 40) {
+				this.heal(1);
+				this.regenCounter -= 40;
+			}
+			while (this.regenCounter < -40) {
+				this.regenCounter += 40;
+				if (--this.health <= 0) {
+					this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), 1.0F);
+					this.onDeath(null);
+				}
+			}
+
+			if (this.air < 0) {
+				this.regenTime = 0;
+			} else {
+				if (this.isPlayerSleeping()) this.regenTime += 10;
+				++this.regenTime;
+			}
+
+			if (this.regenTime > 1200) {
+				this.regenTime = 1200;
+			}
+		}
+
+		if(this.worldObj.difficultySetting == 0 && this.health < this.getMaxHealth() && this.ticksExisted % 4 == 0) {
 			this.heal(1);
 		}
 
@@ -224,7 +275,6 @@
 			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
 		}
 
-		this.inventory.dropAllItems();
 		if(var1 != null) {
 			this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 			this.motionZ = (double)(-MathHelper.sin((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
@@ -289,16 +339,7 @@
 	}
 
 	public float getCurrentPlayerStrVsBlock(Block var1) {
-		float var2 = this.inventory.getStrVsBlock(var1);
-		if(this.isInsideOfMaterial(Material.water)) {
-			var2 /= 5.0F;
-		}
-
-		if(!this.onGround) {
-			var2 /= 5.0F;
-		}
-
-		return var2;
+		return this.inventory.getStrVsBlock(var1);
 	}
 
 	public boolean canHarvestBlock(Block var1) {
@@ -307,11 +348,13 @@
 
 	public void readEntityFromNBT(NBTTagCompound var1) {
 		super.readEntityFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Inventory");
-		this.inventory.readFromNBT(var2);
 		this.dimension = var1.getInteger("Dimension");
 		this.sleeping = var1.getBoolean("Sleeping");
 		this.sleepTimer = var1.getShort("SleepTimer");
+		this.regenTime = var1.getInteger("RegenTime");
+		this.regenRate = var1.getInteger("RegenRate");
+		this.regenCounter = var1.getInteger("RegenCounter");
+		this.potionSickness = var1.getInteger("PotionSickness");
 		if(this.sleeping) {
 			this.bedChunkCoordinates = new ChunkCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
 			this.wakeUpPlayer(true, true, false);
@@ -329,6 +372,10 @@
 		var1.setInteger("Dimension", this.dimension);
 		var1.setBoolean("Sleeping", this.sleeping);
 		var1.setShort("SleepTimer", (short)this.sleepTimer);
+		var1.setInteger("RegenTime", this.regenTime);
+		var1.setInteger("RegenRate", this.regenRate);
+		var1.setInteger("RegenCounter", this.regenCounter);
+		var1.setInteger("PotionSickness", this.potionSickness);
 		if(this.playerSpawnCoordinate != null) {
 			var1.setInteger("SpawnX", this.playerSpawnCoordinate.x);
 			var1.setInteger("SpawnY", this.playerSpawnCoordinate.y);
@@ -363,23 +410,26 @@
 				this.wakeUpPlayer(true, true, false);
 			}
 
-			if(var1 instanceof EntityMob || var1 instanceof EntityArrow) {
+			if(var1 instanceof EntityLiving || var1 instanceof EntityArrow) {
 				if(this.worldObj.difficultySetting == 0) {
 					var2 = 0;
 				}
 
 				if(this.worldObj.difficultySetting == 1) {
-					var2 = var2 / 3 + 1;
+					var2 /= 2;
 				}
 
 				if(this.worldObj.difficultySetting == 3) {
-					var2 = var2 * 3 / 2;
+					var2 *= 2;
 				}
 			}
 
 			if(var2 == 0) {
 				return false;
 			} else {
+				this.regenTime = 0;
+				this.regenCounter = 0;
+
 				Object var3 = var1;
 				if(var1 instanceof EntityArrow && ((EntityArrow)var1).owner != null) {
 					var3 = ((EntityArrow)var1).owner;
@@ -437,11 +487,17 @@
 	}
 
 	protected void damageEntity(int var1) {
-		int var2 = 25 - this.inventory.getTotalArmorValue();
-		int var3 = var1 * var2 + this.damageRemainder;
-		this.inventory.damageArmor(var1);
-		var1 = var3 / 25;
-		this.damageRemainder = var3 % 25;
+		if (var1 > 0) {
+			int defense = this.inventory.getTotalArmorValue();
+			if (this.worldObj.difficultySetting < 3) {
+				defense /= 2;
+			}
+
+			var1 -= defense;
+			if (var1 < 1) {
+				var1 = 1;
+			}
+		}
 		super.damageEntity(var1);
 	}
 
@@ -481,21 +537,29 @@
 	}
 
 	public void swingItem() {
+		this.swingItemSilent();
+		this.worldObj.playSoundAtEntity(this, "Item_1", 1.0F, 1.0F);
+	}
+
+	public void swingItemSilent() {
 		this.swingProgressInt = -1;
+		this.swingMax = this.inventory.getSpeedVsEntity(null);
 		this.isSwinging = true;
 	}
 
 	public void attackTargetEntityWithCurrentItem(Entity var1) {
 		int var2 = this.inventory.getDamageVsEntity(var1);
 		if(var2 > 0) {
-			if(this.motionY < 0.0D) {
-				++var2;
-			}
-
 			var1.attackEntityFrom(this, var2);
 			ItemStack var3 = this.getCurrentEquippedItem();
 			if(var3 != null && var1 instanceof EntityLiving) {
 				var3.hitEntity((EntityLiving)var1, this);
+				if (((EntityLiving) var1).hurtTime > 0) {
+					((EntityLiving) var1).hurtTime = ((EntityLiving) var1).maxHurtTime = this.inventory.getSpeedVsEntity(var1);
+				}
+				if (var1.heartsLife == ((EntityLiving) var1).heartsHalvesLife) {
+					var1.heartsLife = this.inventory.getSpeedVsEntity(var1);
+				}
 				if(var3.stackSize <= 0) {
 					var3.func_1097_a(this);
 					this.destroyCurrentEquippedItem();
@@ -544,10 +608,6 @@
 				return EnumStatus.NOT_POSSIBLE_HERE;
 			}
 
-			if(this.worldObj.isDaytime()) {
-				return EnumStatus.NOT_POSSIBLE_NOW;
-			}
-
 			if(Math.abs(this.posX - (double)var1) > 3.0D || Math.abs(this.posY - (double)var2) > 2.0D || Math.abs(this.posZ - (double)var3) > 3.0D) {
 				return EnumStatus.TOO_FAR_AWAY;
 			}
@@ -786,6 +846,15 @@
 		}
 
 		super.fall(var1);
+		int var2 = (int)Math.ceil(20.0D * (double)(var1 - 10.0F));
+		if(var2 > 0) {
+			this.attackEntityFrom((Entity)null, var2);
+			int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
+			if(var3 > 0) {
+				StepSound var4 = Block.blocksList[var3].stepSound;
+				this.worldObj.playSoundAtEntity(this, var4.func_1145_d(), var4.getVolume() * 0.5F, var4.getPitch() * (12.0F / 16.0F));
+			}
+		}
 	}
 
 	public void onKillEntity(EntityLiving var1) {
@@ -810,5 +879,61 @@
 		} else {
 			this.inPortal = true;
 		}
+	}
+
+	public Set<Block> getNearbyBlocks() {
+		Set<Block> blocks = new HashSet<>();
+		float range = 4.0F;
+		float dist = range * range + range * range + range * range;
+		int irange = (int)Math.ceil(range);
+
+		int ix = MathHelper.floor_double(this.posX);
+		int iy = MathHelper.floor_double(this.posY);
+		int iz = MathHelper.floor_double(this.posZ);
+
+		for (int x = -irange; x <= irange; x++) {
+			for (int y = -irange; y <= irange; y++) {
+				for (int z = -irange; z <= irange; z++) {
+					if (x * x + y * y + z * z > dist) continue;
+
+					int id = this.worldObj.getBlockId(x + ix, y + iy, z + iz);
+					if (id > 0) {
+						blocks.add(Block.blocksList[id]);
+					}
+				}
+			}
+		}
+
+		return blocks;
+	}
+
+	public int getMaxHealth() {
+		return this.maxHealth;
+	}
+
+	public void quickHeal() {
+		if (this.potionSickness > 0) {
+			this.potionSickness = 0;
+			return;
+		}
+
+		Arrays.stream(this.inventory.mainInventory)
+				.filter(i -> i != null && i.getItem() instanceof ItemFood)
+				.min(Comparator.comparingInt(a -> -((ItemFood) a.getItem()).getHealAmount()))
+				.ifPresent(food -> {
+					int index = IntStream.range(0, this.inventory.mainInventory.length)
+							.filter(i -> this.inventory.mainInventory[i] == food)
+							.findFirst()
+							.orElse(-1);
+
+					if (index > 0) {
+						ItemStack newFood = food.useItemRightClick(this.worldObj, this);
+						if (newFood.stackSize <= 0) {
+							newFood = null;
+						}
+						this.inventory.mainInventory[index] = newFood;
+					}
+				});
+
 	}
 }
--- net/minecraft/src/GuiTextField.java
+++ net/minecraft/src/GuiTextField.java
@@ -47,13 +47,17 @@
 					var3 = "";
 				}
 
-				int var4 = 32 - this.text.length();
-				if(var4 > var3.length()) {
-					var4 = var3.length();
-				}
+				if (this.maxStringLength == 0) {
+					this.text += var3;
+				} else {
+					int var4 = this.maxStringLength - this.text.length();
+					if(var4 > var3.length()) {
+						var4 = var3.length();
+					}
 
-				if(var4 > 0) {
-					this.text = this.text + var3.substring(0, var4);
+					if(var4 > 0) {
+						this.text = this.text + var3.substring(0, var4);
+					}
 				}
 			}
 
--- net/minecraft/src/BlockWorkbench.java
+++ net/minecraft/src/BlockWorkbench.java
@@ -4,18 +4,24 @@
 	protected BlockWorkbench(int var1) {
 		super(var1, Material.wood);
 		this.blockIndexInTexture = 59;
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
 		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? Block.planks.getBlockTextureFromSide(0) : (var1 != 2 && var1 != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
 	}
 
+	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if (var5 == 0) return false;
+		return super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		if(var1.multiplayerWorld) {
-			return true;
-		} else {
-			var5.displayWorkbenchGUI(var2, var3, var4);
-			return true;
-		}
+		var5.displayWorkbenchGUI(var2, var3, var4);
+		return true;
 	}
 }
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -595,10 +595,14 @@
 	}
 
 	public void updateClouds() {
-		++this.cloudOffsetX;
+		this.cloudOffsetX += this.worldObj.isAllPlayersFullyAsleep() ? 10 : 1;
 	}
 
 	public void renderSky(float var1) {
+		if (this.mc.theWorld.isAllPlayersFullyAsleep()) {
+			var1 *= 10.0F;
+		}
+
 		if(!this.mc.theWorld.worldProvider.isNether) {
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			Vec3D var2 = this.worldObj.func_4079_a(this.mc.renderViewEntity, var1);
@@ -723,6 +727,10 @@
 	}
 
 	public void renderClouds(float var1) {
+		if (this.mc.theWorld.isAllPlayersFullyAsleep()) {
+			var1 *= 10.0F;
+		}
+
 		if(!this.mc.theWorld.worldProvider.isNether) {
 			if(this.mc.gameSettings.fancyGraphics) {
 				this.renderCloudsFancy(var1);
@@ -1361,19 +1369,19 @@
 		int var16;
 		switch(var2) {
 		case 1000:
-			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "random.click", 1.0F, 1.0F);
+			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "Menu_Tick", 1.0F, 1.0F);
 			break;
 		case 1001:
-			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "random.click", 1.0F, 1.2F);
+			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "Menu_Tick", 1.0F, 1.2F);
 			break;
 		case 1002:
-			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "random.bow", 1.0F, 1.2F);
+			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "Item_5", 1.0F, 1.2F);
 			break;
 		case 1003:
 			if(Math.random() < 0.5D) {
-				this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "random.door_open", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+				this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "Door_Opened", 1.0F, 1.0F);
 			} else {
-				this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+				this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "Door_Closed", 1.0F, 1.0F);
 			}
 			break;
 		case 1004:
@@ -1409,7 +1417,9 @@
 			var16 = var6 & 255;
 			if(var16 > 0) {
 				Block var17 = Block.blocksList[var16];
-				this.mc.sndManager.playSound(var17.stepSound.stepSoundDir(), (float)var3 + 0.5F, (float)var4 + 0.5F, (float)var5 + 0.5F, (var17.stepSound.getVolume() + 1.0F) / 2.0F, var17.stepSound.getPitch() * 0.8F);
+				this.mc.sndManager.playSound(var17.stepSound.breakSoundDir(), (float)var3 + 0.5F, (float)var4 + 0.5F, (float)var5 + 0.5F,
+						var17.stepSound.isTerraSound() ? var17.stepSound.getVolume() : (var17.stepSound.getVolume() + 1.0F) / 2.0F,
+						(var17.stepSound.isTerraSound() ? 1.0F : var17.stepSound.getPitch() * 0.5F));
 			}
 
 			this.mc.effectRenderer.addBlockDestroyEffects(var3, var4, var5, var6 & 255, var6 >> 8 & 255);
--- net/minecraft/src/ThreadDownloadResources.java
+++ net/minecraft/src/ThreadDownloadResources.java
@@ -1,11 +1,10 @@
 package net.minecraft.src;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.*;
 import java.net.URL;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import net.minecraft.client.Minecraft;
@@ -31,6 +30,12 @@
 
 	public void run() {
 		try {
+			BufferedReader tresReader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream("/tres.txt"), StandardCharsets.UTF_8));
+			String line;
+			while ((line = tresReader.readLine()) != null && !line.isEmpty()) {
+				this.mc.installResource(line, new File(resourcesFolder, line));
+			}
+
 			URL var1 = new URL("http://s3.amazonaws.com/MinecraftResources/");
 			DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance();
 			DocumentBuilder var3 = var2.newDocumentBuilder();
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -7,7 +7,7 @@
 		super(var1, (var2 == Material.lava ? 14 : 12) * 16 + 13, var2);
 		float var3 = 0.0F;
 		float var4 = 0.0F;
-		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
+//		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
 		this.setTickOnLoad(true);
 	}
 
--- net/minecraft/src/BiomeGenRainforest.java
+++ net/minecraft/src/BiomeGenRainforest.java
@@ -3,7 +3,13 @@
 import java.util.Random;
 
 public class BiomeGenRainforest extends BiomeGenBase {
+	public BiomeGenRainforest() {
+		this.topBlock = (byte)Block.jungleGrass.blockID;
+		this.fillerBlock = (byte)Block.mud.blockID;
+		this.groundBlock = (byte)Block.mud.blockID;
+	}
+
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(3) == 0 ? new WorldGenBigTree() : new WorldGenTrees());
+		return new WorldGenBigTree().asMahogany();
 	}
 }
--- net/minecraft/src/RecipesTools.java
+++ net/minecraft/src/RecipesTools.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class RecipesTools {
-	private String[][] recipePatterns = new String[][]{{"XXX", " # ", " # "}, {"X", "#", "#"}, {"XX", "X#", " #"}, {"XX", " #", " #"}};
-	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.pickaxeWood, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold}, {Item.shovelWood, Item.shovelStone, Item.shovelSteel, Item.shovelDiamond, Item.shovelGold}, {Item.axeWood, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold}, {Item.hoeWood, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
+	private int[] recipeQuantities = new int[]{10, 8, 8};
+	private Object[][] recipeItems = new Object[][]{{Item.itemsList[Block.planks.blockID], Item.ingotCopper, Item.ingotIron, Item.diamond, Item.ingotGold}, {null, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold}, {null, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold}, {null, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
 
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
@@ -10,7 +10,9 @@
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+				if (var5 != null) {
+					var1.addShapelessRecipe(new ItemStack(var5), new ItemStack((Item)var3, this.recipeQuantities[var4]), new ItemStack(Item.stick, 4)).requireBlock(Block.workbench);
+				}
 			}
 		}
 
--- net/minecraft/src/Material.java
+++ net/minecraft/src/Material.java
@@ -21,7 +21,7 @@
 	public static final Material field_4262_q = (new Material(MapColor.foliageColor)).setNoPushMobility();
 	public static final Material ice = (new Material(MapColor.iceColor)).setIsTranslucent();
 	public static final Material snow = (new MaterialLogic(MapColor.snowColor)).setIsGroundCover().setIsTranslucent().setNoHarvest().setNoPushMobility();
-	public static final Material builtSnow = (new Material(MapColor.snowColor)).setNoHarvest();
+	public static final Material builtSnow = (new Material(MapColor.snowColor));
 	public static final Material cactus = (new Material(MapColor.foliageColor)).setIsTranslucent().setNoPushMobility();
 	public static final Material clay = new Material(MapColor.clayColor);
 	public static final Material pumpkin = (new Material(MapColor.foliageColor)).setNoPushMobility();
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -20,17 +20,6 @@
 		return "mob.skeletonhurt";
 	}
 
-	public void onLivingUpdate() {
-		if(this.worldObj.isDaytime()) {
-			float var1 = this.getEntityBrightness(1.0F);
-			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
-				this.fire = 300;
-			}
-		}
-
-		super.onLivingUpdate();
-	}
-
 	protected void attackEntity(Entity var1, float var2) {
 		if(var2 < 10.0F) {
 			double var3 = var1.posX - this.posX;
@@ -40,7 +29,7 @@
 				var7.posY += (double)1.4F;
 				double var8 = var1.posY + (double)var1.getEyeHeight() - (double)0.2F - var7.posY;
 				float var10 = MathHelper.sqrt_double(var3 * var3 + var5 * var5) * 0.2F;
-				this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+				this.worldObj.playSoundAtEntity(this, "Item_5", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
 				this.worldObj.entityJoinedWorld(var7);
 				var7.setArrowHeading(var3, var8 + (double)var10, var5, 0.6F, 12.0F);
 				this.attackTime = 30;
--- /dev/null
+++ net/minecraft/src/EntityPlayerModel.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+public class EntityPlayerModel extends EntityPlayer {
+	public EntityPlayerModel() {
+		super(null);
+	}
+
+	public void setSkin(String skin, String username) {
+		this.skinUrl = skin;
+
+		if (this.skinUrl == null || this.skinUrl.isEmpty()) {
+			this.skinUrl = username;
+		}
+
+		if (!this.skinUrl.startsWith("http://") && !this.skinUrl.startsWith("https://")) {
+			this.skinUrl = "http://s3.amazonaws.com/MinecraftSkins/" + this.skinUrl + ".png";
+		}
+	}
+
+	public float getEntityBrightness(float var1) {
+		return 1.0F;
+	}
+
+	public void func_6420_o() {
+	}
+}
--- net/minecraft/src/InventoryCrafting.java
+++ net/minecraft/src/InventoryCrafting.java
@@ -61,7 +61,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public void onInventoryChanged() {
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -5,12 +5,55 @@
 public class WorldGenMinable extends WorldGenerator {
 	private int minableBlockId;
 	private int numberOfBlocks;
+	private boolean inStone = true;
+	private boolean inSandstone = true;
+	private boolean inSnow = true;
+	private boolean inDirt = true;
+	private boolean inMud = true;
 
 	public WorldGenMinable(int var1, int var2) {
 		this.minableBlockId = var1;
 		this.numberOfBlocks = var2;
 	}
 
+	public WorldGenMinable only() {
+		this.inStone = false;
+		this.inSandstone = false;
+		this.inSnow = false;
+		this.inMud = false;
+		this.inDirt = false;
+		return this;
+	}
+
+	public WorldGenMinable inStone() {
+		this.inStone = true;
+		return this;
+	}
+
+	public WorldGenMinable inSandstone() {
+		this.inSandstone = true;
+		return this;
+	}
+
+	public WorldGenMinable inAnyStone() {
+		return this.inStone().inSandstone();
+	}
+
+	public WorldGenMinable inSnow() {
+		this.inSnow = true;
+		return this;
+	}
+
+	public WorldGenMinable inDirt() {
+		this.inDirt = true;
+		return this;
+	}
+
+	public WorldGenMinable inMud() {
+		this.inMud = true;
+		return this;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		float var6 = var2.nextFloat() * (float)Math.PI;
 		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
@@ -42,8 +85,19 @@
 						if(var39 * var39 + var42 * var42 < 1.0D) {
 							for(int var44 = var34; var44 <= var37; ++var44) {
 								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
-								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D && var1.getBlockId(var38, var41, var44) == Block.stone.blockID) {
-									var1.setBlock(var38, var41, var44, this.minableBlockId);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D) {
+									int b = var1.getBlockId(var38, var41, var44);
+									boolean t = false;
+									if (this.inStone) t |= b == Block.stone.blockID
+									                    || b == Block.cobblestoneMossy.blockID;
+									if (this.inSandstone) t |= b == Block.sandStone.blockID;
+									if (this.inSnow) t |= b == Block.blockSnow.blockID
+									                   || b == Block.packedIce.blockID;
+									if (this.inDirt) t |= b == Block.dirt.blockID
+									                   || b == Block.grass.blockID;
+									if (this.inMud) t |= b == Block.mud.blockID
+									                  || b == Block.jungleGrass.blockID;
+									if (t) var1.setBlock(var38, var41, var44, this.minableBlockId);
 								}
 							}
 						}
--- /dev/null
+++ net/minecraft/src/GuiCursorSettings.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+public class GuiCursorSettings extends GuiScreen {
+	private GuiScreen field_22110_h;
+	protected String field_22107_a = "Cursor Settings";
+	private GameSettings guiGameSettings;
+	private static EnumOptions[] field_22108_k = new EnumOptions[]{EnumOptions.CURSOR_R, EnumOptions.CURSOR_G, EnumOptions.CURSOR_B, EnumOptions.CURSOR_BORDER_R, EnumOptions.CURSOR_BORDER_G, EnumOptions.CURSOR_BORDER_B, EnumOptions.CURSOR_BORDER_A};
+
+	public GuiCursorSettings(GuiScreen var1, GameSettings var2) {
+		this.field_22110_h = var1;
+		this.guiGameSettings = var2;
+	}
+
+	public void initGui() {
+		StringTranslate var1 = StringTranslate.getInstance();
+		this.field_22107_a = var1.translateKey("options.cursorTitle");
+		int var2 = 0;
+		EnumOptions[] var3 = field_22108_k;
+		int var4 = var3.length;
+
+		for(int var5 = 0; var5 < var4; ++var5) {
+			EnumOptions var6 = var3[var5];
+			if(!var6.getEnumFloat()) {
+				this.controlList.add(new GuiSmallButton(var6.returnEnumOrdinal(), this.width / 2 - 75, 80 + 20 * var2, var6, this.guiGameSettings.getKeyBinding(var6)).asTransparent());
+			} else {
+				this.controlList.add(new GuiSlider(var6.returnEnumOrdinal(), this.width / 2 - 75, 80 + 20 * var2, var6, this.guiGameSettings.getKeyBinding(var6), this.guiGameSettings.getOptionFloatValue(var6)).asTransparent());
+			}
+
+			++var2;
+		}
+
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, 90 + 20 * field_22108_k.length, var1.translateKey("gui.back")).asTransparent());
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(var1.enabled) {
+			if(var1.id < 100 && var1 instanceof GuiSmallButton) {
+				this.guiGameSettings.setOptionValue(((GuiSmallButton)var1).returnEnumOptions(), 1);
+				var1.displayString = this.guiGameSettings.getKeyBinding(EnumOptions.getEnumOptions(var1.id));
+			}
+
+			if(var1.id == 200) {
+				this.mc.gameSettings.saveOptions();
+				this.mc.displayGuiScreen(this.field_22110_h);
+			}
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- net/minecraft/src/GuiAchievements.java
+++ net/minecraft/src/GuiAchievements.java
@@ -94,7 +94,7 @@
 			this.field_27122_w = 0;
 		}
 
-		this.drawDefaultBackground();
+		this.drawBackground(0);
 		this.func_27109_b(var1, var2, var3);
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
@@ -104,6 +104,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		this.field_27116_m = this.field_27114_o;
 		this.field_27115_n = this.field_27113_p;
 		double var1 = this.field_27112_q - this.field_27114_o;
--- net/minecraft/src/InventoryBasic.java
+++ net/minecraft/src/InventoryBasic.java
@@ -58,7 +58,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public void onInventoryChanged() {
--- net/minecraft/src/BlockRail.java
+++ net/minecraft/src/BlockRail.java
@@ -247,4 +247,20 @@
 	static boolean isPoweredBlockRail(BlockRail var0) {
 		return var0.isPowered;
 	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		if(!var1.multiplayerWorld) {
+			EntityMinecart minecart = new EntityMinecart(var1, ((float)var2 + 0.5F), ((float)var3 + 0.5F), ((float)var4 + 0.5F), 0);
+//			if (var5.inventory.getCurrentItem() == null || !(var5.inventory.getCurrentItem().getItem() instanceof ItemMinecart)) {
+			if (!var5.inventory.hasStackedItem(new ItemStack(Item.minecartEmpty))) {
+				minecart.makeSlow();
+			}
+
+			var1.entityJoinedWorld(minecart);
+			var1.playSoundAtEntity(minecart, "Item_53", 1.0F, 1.0F);
+			minecart.interact(var5);
+		}
+
+		return true;
+	}
 }
--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -81,7 +81,7 @@
 
 	public void readFromNBT(NBTTagCompound var1) {
 		this.itemID = var1.getShort("id");
-		this.stackSize = var1.getByte("Count");
+		this.stackSize = var1.getByte("Count") & 0xFF;
 		this.itemDamage = var1.getShort("Damage");
 	}
 
@@ -94,7 +94,7 @@
 	}
 
 	public boolean isItemStackDamageable() {
-		return Item.itemsList[this.itemID].getMaxDamage() > 0;
+		return false;
 	}
 
 	public boolean getHasSubtypes() {
@@ -158,6 +158,14 @@
 
 	public int getDamageVsEntity(Entity var1) {
 		return Item.itemsList[this.itemID].getDamageVsEntity(var1);
+	}
+
+	public int getSpeedVsEntity(Entity var1) {
+		return Item.itemsList[this.itemID].getSpeedVsEntity(var1);
+	}
+
+	public float getReach() {
+		return Item.itemsList[this.itemID].getReach();
 	}
 
 	public boolean canHarvestBlock(Block var1) {
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -51,10 +51,10 @@
 	public int ticksExisted = 0;
 	public int fireResistance = 1;
 	public int fire = 0;
-	protected int maxAir = 300;
+	protected int maxAir = 400;
 	protected boolean inWater = false;
 	public int heartsLife = 0;
-	public int air = 300;
+	public int air = this.maxAir;
 	private boolean isFirstUpdate = true;
 	public String skinUrl;
 	public String cloakUrl;
@@ -167,12 +167,7 @@
 		this.prevRotationYaw = this.rotationYaw;
 		if(this.handleWaterMovement()) {
 			if(!this.inWater && !this.isFirstUpdate) {
-				float var1 = MathHelper.sqrt_double(this.motionX * this.motionX * (double)0.2F + this.motionY * this.motionY + this.motionZ * this.motionZ * (double)0.2F) * 0.2F;
-				if(var1 > 1.0F) {
-					var1 = 1.0F;
-				}
-
-				this.worldObj.playSoundAtEntity(this, "random.splash", var1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+				this.worldObj.playSoundAtEntity(this, "Splash_0", 1.0F, 1.0F);
 				float var2 = (float)MathHelper.floor_double(this.boundingBox.minY);
 
 				int var3;
@@ -207,8 +202,12 @@
 					this.fire = 0;
 				}
 			} else {
-				if(this.fire % 20 == 0) {
+				if(this.fire % 5 == 0) {
 					this.attackEntityFrom((Entity)null, 1);
+					this.heartsLife = 0;
+					if (this instanceof EntityLiving) {
+						((EntityLiving) this).hurtTime -= 3;
+					}
 				}
 
 				--this.fire;
@@ -233,8 +232,11 @@
 
 	protected void setOnFireFromLava() {
 		if(!this.isImmuneToFire) {
-			this.attackEntityFrom((Entity)null, 4);
-			this.fire = 600;
+			this.attackEntityFrom((Entity)null, 80);
+			this.fire = 140;
+			if (this.worldObj.difficultySetting == 3) {
+				this.fire *= 2;
+			}
 		}
 
 	}
--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -13,7 +13,6 @@
 		super(var1);
 		this.texture = "/mob/chicken.png";
 		this.setSize(0.3F, 0.4F);
-		this.health = 4;
 		this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
 	}
 
--- net/minecraft/src/GuiEditSign.java
+++ net/minecraft/src/GuiEditSign.java
@@ -29,6 +29,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		++this.updateCounter;
 	}
 
--- net/minecraft/src/WorldGenPumpkin.java
+++ net/minecraft/src/WorldGenPumpkin.java
@@ -8,7 +8,9 @@
 			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
-			if(var1.isAirBlock(var7, var8, var9) && var1.getBlockId(var7, var8 - 1, var9) == Block.grass.blockID && Block.pumpkin.canPlaceBlockAt(var1, var7, var8, var9)) {
+			if(var1.isAirBlock(var7, var8, var9) && (var1.getBlockId(var7, var8 - 1, var9) == Block.grass.blockID
+					|| var1.getBlockId(var7, var8 - 1, var9) == Block.jungleGrass.blockID)
+					&& Block.pumpkin.canPlaceBlockAt(var1, var7, var8, var9)) {
 				var1.setBlockAndMetadata(var7, var8, var9, Block.pumpkin.blockID, var2.nextInt(4));
 			}
 		}
--- /dev/null
+++ net/minecraft/src/StepSoundSnow.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class StepSoundSnow extends StepSound {
+	public StepSoundSnow(String var1, float var2, float var3) {
+		super(var1, var2, var3);
+	}
+
+	public String stepSoundDir() {
+		return "Item_" + (rand.nextInt(3) + 48);
+	}
+
+	public String breakSoundDir() {
+		return "Item_" + (rand.nextInt(3) + 48);
+	}
+
+	public boolean isTerraSound() {
+		return true;
+	}
+}
--- net/minecraft/src/IInventory.java
+++ net/minecraft/src/IInventory.java
@@ -16,4 +16,8 @@
 	void onInventoryChanged();
 
 	boolean canInteractWith(EntityPlayer var1);
+
+	default boolean hasStackedItem(ItemStack var1) {
+		return false;
+	}
 }
--- /dev/null
+++ net/minecraft/src/ItemLifeCrystal.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+public class ItemLifeCrystal extends ItemBlock {
+	protected ItemLifeCrystal(int var1) {
+		super(var1);
+		this.maxStackSize = 99;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (!var3.isSwinging && var3.maxHealth < 400) {
+			var3.swingProgressInt = -1;
+			var3.swingMax = 20;
+			var3.isSwinging = true;
+
+			var3.maxHealth += 20;
+			var3.heal(20);
+			var2.playSoundAtEntity(var3, "Item_4", 1.0F, 1.0F);
+			--var1.stackSize;
+		}
+		return var1;
+	}
+}
--- net/minecraft/src/BiomeGenBase.java
+++ net/minecraft/src/BiomeGenBase.java
@@ -16,13 +16,14 @@
 	public static final BiomeGenBase desert = (new BiomeGenDesert()).setColor(16421912).setBiomeName("Desert").setDisableRain();
 	public static final BiomeGenBase plains = (new BiomeGenDesert()).setColor(16767248).setBiomeName("Plains");
 	public static final BiomeGenBase iceDesert = (new BiomeGenDesert()).setColor(16772499).setBiomeName("Ice Desert").setEnableSnow().setDisableRain().func_4124_a(12899129);
-	public static final BiomeGenBase tundra = (new BiomeGenBase()).setColor(5762041).setBiomeName("Tundra").setEnableSnow().func_4124_a(12899129);
+	public static final BiomeGenBase tundra = (new BiomeGenTaiga()).setColor(5762041).setBiomeName("Tundra").setEnableSnow().func_4124_a(12899129);
 	public static final BiomeGenBase hell = (new BiomeGenHell()).setColor(16711680).setBiomeName("Hell").setDisableRain();
 	public static final BiomeGenBase sky = (new BiomeGenSky()).setColor(8421631).setBiomeName("Sky").setDisableRain();
 	public String biomeName;
 	public int color;
 	public byte topBlock = (byte)Block.grass.blockID;
 	public byte fillerBlock = (byte)Block.dirt.blockID;
+	public byte groundBlock = (byte)Block.stone.blockID;
 	public int field_6502_q = 5169201;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
@@ -36,7 +37,7 @@
 		this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10));
 		this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10));
 		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10));
-		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10));
+		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 5));
 		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12));
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10));
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10));
@@ -57,11 +58,13 @@
 		}
 
 		desert.topBlock = desert.fillerBlock = (byte)Block.sand.blockID;
+		desert.groundBlock = (byte)Block.sandStone.blockID;
 		iceDesert.topBlock = iceDesert.fillerBlock = (byte)Block.sand.blockID;
+		iceDesert.groundBlock = (byte)Block.sandStone.blockID;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(10) == 0 ? new WorldGenBigTree() : new WorldGenTrees());
+		return (WorldGenerator)(var1.nextInt(5) == 0 ? new WorldGenBigTree() : new WorldGenTrees());
 	}
 
 	protected BiomeGenBase setEnableSnow() {
@@ -92,7 +95,7 @@
 
 	public static BiomeGenBase getBiome(float var0, float var1) {
 		var1 *= var0;
-		return var0 < 0.1F ? tundra : (var1 < 0.2F ? (var0 < 0.5F ? tundra : (var0 < 0.95F ? savanna : desert)) : (var1 > 0.5F && var0 < 0.7F ? swampland : (var0 < 0.5F ? taiga : (var0 < 0.97F ? (var1 < 0.35F ? shrubland : forest) : (var1 < 0.45F ? plains : (var1 < 0.9F ? seasonalForest : rainforest))))));
+		return var0 < 0.1F ? tundra : (var1 < 0.2F ? (var0 < 0.25F ? (var0 < 0.15F ? tundra : taiga) : (var0 < 0.7F ? savanna : desert)) : (var1 > 0.5F && var0 < 0.7F ? swampland : (var0 < 0.25F ? taiga : (var0 < 0.75F ? (var1 < 0.35F ? shrubland : forest) : (var1 < 0.45F ? plains : (var1 < 0.6F ? seasonalForest : rainforest))))));
 	}
 
 	public int getSkyColorByTemp(float var1) {
--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -8,7 +8,7 @@
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		if(var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
-			var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 0.8F));
+			var2.playSoundAtEntity(var3, "Item_5", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 0.8F));
 			if(!var2.multiplayerWorld) {
 				var2.entityJoinedWorld(new EntityArrow(var2, var3));
 			}
--- /dev/null
+++ net/minecraft/src/GuiPlayerSlot.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+import java.util.Date;
+
+class GuiPlayerSlot extends GuiSlot {
+	final GuiSelectCharacter parentCharacterGui;
+
+	public GuiPlayerSlot(GuiSelectCharacter var1) {
+		super(var1.mc, var1.width, var1.height, 32, var1.height - 64, 36);
+		this.parentCharacterGui = var1;
+	}
+
+	protected int getSize() {
+		return GuiSelectCharacter.getSize(this.parentCharacterGui).size();
+	}
+
+	protected void elementClicked(int var1, boolean var2) {
+		GuiSelectCharacter.onElementSelected(this.parentCharacterGui, var1);
+		boolean var3 = GuiSelectCharacter.getSelectedWorld(this.parentCharacterGui) >= 0 && GuiSelectCharacter.getSelectedWorld(this.parentCharacterGui) < this.getSize();
+		GuiSelectCharacter.getSelectButton(this.parentCharacterGui).enabled = var3;
+		GuiSelectCharacter.getRenameButton(this.parentCharacterGui).enabled = var3;
+		GuiSelectCharacter.getDeleteButton(this.parentCharacterGui).enabled = var3;
+		if(var2 && var3) {
+			this.parentCharacterGui.selectPlayer(var1);
+		}
+
+	}
+
+	protected boolean isSelected(int var1) {
+		return var1 == GuiSelectCharacter.getSelectedWorld(this.parentCharacterGui);
+	}
+
+	protected int getContentHeight() {
+		return GuiSelectCharacter.getSize(this.parentCharacterGui).size() * 36;
+	}
+
+	protected void drawBackground() {
+		this.parentCharacterGui.drawWorldBackground(1);
+	}
+
+	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
+		PlayerInfo info = GuiSelectCharacter.getSize(this.parentCharacterGui).get(var1);
+
+		this.parentCharacterGui.drawString(this.parentCharacterGui.fontRenderer, info.getName(), var2 + 2, var3 + 1, 16777215);
+		this.parentCharacterGui.drawString(this.parentCharacterGui.fontRenderer, "Last played: "
+				+ GuiSelectCharacter.getDateFormatter(this.parentCharacterGui).format(new Date(info.getLastPlayed())), var2 + 2, var3 + 12, 8421504);
+		this.parentCharacterGui.drawString(this.parentCharacterGui.fontRenderer, "HP: " + info.getMaxHealth(), var2 + 2, var3 + 12 + 10, 8421504);
+
+		this.parentCharacterGui.drawPlayer(var1, var2 - 20, var3 + 55);
+	}
+}
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -80,9 +80,21 @@
 					}
 
 					Block var6 = Block.blocksList[var5];
-					this.curBlockDamageMP += var6.blockStrength(this.mc.thePlayer);
-					if(this.field_9441_h % 4.0F == 0.0F && var6 != null) {
-						this.mc.sndManager.playSound(var6.stepSound.func_1145_d(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
+					if (this.mc.thePlayer.getCurrentPlayerStrVsBlock(var6) == 0.0F) {
+						this.isHittingBlock = false;
+						return;
+					}
+
+					float strength = var6.blockStrength(this.mc.thePlayer);
+					if (var5 == Block.wood.blockID && (this.mc.theWorld.getBlockMetadata(var1, var2, var3) & 8) != 0) {
+						strength *= 5.0F;
+					}
+
+					this.curBlockDamageMP += strength;
+					if(this.field_9441_h % (var6.stepSound.isTerraSound() ? this.mc.thePlayer.swingMax : 4.0F) == 0.0F && var6 != null) {
+						this.mc.sndManager.playSound(var6.stepSound.breakSoundDir(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F,
+								var6.stepSound.isTerraSound() ? var6.stepSound.getVolume() : (var6.stepSound.getVolume() + 1.0F) / 8.0F,
+								(var6.stepSound.isTerraSound() ? 1.0F : var6.stepSound.getPitch() * 0.5F));
 					}
 
 					++this.field_9441_h;
@@ -115,10 +127,6 @@
 
 	}
 
-	public float getBlockReachDistance() {
-		return 4.0F;
-	}
-
 	public void func_717_a(World var1) {
 		super.func_717_a(var1);
 	}
@@ -152,8 +160,8 @@
 		return var4;
 	}
 
-	public EntityPlayer createPlayer(World var1) {
-		return new EntityClientPlayerMP(this.mc, var1, this.mc.session, this.netClientHandler);
+	public EntityPlayer createPlayer(World var1, PlayerInfo var2) {
+		return new EntityClientPlayerMP(this.mc, var1, var2, this.netClientHandler);
 	}
 
 	public void attackEntity(EntityPlayer var1, Entity var2) {
--- /dev/null
+++ net/minecraft/src/BlockJungleGrass.java
@@ -1,0 +1,67 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockJungleGrass extends Block {
+	protected BlockJungleGrass(int var1) {
+		super(var1, Material.grassMaterial);
+		this.blockIndexInTexture = 227;
+		this.setTickOnLoad(true);
+	}
+
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if(var5 == 1) {
+			return 0;
+		} else if(var5 == 0) {
+			return 226;
+		} else {
+			Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
+			return var6 != Material.snow && var6 != Material.builtSnow ? 227 : 68;
+		}
+	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		var1.getWorldChunkManager().func_4069_a(var2, var4, 1, 1);
+		double var5 = var1.getWorldChunkManager().temperature[0];
+		double var7 = var1.getWorldChunkManager().humidity[0];
+		int color = ColorizerGrass.getGrassColor(var5, var7);
+
+		int r = (color & 0xFF0000) >> 16;
+		int g = (color & 0x00FF00) >> 8;
+		int b = color & 0x0000FF;
+		r = Math.min((int)(r * 1.5F), 255);
+		g = Math.min((int)(g * 1.5F), 255);
+
+		return r << 16 | g << 8 | b;
+	}
+
+	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+		if(!var1.multiplayerWorld) {
+			if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
+				int var6 = var2 + var5.nextInt(3) - 1;
+				int var7 = var3 + var5.nextInt(5) - 3;
+				int var8 = var4 + var5.nextInt(3) - 1;
+				int var9 = var1.getBlockId(var6, var7 + 1, var8);
+				if(var1.getBlockId(var6, var7, var8) == Block.mud.blockID && var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && Block.lightOpacity[var9] <= 2) {
+					var1.setBlockWithNotify(var6, var7, var8, Block.jungleGrass.blockID);
+				}
+			}
+
+		}
+	}
+
+	public int quantityDropped(Random var1) {
+		return 0;
+	}
+
+	public float blockStrength(EntityPlayer var1) {
+		if (var1.getCurrentPlayerStrVsBlock(this) == 0.0F) {
+			return 0.0F;
+		}
+		return 1.0F;
+	}
+
+	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
+		var1.setBlockWithNotify(var2, var3, var4, Block.mud.blockID);
+	}
+}
--- net/minecraft/src/EnumOptions.java
+++ net/minecraft/src/EnumOptions.java
@@ -13,7 +13,15 @@
 	DIFFICULTY("options.difficulty", false, false),
 	GRAPHICS("options.graphics", false, false),
 	AMBIENT_OCCLUSION("options.ao", false, true),
-	GUI_SCALE("options.guiScale", false, false);
+	GUI_SCALE("options.guiScale", false, false),
+	AUTOPAUSE("options.autopause", false, true),
+	CURSOR_R("options.cursorR", true, false),
+	CURSOR_G("options.cursorG", true, false),
+	CURSOR_B("options.cursorB", true, false),
+	CURSOR_BORDER_R("options.cursorBorderR", true, false),
+	CURSOR_BORDER_G("options.cursorBorderG", true, false),
+	CURSOR_BORDER_B("options.cursorBorderB", true, false),
+	CURSOR_BORDER_A("options.cursorBorderA", true, false);
 
 	private final boolean enumFloat;
 	private final boolean enumBoolean;
--- net/minecraft/src/RecipesIngots.java
+++ net/minecraft/src/RecipesIngots.java
@@ -1,14 +1,13 @@
 package net.minecraft.src;
 
 public class RecipesIngots {
-	private Object[][] recipeItems = new Object[][]{{Block.blockGold, new ItemStack(Item.ingotGold, 9)}, {Block.blockSteel, new ItemStack(Item.ingotIron, 9)}, {Block.blockDiamond, new ItemStack(Item.diamond, 9)}, {Block.blockLapis, new ItemStack(Item.dyePowder, 9, 4)}};
+	private Object[][] recipeItems = new Object[][]{{Block.blockGold, new ItemStack(Block.oreGold)}, {Block.blockSteel, new ItemStack(Block.oreIron)}, {Block.blockDiamond, new ItemStack(Block.oreDiamond)}, {Block.blockLapis, new ItemStack(Item.dyePowder, 1, 4)}, {Block.blockCopper, new ItemStack(Block.oreCopper)}};
 
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
 			Block var3 = (Block)this.recipeItems[var2][0];
 			ItemStack var4 = (ItemStack)this.recipeItems[var2][1];
-			var1.addRecipe(new ItemStack(var3), new Object[]{"###", "###", "###", Character.valueOf('#'), var4});
-			var1.addRecipe(var4, new Object[]{"#", Character.valueOf('#'), var3});
+			var1.addShapelessRecipe(new ItemStack(var3, 5), new ItemStack(Block.cobblestone, 5), var4).requireBlock(Block.stoneOvenIdle);
 		}
 
 	}
--- net/minecraft/src/EntityClientPlayerMP.java
+++ net/minecraft/src/EntityClientPlayerMP.java
@@ -16,7 +16,7 @@
 	private boolean wasSneaking = false;
 	private int field_12242_bI = 0;
 
-	public EntityClientPlayerMP(Minecraft var1, World var2, Session var3, NetClientHandler var4) {
+	public EntityClientPlayerMP(Minecraft var1, World var2, PlayerInfo var3, NetClientHandler var4) {
 		super(var1, var2, var3, 0);
 		this.sendQueue = var4;
 	}
@@ -115,8 +115,8 @@
 		this.sendQueue.addToSendQueue(new Packet3Chat(var1));
 	}
 
-	public void swingItem() {
-		super.swingItem();
+	public void swingItemSilent() {
+		super.swingItemSilent();
 		this.sendQueue.addToSendQueue(new Packet18Animation(this, 1));
 	}
 
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -8,13 +8,12 @@
 	public final int damageReduceAmount;
 	public final int renderIndex;
 
-	public ItemArmor(int var1, int var2, int var3, int var4) {
+	public ItemArmor(int var1, int var2, EnumToolMaterial var3) {
 		super(var1);
-		this.armorLevel = var2;
-		this.armorType = var4;
-		this.renderIndex = var3;
-		this.damageReduceAmount = damageReduceAmountArray[var4];
-		this.setMaxDamage(maxDamageArray[var4] * 3 << var2);
+		this.armorLevel = 0;
+		this.armorType = var2;
+		this.renderIndex = var3.getRenderIndex();
+		this.damageReduceAmount = var3.getDefenseValue(var2);
 		this.maxStackSize = 1;
 	}
 }
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -15,9 +15,10 @@
 	double field_873_j = 1.0D;
 	double field_872_k = 1.0D;
 	int field_871_l = 1;
-	int field_870_m = 12;
+	int field_870_m = 16;
 	int field_869_n = 4;
 	int[][] field_868_o;
+	boolean mahogany;
 
 	void func_521_a() {
 		this.height = (int)((double)this.field_878_e * this.field_876_g);
@@ -116,7 +117,7 @@
 						if(var14 != 0 && var14 != 18) {
 							++var13;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
+							this.worldObj.setBlockAndMetadata(var11[0], var11[1], var11[2], var6, this.mahogany ? 3 : 0);
 							++var13;
 						}
 					}
@@ -191,7 +192,7 @@
 				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
 				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
 				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+				this.worldObj.setBlockAndMetadata(var14[0], var14[1], var14[2], var3, this.mahogany ? 3 : 0);
 			}
 
 		}
@@ -299,7 +300,7 @@
 		int[] var1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
 		int[] var2 = new int[]{this.basePos[0], this.basePos[1] + this.field_878_e - 1, this.basePos[2]};
 		int var3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-		if(var3 != 2 && var3 != 3) {
+		if(var3 != 2 && var3 != 3 && var3 != 98 && var3 != 99) {
 			return false;
 		} else {
 			int var4 = this.func_524_a(var1, var2);
@@ -332,7 +333,10 @@
 		this.basePos[1] = var4;
 		this.basePos[2] = var5;
 		if(this.field_878_e == 0) {
-			this.field_878_e = 5 + this.field_881_b.nextInt(this.field_870_m);
+			this.field_878_e = 3 + this.field_881_b.nextInt(this.field_870_m);
+			if (this.mahogany) {
+				this.field_878_e += 4 + this.field_881_b.nextInt(4);
+			}
 		}
 
 		if(!this.func_519_e()) {
@@ -344,5 +348,10 @@
 			this.func_525_d();
 			return true;
 		}
+	}
+
+	public WorldGenBigTree asMahogany() {
+		this.mahogany = true;
+		return this;
 	}
 }
--- net/minecraft/src/WorldGenLakes.java
+++ net/minecraft/src/WorldGenLakes.java
@@ -80,6 +80,10 @@
 					if(var6[(var8 * 16 + var32) * 8 + var10] && var1.getBlockId(var3 + var8, var4 + var10 - 1, var5 + var32) == Block.dirt.blockID && var1.getSavedLightValue(EnumSkyBlock.Sky, var3 + var8, var4 + var10, var5 + var32) > 0) {
 						var1.setBlock(var3 + var8, var4 + var10 - 1, var5 + var32, Block.grass.blockID);
 					}
+
+					if(var6[(var8 * 16 + var32) * 8 + var10] && var1.getBlockId(var3 + var8, var4 + var10 - 1, var5 + var32) == Block.mud.blockID && var1.getSavedLightValue(EnumSkyBlock.Sky, var3 + var8, var4 + var10, var5 + var32) > 0) {
+						var1.setBlock(var3 + var8, var4 + var10 - 1, var5 + var32, Block.jungleGrass.blockID);
+					}
 				}
 			}
 		}
--- net/minecraft/src/ItemSnowball.java
+++ net/minecraft/src/ItemSnowball.java
@@ -3,12 +3,12 @@
 public class ItemSnowball extends Item {
 	public ItemSnowball(int var1) {
 		super(var1);
-		this.maxStackSize = 16;
+		this.maxStackSize = 99;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
+		var2.playSoundAtEntity(var3, "Item_5", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
 		if(!var2.multiplayerWorld) {
 			var2.entityJoinedWorld(new EntitySnowball(var2, var3));
 		}
--- net/minecraft/src/GuiCreateWorld.java
+++ net/minecraft/src/GuiCreateWorld.java
@@ -15,6 +15,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		this.textboxWorldName.updateCursorCounter();
 		this.textboxSeed.updateCursorCounter();
 	}
@@ -23,12 +24,12 @@
 		StringTranslate var1 = StringTranslate.getInstance();
 		Keyboard.enableRepeatEvents(true);
 		this.controlList.clear();
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, var1.translateKey("selectWorld.create")));
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, var1.translateKey("gui.cancel")));
-		this.textboxWorldName = new GuiTextField(this, this.fontRenderer, this.width / 2 - 100, 60, 200, 20, var1.translateKey("selectWorld.newWorld"));
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, 150, 95, 20, var1.translateKey("selectWorld.create")));
+		this.controlList.add(new GuiButton(1, this.width / 2 + 5, 150, 95, 20, var1.translateKey("gui.back")));
+		this.textboxWorldName = new GuiTextField(this, this.fontRenderer, this.width / 2 - 59, 91, 158, 18, var1.translateKey("selectWorld.newWorld"));
 		this.textboxWorldName.isFocused = true;
 		this.textboxWorldName.setMaxStringLength(32);
-		this.textboxSeed = new GuiTextField(this, this.fontRenderer, this.width / 2 - 100, 116, 200, 20, "");
+		this.textboxSeed = new GuiTextField(this, this.fontRenderer, this.width / 2 - 59, 111, 158, 18, "");
 		this.func_22129_j();
 	}
 
@@ -117,11 +118,13 @@
 	public void drawScreen(int var1, int var2, float var3) {
 		StringTranslate var4 = StringTranslate.getInstance();
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, var4.translateKey("selectWorld.create"), this.width / 2, this.height / 4 - 60 + 20, 16777215);
-		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterName"), this.width / 2 - 100, 47, 10526880);
-		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.resultFolder") + " " + this.folderName, this.width / 2 - 100, 85, 10526880);
-		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterSeed"), this.width / 2 - 100, 104, 10526880);
-		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.seedInfo"), this.width / 2 - 100, 140, 10526880);
+		this.drawGradientRect(this.width / 2 - 110, 80, this.width / 2 + 110, 81, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 110, 139, this.width / 2 + 110, 140, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 110, 81, this.width / 2 - 109, 139, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 + 109, 81, this.width / 2 + 110, 139, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 109, 81, this.width / 2 + 109, 139, 0xC03F4197, 0xC03F4197);
+		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterName"), this.width / 2 - 100, 96, 0xFFFFFF);
+		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterSeed"), this.width / 2 - 100, 116, 0xFFFFFF);
 		this.textboxWorldName.drawTextBox();
 		this.textboxSeed.drawTextBox();
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/src/Gui.java
+++ net/minecraft/src/Gui.java
@@ -95,6 +95,10 @@
 		var1.drawStringWithShadow(var2, var3, var4, var5);
 	}
 
+	public void drawStringRight(FontRenderer var1, String var2, int var3, int var4, int var5) {
+		var1.drawStringWithShadow(var2, var3 - var1.getStringWidth(var2), var4, var5);
+	}
+
 	public void drawTexturedModalRect(int var1, int var2, int var3, int var4, int var5, int var6) {
 		float var7 = 0.00390625F;
 		float var8 = 0.00390625F;
--- net/minecraft/src/WorldGenForest.java
+++ net/minecraft/src/WorldGenForest.java
@@ -4,7 +4,7 @@
 
 public class WorldGenForest extends WorldGenerator {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 5;
+		int var6 = var2.nextInt(5) + 7;
 		boolean var7 = true;
 		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
 			int var8;
@@ -39,8 +39,12 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID || var8 == Block.jungleGrass.blockID || var8 == Block.mud.blockID) && var4 < 128 - var6 - 1) {
+					if (var8 == Block.grass.blockID) {
+						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+					} else if (var8 == Block.jungleGrass.blockID) {
+						var1.setBlock(var3, var4 - 1, var5, Block.mud.blockID);
+					}
 
 					int var16;
 					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,7 +1,10 @@
 package net.minecraft.src;
 
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.chest};
+	private static Block[] blocksEffectiveAgainst = {
+			Block.wood,
+			Block.leaves
+	};
 
 	protected ItemAxe(int var1, EnumToolMaterial var2) {
 		super(var1, 3, var2, blocksEffectiveAgainst);
--- /dev/null
+++ net/minecraft/src/StepSoundDig.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class StepSoundDig extends StepSound {
+	public StepSoundDig(String var1, float var2, float var3) {
+		super(var1, var2, var3);
+	}
+
+	public String stepSoundDir() {
+		return "Dig_";
+	}
+
+	public String breakSoundDir() {
+		return "Dig_";
+	}
+
+	public boolean isTerraSound() {
+		return true;
+	}
+}
--- net/minecraft/src/GuiSlot.java
+++ net/minecraft/src/GuiSlot.java
@@ -188,13 +188,13 @@
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/background.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		float var17 = 32.0F;
-		var16.startDrawingQuads();
-		var16.setColorOpaque_I(2105376);
-		var16.addVertexWithUV((double)this.left, (double)this.bottom, 0.0D, (double)((float)this.left / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
-		var16.addVertexWithUV((double)this.right, (double)this.bottom, 0.0D, (double)((float)this.right / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
-		var16.addVertexWithUV((double)this.right, (double)this.top, 0.0D, (double)((float)this.right / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
-		var16.addVertexWithUV((double)this.left, (double)this.top, 0.0D, (double)((float)this.left / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
-		var16.draw();
+//		var16.startDrawingQuads();
+//		var16.setColorOpaque_I(2105376);
+//		var16.addVertexWithUV((double)this.left, (double)this.bottom, 0.0D, (double)((float)this.left / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
+//		var16.addVertexWithUV((double)this.right, (double)this.bottom, 0.0D, (double)((float)this.right / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
+//		var16.addVertexWithUV((double)this.right, (double)this.top, 0.0D, (double)((float)this.right / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
+//		var16.addVertexWithUV((double)this.left, (double)this.top, 0.0D, (double)((float)this.left / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
+//		var16.draw();
 		var9 = this.width / 2 - 92 - 16;
 		var10 = this.top + 4 - (int)this.amountScrolled;
 		if(this.field_27262_q) {
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,13 +1,17 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis};
+	private static Block[] blocksEffectiveAgainst = {
+			Block.wood,
+			Block.leaves
+	};
 
 	protected ItemPickaxe(int var1, EnumToolMaterial var2) {
 		super(var1, 2, var2, blocksEffectiveAgainst);
+		this.blocksIneffective = true;
 	}
 
 	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.toolMaterial.getHarvestLevel() == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.blockLapis && var1 != Block.oreLapis ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.blockMaterial == Material.rock ? true : var1.blockMaterial == Material.iron) : this.toolMaterial.getHarvestLevel() >= 2) : this.toolMaterial.getHarvestLevel() >= 1) : this.toolMaterial.getHarvestLevel() >= 1) : this.toolMaterial.getHarvestLevel() >= 2) : this.toolMaterial.getHarvestLevel() >= 2);
+		return var1 == Block.obsidian ? this.toolMaterial.getHarvestLevel() == 2 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.blockLapis && var1 != Block.oreLapis ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.blockMaterial == Material.rock ? true : var1.blockMaterial == Material.iron) : this.toolMaterial.getHarvestLevel() >= 1) : this.toolMaterial.getHarvestLevel() >= 1) : this.toolMaterial.getHarvestLevel() >= 1) : this.toolMaterial.getHarvestLevel() >= 1) : this.toolMaterial.getHarvestLevel() >= 1);
 	}
 }
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -1,18 +1,22 @@
 package net.minecraft.src;
 
+import org.lwjgl.input.Keyboard;
+
 import java.util.ArrayList;
 import java.util.Random;
 
 public class Block {
-	public static final StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
-	public static final StepSound soundWoodFootstep = new StepSound("wood", 1.0F, 1.0F);
-	public static final StepSound soundGravelFootstep = new StepSound("gravel", 1.0F, 1.0F);
-	public static final StepSound soundGrassFootstep = new StepSound("grass", 1.0F, 1.0F);
-	public static final StepSound soundStoneFootstep = new StepSound("stone", 1.0F, 1.0F);
-	public static final StepSound soundMetalFootstep = new StepSound("stone", 1.0F, 1.5F);
-	public static final StepSound soundGlassFootstep = new StepSoundStone("stone", 1.0F, 1.0F);
-	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
-	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
+	public static final StepSound soundPowderFootstep = new StepSoundDig("stone", 1.0F, 1.0F);
+	public static final StepSound soundWoodFootstep = new StepSoundDig("wood", 1.0F, 1.0F);
+	public static final StepSound soundGravelFootstep = new StepSoundDig("gravel", 1.0F, 1.0F);
+	public static final StepSound soundGrassFootstep = new StepSoundGrass("grass", 1.0F, 1.0F);
+	public static final StepSound soundStoneFootstep = new StepSoundTink("stone", 1.0F, 1.0F);
+	public static final StepSound soundMetalFootstep = new StepSoundTink("stone", 1.0F, 1.5F);
+	public static final StepSound soundGlassFootstep = new StepSoundShatter("stone", 1.0F, 1.0F);
+	public static final StepSound soundClothFootstep = new StepSoundDig("cloth", 1.0F, 1.0F);
+	public static final StepSound soundSandFootstep = new StepSoundDig("sand", 1.0F, 1.0F);
+	public static final StepSound soundSnowFootstep = new StepSoundSnow("cloth", 1.0F, 1.0F);
+	public static final StepSound soundRailFootstep = new StepSoundRail("stone", 1.0F, 1.5F);
 	public static final Block[] blocksList = new Block[256];
 	public static final boolean[] tickOnLoad = new boolean[256];
 	public static final boolean[] opaqueCubeLookup = new boolean[256];
@@ -35,8 +39,8 @@
 	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand");
 	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel");
 	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold");
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(1.5F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(1.5F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").disableNeighborNotifyOnMetadataChange();
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
@@ -44,11 +48,11 @@
 	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
 	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis");
 	public static final Block dispenser = (new BlockDispenser(23)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("dispenser").disableNeighborNotifyOnMetadataChange();
-	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone");
+	public static final Block sandStone = (new Block(24, 208, Material.rock)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone");
 	public static final Block musicBlock = (new BlockNote(25)).setHardness(0.8F).setBlockName("musicBlock").disableNeighborNotifyOnMetadataChange();
 	public static final Block blockBed = (new BlockBed(26)).setHardness(0.2F).setBlockName("bed").disableStats().disableNeighborNotifyOnMetadataChange();
-	public static final Block railPowered = (new BlockRail(27, 179, true)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("goldenRail").disableNeighborNotifyOnMetadataChange();
-	public static final Block railDetector = (new BlockDetectorRail(28, 195)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("detectorRail").disableNeighborNotifyOnMetadataChange();
+	public static final Block railPowered = (new BlockRail(27, 179, true)).setHardness(0.7F).setStepSound(soundRailFootstep).setBlockName("goldenRail").disableNeighborNotifyOnMetadataChange();
+	public static final Block railDetector = (new BlockDetectorRail(28, 195)).setHardness(0.7F).setStepSound(soundRailFootstep).setBlockName("detectorRail").disableNeighborNotifyOnMetadataChange();
 	public static final Block pistonStickyBase = (new BlockPistonBase(29, 106, true)).setBlockName("pistonStickyBase").disableNeighborNotifyOnMetadataChange();
 	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web");
 	public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass");
@@ -61,8 +65,8 @@
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("rose");
 	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F).setBlockName("mushroom");
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
-	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold");
-	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron");
+	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("blockGold");
+	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("blockIron");
 	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
 	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick");
@@ -77,16 +81,16 @@
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").disableNeighborNotifyOnMetadataChange();
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setBlockName("redstoneDust").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
-	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond");
+	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("blockDiamond");
 	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench");
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("crops").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("farmland");
-	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("furnace").disableNeighborNotifyOnMetadataChange();
+	public static final Block stoneOvenIdle = (new BlockFurnace(61, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setBlockName("furnace").disableNeighborNotifyOnMetadataChange();
 	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setBlockName("furnace").disableNeighborNotifyOnMetadataChange();
 	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("doorWood").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setBlockName("ladder").disableNeighborNotifyOnMetadataChange();
-	public static final Block rail = (new BlockRail(66, 128, false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("rail").disableNeighborNotifyOnMetadataChange();
+	public static final Block rail = (new BlockRail(66, 128, false)).setHardness(0.7F).setStepSound(soundRailFootstep).setBlockName("rail").disableNeighborNotifyOnMetadataChange();
 	public static final Block stairCompactCobblestone = (new BlockStairs(67, cobblestone)).setBlockName("stairsStone").disableNeighborNotifyOnMetadataChange();
 	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("sign").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("lever").disableNeighborNotifyOnMetadataChange();
@@ -98,16 +102,16 @@
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("notGate").disableNeighborNotifyOnMetadataChange();
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setBlockName("notGate").disableNeighborNotifyOnMetadataChange();
 	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("button").disableNeighborNotifyOnMetadataChange();
-	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setBlockName("snow");
+	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundSnowFootstep).setBlockName("snow");
 	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice");
-	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow");
+	public static final Block blockSnow = (new Block(80, 66, Material.builtSnow)).setHardness(0.5F).setStepSound(soundSnowFootstep).setBlockName("snow");
 	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setBlockName("cactus");
 	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay");
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").disableNeighborNotifyOnMetadataChange();
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence").disableNeighborNotifyOnMetadataChange();
 	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("pumpkin").disableNeighborNotifyOnMetadataChange();
-	public static final Block netherrack = (new BlockNetherrack(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setBlockName("hellrock");
+	public static final Block netherrack = (new BlockNetherrack(87, 103)).setHardness(0.4F).setStepSound(soundSandFootstep).setBlockName("hellrock");
 	public static final Block slowSand = (new BlockSoulSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("hellsand");
 	public static final Block glowStone = (new BlockGlowStone(89, 105, Material.rock)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setBlockName("lightgem");
 	public static final BlockPortal portal = (BlockPortal)(new BlockPortal(90, 14)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F).setBlockName("portal");
@@ -117,6 +121,12 @@
 	public static final Block redstoneRepeaterActive = (new BlockRedstoneRepeater(94, true)).setHardness(0.0F).setLightValue(10.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("diode").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block lockedChest = (new BlockLockedChest(95)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("lockedchest").setTickOnLoad(true).disableNeighborNotifyOnMetadataChange();
 	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().disableNeighborNotifyOnMetadataChange();
+	public static final Block packedIce = (new Block(97, 67, Material.rock)).setSlipperiness(0.8F).setHardness(1.5F).setResistance(10.0F).setStepSound(soundSnowFootstep).setBlockName("ice");
+	public static final Block mud = (new BlockDirt(98, 226)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("mud");
+	public static final BlockJungleGrass jungleGrass = (BlockJungleGrass)(new BlockJungleGrass(99)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
+	public static final Block oreCopper = (new BlockOre(100, 224)).setHardness(1.5F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCopper");
+	public static final Block blockCopper = (new BlockOreStorage(101, 211)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockCopper");
+	public static final Block lifeCrystal = (new BlockLifeCrystal(102, 148)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundGlassFootstep).setBlockName("lifeCrystal");
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
@@ -188,6 +198,11 @@
 		return this;
 	}
 
+	protected Block setSlipperiness(float var1) {
+		this.slipperiness = var1;
+		return this;
+	}
+
 	public boolean renderAsNormalBlock() {
 		return true;
 	}
@@ -567,6 +582,7 @@
 		Item.itemsList[leaves.blockID] = (new ItemLeaves(leaves.blockID - 256)).setItemName("leaves");
 		Item.itemsList[pistonBase.blockID] = new ItemPiston(pistonBase.blockID - 256);
 		Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
+		Item.itemsList[lifeCrystal.blockID] = new ItemLifeCrystal(lifeCrystal.blockID - 256);
 
 		for(int var0 = 0; var0 < 256; ++var0) {
 			if(blocksList[var0] != null && Item.itemsList[var0] == null) {
--- net/minecraft/src/InventoryCraftResult.java
+++ net/minecraft/src/InventoryCraftResult.java
@@ -30,7 +30,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public void onInventoryChanged() {
--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -3,12 +3,14 @@
 import java.awt.Toolkit;
 import java.awt.datatransfer.DataFlavor;
 import java.awt.datatransfer.Transferable;
+import java.awt.image.BufferedImage;
 import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.glu.GLU;
 
 public class GuiScreen extends Gui {
 	protected Minecraft mc;
@@ -19,6 +21,16 @@
 	protected FontRenderer fontRenderer;
 	public GuiParticle field_25091_h;
 	private GuiButton selectedButton = null;
+	private static float logoRotation;
+	private static float logoRotationPrev;
+	private static float logoRotationSpeed = 3.0F;
+	private static float logoRotationDirection = -1.0F;
+	private static float logoScale = 1.0F;
+	private static float logoScalePrev = 1.0F;
+	private static float logoScaleSpeed = 3.0F;
+	private static float logoScaleDirection = -1.0F;
+	private static int panoramaCounter;
+	private static int panoramaViewport;
 
 	public void drawScreen(int var1, int var2, float var3) {
 		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
@@ -26,6 +38,11 @@
 			var5.drawButton(this.mc, var1, var2);
 		}
 
+		if (panoramaCounter < 40) {
+			boolean quickSplash = this.mc.gameSettings.musicVolume == 0.0F || this.mc.gameSettings.titleMusicType > 0;
+			int fadeColor = (int)(Math.min(Math.max(1.0F - (panoramaCounter + var3) * 3.0F / (quickSplash ? 75.0F : 120.0F), 0.0F), 1.0F) * 255.0F) << 24;
+			this.drawGradientRect(0, 0, this.width, this.height, fadeColor, fadeColor);
+		}
 	}
 
 	protected void keyTyped(char var1, int var2) {
@@ -55,7 +72,7 @@
 				GuiButton var5 = (GuiButton)this.controlList.get(var4);
 				if(var5.mousePressed(this.mc, var1, var2)) {
 					this.selectedButton = var5;
-					this.mc.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
+					this.mc.sndManager.playSoundFX("Menu_Tick", 1.0F, 1.0F);
 					this.actionPerformed(var5);
 				}
 			}
@@ -88,11 +105,22 @@
 	}
 
 	public void handleInput() {
+		if (Mouse.isGrabbed()) {
+			return;
+		}
+
 		while(Mouse.next()) {
+			if (this.ingameFocus() && !this.mc.gameSettings.autopause && Mouse.getEventButtonState() && Mouse.getEventButton() == 2) {
+				this.mc.mouseHelper.grabMouseCursor();
+				this.mc.resetLeftClicks();
+			}
 			this.handleMouseInput();
 		}
 
 		while(Keyboard.next()) {
+			if (this.ingameFocus() && this.mc.thePlayer != null) {
+				this.mc.thePlayer.handleKeyPress(Keyboard.getEventKey(), Keyboard.getEventKeyState());
+			}
 			this.handleKeyboardInput();
 		}
 
@@ -126,6 +154,43 @@
 	}
 
 	public void updateScreen() {
+		++panoramaCounter;
+
+		logoRotationPrev = logoRotation;
+		logoScalePrev = logoScale;
+
+		for (int i = 0; i < 3; i++) {
+			if ((double)logoRotation > 0.09D) {
+				logoRotation += logoRotationSpeed * 0.0016F;
+				if (logoRotationSpeed > 0F) {
+					logoRotationSpeed = 0F;
+				}
+			}
+
+			logoRotation += logoRotationSpeed * 4E-06F;
+			if ((double)logoRotation > 0.08D) {
+				logoRotationDirection = -1F;
+			} else if ((double)logoRotation < -0.08D) {
+				logoRotationDirection = 1F;
+			}
+			if (logoRotationSpeed < 20F && logoRotationDirection == 1F) {
+				logoRotationSpeed += 1F;
+			} else if (logoRotationSpeed > -20F && logoRotationDirection == -1F) {
+				logoRotationSpeed -= 1F;
+			}
+
+			logoScale += logoScaleSpeed * 9E-06F;
+			if ((double)logoScale > 1.35D) {
+				logoScaleDirection = -1F;
+			} else if (logoScale < 1F) {
+				logoScaleDirection = 1F;
+			}
+			if (logoScaleSpeed < 50F && logoScaleDirection == 1F) {
+				logoScaleSpeed += 1F;
+			} else if (logoScaleSpeed > -50F && logoScaleDirection == -1F) {
+				logoScaleSpeed -= 1F;
+			}
+		}
 	}
 
 	public void onGuiClosed() {
@@ -136,10 +201,9 @@
 	}
 
 	public void drawWorldBackground(int var1) {
-		if(this.mc.theWorld != null) {
-			this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
-		} else {
-			this.drawBackground(var1);
+		if(this.mc.theWorld == null) {
+			this.renderSkybox(this.mc.timer.renderPartialTicks);
+			if (var1 == 0) this.drawLogo(this.mc.timer.renderPartialTicks);
 		}
 
 	}
@@ -168,5 +232,203 @@
 	}
 
 	public void selectNextField() {
+	}
+
+	public boolean ingameFocus() {
+		return false;
+	}
+
+	private static float calculateCelestialAngle(long var1, float var3) {
+		int var4 = (int)(var1 % 24000L);
+		float var5 = ((float)var4 + var3) / 24000.0F - 0.25F;
+		if(var5 < 0.0F) {
+			++var5;
+		}
+
+		if(var5 > 1.0F) {
+			--var5;
+		}
+
+		float var6 = var5;
+		var5 = 1.0F - (float)((Math.cos((double)var5 * Math.PI) + 1.0D) / 2.0D);
+		var5 = var6 + (var5 - var6) / 3.0F;
+		return var5;
+	}
+
+	private static float calculateSunlight(long var1) {
+		float var2 = calculateCelestialAngle(var1, 0.0F);
+		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
+		if(var3 < 0.0F) {
+			var3 = 0.0F;
+		}
+
+		if(var3 > 1.0F) {
+			var3 = 1.0F;
+		}
+
+		return 1.0F - var3;
+	}
+
+	private void drawPanorama(float var3, boolean night) {
+		Tessellator var4 = Tessellator.instance;
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPushMatrix();
+		GL11.glLoadIdentity();
+		GLU.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPushMatrix();
+		GL11.glLoadIdentity();
+		GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
+		GL11.glDisable(GL11.GL_CULL_FACE);
+		GL11.glDepthMask(false);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		byte var5 = 8;
+
+		for(int var6 = 0; var6 < var5 * var5; ++var6) {
+			GL11.glPushMatrix();
+			float var7 = ((float)(var6 % var5) / (float)var5 - 0.5F) / 64.0F;
+			float var8 = ((float)(var6 / var5) / (float)var5 - 0.5F) / 64.0F;
+			float var9 = 0.0F;
+			GL11.glTranslatef(var7, var8, var9);
+			GL11.glRotatef(-((float)panoramaCounter + var3) * 0.2F, 0.0F, 1.0F, 0.0F);
+
+			for(int var10 = 0; var10 < 6; ++var10) {
+				GL11.glPushMatrix();
+				if(var10 == 1) {
+					GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
+				}
+
+				if(var10 == 2) {
+					GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
+				}
+
+				if(var10 == 3) {
+					GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
+				}
+
+				if(var10 == 4) {
+					GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
+				}
+
+				if(var10 == 5) {
+					GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
+				}
+
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/bg/" + (night ? "night" : "day") + var10 + ".png"));
+				var4.startDrawingQuads();
+				var4.setColorRGBA_I(16777215, (night ? 255 : (int)(calculateSunlight((long)((panoramaCounter + var3) * 50.0F)) * 255.0F)) / (var6 + 1));
+				float var11 = 0.0F;
+				var4.addVertexWithUV(-1.0D, -1.0D, 1.0D, (double)(0.0F + var11), (double)(0.0F + var11));
+				var4.addVertexWithUV(1.0D, -1.0D, 1.0D, (double)(1.0F - var11), (double)(0.0F + var11));
+				var4.addVertexWithUV(1.0D, 1.0D, 1.0D, (double)(1.0F - var11), (double)(1.0F - var11));
+				var4.addVertexWithUV(-1.0D, 1.0D, 1.0D, (double)(0.0F + var11), (double)(1.0F - var11));
+				var4.draw();
+				GL11.glPopMatrix();
+			}
+
+			GL11.glPopMatrix();
+			GL11.glColorMask(true, true, true, false);
+		}
+
+		GL11.glColorMask(true, true, true, true);
+		GL11.glMatrixMode(GL11.GL_PROJECTION);
+		GL11.glPopMatrix();
+		GL11.glMatrixMode(GL11.GL_MODELVIEW);
+		GL11.glPopMatrix();
+		GL11.glDepthMask(true);
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+	}
+
+	private void rotateAndBlurSkybox() {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, panoramaViewport);
+		GL11.glCopyTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 0, 0, 256, 256);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glColorMask(true, true, true, false);
+		Tessellator var2 = Tessellator.instance;
+		var2.startDrawingQuads();
+		byte var3 = 3;
+
+		for(int var4 = 0; var4 < var3; ++var4) {
+			var2.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F / (float)(var4 + 1));
+			int var5 = this.width;
+			int var6 = this.height;
+			float var7 = (float)(var4 - var3 / 2) / 256.0F;
+			var2.addVertexWithUV((double)var5, (double)var6, (double)this.zLevel, (double)(0.0F + var7), 0.0D);
+			var2.addVertexWithUV((double)var5, 0.0D, (double)this.zLevel, (double)(1.0F + var7), 0.0D);
+			var2.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, (double)(1.0F + var7), 1.0D);
+			var2.addVertexWithUV(0.0D, (double)var6, (double)this.zLevel, (double)(0.0F + var7), 1.0D);
+		}
+
+		var2.draw();
+		GL11.glColorMask(true, true, true, true);
+	}
+
+	private void renderSkybox(float var3) {
+		if (panoramaViewport == 0) {
+			panoramaViewport = this.mc.renderEngine.allocateAndSetupTexture(new BufferedImage(256, 256, 2));
+		}
+
+		GL11.glViewport(0, 0, 256, 256);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glDisable(GL11.GL_ALPHA_TEST);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.drawPanorama(var3, true);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glPushMatrix();
+		GL11.glScalef(0.9F, 0.9F, 0.9F);
+		this.drawPanorama(var3, false);
+		GL11.glPopMatrix();
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		this.rotateAndBlurSkybox();
+		GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
+		Tessellator var4 = Tessellator.instance;
+		var4.startDrawingQuads();
+		float var5 = this.width > this.height ? 120.0F / (float)this.width : 120.0F / (float)this.height;
+		float var6 = (float)this.height * var5 / 256.0F;
+		float var7 = (float)this.width * var5 / 256.0F;
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+		var4.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
+		int var8 = this.width;
+		int var9 = this.height;
+		var4.addVertexWithUV(0.0D, (double)var9, (double)this.zLevel, (double)(0.5F - var6), (double)(0.5F + var7));
+		var4.addVertexWithUV((double)var8, (double)var9, (double)this.zLevel, (double)(0.5F - var6), (double)(0.5F - var7));
+		var4.addVertexWithUV((double)var8, 0.0D, (double)this.zLevel, (double)(0.5F + var6), (double)(0.5F - var7));
+		var4.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, (double)(0.5F + var6), (double)(0.5F + var7));
+		var4.draw();
+	}
+
+	private void drawLogo(float var3) {
+		boolean betaria = this.mc.gameSettings.betariaLogo;
+		int var5 = betaria ? 224 : 274;
+		int var6 = this.width / 2 - var5 / 2;
+		byte var7 = 20;
+		float logoRotation = logoRotationPrev + (GuiScreen.logoRotation - logoRotationPrev) * var3;
+		float logoScale = (logoScalePrev + (GuiScreen.logoScale - logoScalePrev) * var3) - 0.25F;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/mclogo.png"));
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glPushMatrix();
+		GL11.glTranslatef((float)(this.width / 2), var7 + 22, 0.0F);
+		GL11.glRotatef((float)Math.toDegrees(logoRotation), 0.0F, 0.0F, 1.0F);
+		GL11.glScalef(logoScale, logoScale, logoScale);
+		if (betaria) {
+			this.drawTexturedModalRect(-var5 / 2, -29, 0, 100, 224, 50);
+		} else {
+			this.drawTexturedModalRect(-var5 / 2, -22, 0, 0, 155, 44);
+			this.drawTexturedModalRect(155 - var5 / 2, -22, 0, 50, 155, 44);
+		}
+		GL11.glPopMatrix();
 	}
 }
--- net/minecraft/src/EntityZombie.java
+++ net/minecraft/src/EntityZombie.java
@@ -5,18 +5,7 @@
 		super(var1);
 		this.texture = "/mob/zombie.png";
 		this.moveSpeed = 0.5F;
-		this.attackStrength = 5;
-	}
-
-	public void onLivingUpdate() {
-		if(this.worldObj.isDaytime()) {
-			float var1 = this.getEntityBrightness(1.0F);
-			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
-				this.fire = 300;
-			}
-		}
-
-		super.onLivingUpdate();
+		this.attackStrength = 15;
 	}
 
 	protected String getLivingSound() {
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -6,6 +6,8 @@
 	private int baseIndexInPNG;
 	int[] adjacentTreeBlocks;
 
+	public static boolean instantUpdate;
+
 	protected BlockLeaves(int var1, int var2) {
 		super(var1, var2, Material.leaves, false);
 		this.baseIndexInPNG = var2;
@@ -13,20 +15,34 @@
 	}
 
 	public int getRenderColor(int var1) {
-		return (var1 & 1) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((var1 & 2) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.func_31073_c());
+		if ((var1 & 3) == 1) return ColorizerFoliage.getFoliageColorPine();
+		if ((var1 & 3) == 2) return ColorizerFoliage.getFoliageColorBirch();
+		if ((var1 & 3) == 3) return ColorizerFoliage.getFoliageColorMahogany();
+		return (var1 & 3) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((var1 & 3) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.func_31073_c());
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 1) == 1) {
+		if((var5 & 3) == 1) {
 			return ColorizerFoliage.getFoliageColorPine();
-		} else if((var5 & 2) == 2) {
+		} else if((var5 & 3) == 2) {
 			return ColorizerFoliage.getFoliageColorBirch();
 		} else {
 			var1.getWorldChunkManager().func_4069_a(var2, var4, 1, 1);
 			double var6 = var1.getWorldChunkManager().temperature[0];
 			double var8 = var1.getWorldChunkManager().humidity[0];
-			return ColorizerFoliage.getFoliageColor(var6, var8);
+			int color = ColorizerFoliage.getFoliageColor(var6, var8);
+
+			if ((var5 & 3) == 3) {
+				int r = (color & 0xFF0000) >> 16;
+				int g = (color & 0x00FF00) >> 8;
+				int b = color & 0x0000FF;
+				r = Math.min((int)(r * 1.5F), 255);
+				g = Math.min((int)(g * 1.5F), 255);
+				color = r << 16 | g << 8 | b;
+			}
+
+			return color;
 		}
 	}
 
@@ -146,10 +162,23 @@
 	private void removeLeaves(World var1, int var2, int var3, int var4) {
 		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
 		var1.setBlockWithNotify(var2, var3, var4, 0);
+
+		if (instantUpdate) {
+			for (int x = var2 - 1; x <= var2 + 1; x++) {
+				for (int y = var3 - 1; y <= var3 + 1; y++) {
+					for (int z = var4 - 1; z <= var4 + 1; z++) {
+						if (x == var2 && y == var3 && z == var3) continue;
+						if (var1.getBlockId(x, y, z) == this.blockID) {
+							this.updateTick(var1, x, y, z, var1.rand);
+						}
+					}
+				}
+			}
+		}
 	}
 
 	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
+		return var1.nextInt(40) == 0 ? 1 : 0;
 	}
 
 	public int idDropped(int var1, Random var2) {
@@ -164,10 +193,6 @@
 			super.harvestBlock(var1, var2, var3, var4, var5, var6);
 		}
 
-	}
-
-	protected int damageDropped(int var1) {
-		return var1 & 3;
 	}
 
 	public boolean isOpaqueCube() {
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -31,7 +31,7 @@
 	public static Item axeDiamond = (new ItemAxe(23, EnumToolMaterial.EMERALD)).setIconCoord(3, 7).setItemName("hatchetDiamond");
 	public static Item stick = (new Item(24)).setIconCoord(5, 3).setFull3D().setItemName("stick");
 	public static Item bowlEmpty = (new Item(25)).setIconCoord(7, 4).setItemName("bowl");
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconCoord(8, 4).setItemName("mushroomStew");
+	public static Item bowlSoup = (new ItemSoup(26, 100)).setIconCoord(8, 4).setItemName("mushroomStew");
 	public static Item swordGold = (new ItemSword(27, EnumToolMaterial.GOLD)).setIconCoord(4, 4).setItemName("swordGold");
 	public static Item shovelGold = (new ItemSpade(28, EnumToolMaterial.GOLD)).setIconCoord(4, 5).setItemName("shovelGold");
 	public static Item pickaxeGold = (new ItemPickaxe(29, EnumToolMaterial.GOLD)).setIconCoord(4, 6).setItemName("pickaxeGold");
@@ -46,30 +46,30 @@
 	public static Item hoeGold = (new ItemHoe(38, EnumToolMaterial.GOLD)).setIconCoord(4, 8).setItemName("hoeGold");
 	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconCoord(9, 0).setItemName("seeds");
 	public static Item wheat = (new Item(40)).setIconCoord(9, 1).setItemName("wheat");
-	public static Item bread = (new ItemFood(41, 5, false)).setIconCoord(9, 2).setItemName("bread");
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconCoord(0, 0).setItemName("helmetCloth");
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconCoord(0, 1).setItemName("chestplateCloth");
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconCoord(0, 2).setItemName("leggingsCloth");
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconCoord(0, 3).setItemName("bootsCloth");
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconCoord(1, 0).setItemName("helmetChain");
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconCoord(1, 1).setItemName("chestplateChain");
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconCoord(1, 2).setItemName("leggingsChain");
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconCoord(1, 3).setItemName("bootsChain");
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconCoord(2, 0).setItemName("helmetIron");
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconCoord(2, 1).setItemName("chestplateIron");
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconCoord(2, 2).setItemName("leggingsIron");
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconCoord(2, 3).setItemName("bootsIron");
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconCoord(3, 0).setItemName("helmetDiamond");
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconCoord(3, 1).setItemName("chestplateDiamond");
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconCoord(3, 2).setItemName("leggingsDiamond");
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconCoord(3, 3).setItemName("bootsDiamond");
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconCoord(4, 0).setItemName("helmetGold");
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconCoord(4, 1).setItemName("chestplateGold");
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
+	public static Item bread = (new ItemFood(41, 80, false)).setIconCoord(9, 2).setItemName("bread");
+	public static Item helmetLeather = (new ItemArmor(42, 0, EnumToolMaterial.WOOD)).setIconCoord(0, 0).setItemName("helmetCloth");
+	public static Item plateLeather = (new ItemArmor(43, 1, EnumToolMaterial.WOOD)).setIconCoord(0, 1).setItemName("chestplateCloth");
+	public static Item legsLeather = (new ItemArmor(44, 2, EnumToolMaterial.WOOD)).setIconCoord(0, 2).setItemName("leggingsCloth");
+	public static Item bootsLeather = (new ItemArmor(45, 3, EnumToolMaterial.WOOD)).setIconCoord(0, 3).setItemName("bootsCloth");
+	public static Item helmetChain = (new ItemArmor(46, 0, EnumToolMaterial.STONE)).setIconCoord(1, 0).setItemName("helmetChain");
+	public static Item plateChain = (new ItemArmor(47, 1, EnumToolMaterial.STONE)).setIconCoord(1, 1).setItemName("chestplateChain");
+	public static Item legsChain = (new ItemArmor(48, 2, EnumToolMaterial.STONE)).setIconCoord(1, 2).setItemName("leggingsChain");
+	public static Item bootsChain = (new ItemArmor(49, 3, EnumToolMaterial.STONE)).setIconCoord(1, 3).setItemName("bootsChain");
+	public static Item helmetSteel = (new ItemArmor(50, 0, EnumToolMaterial.IRON)).setIconCoord(2, 0).setItemName("helmetIron");
+	public static Item plateSteel = (new ItemArmor(51, 1, EnumToolMaterial.IRON)).setIconCoord(2, 1).setItemName("chestplateIron");
+	public static Item legsSteel = (new ItemArmor(52, 2, EnumToolMaterial.IRON)).setIconCoord(2, 2).setItemName("leggingsIron");
+	public static Item bootsSteel = (new ItemArmor(53, 3, EnumToolMaterial.IRON)).setIconCoord(2, 3).setItemName("bootsIron");
+	public static Item helmetDiamond = (new ItemArmor(54, 0, EnumToolMaterial.EMERALD)).setIconCoord(3, 0).setItemName("helmetDiamond");
+	public static Item plateDiamond = (new ItemArmor(55, 1, EnumToolMaterial.EMERALD)).setIconCoord(3, 1).setItemName("chestplateDiamond");
+	public static Item legsDiamond = (new ItemArmor(56, 2, EnumToolMaterial.EMERALD)).setIconCoord(3, 2).setItemName("leggingsDiamond");
+	public static Item bootsDiamond = (new ItemArmor(57, 3, EnumToolMaterial.EMERALD)).setIconCoord(3, 3).setItemName("bootsDiamond");
+	public static Item helmetGold = (new ItemArmor(58, 0, EnumToolMaterial.GOLD)).setIconCoord(4, 0).setItemName("helmetGold");
+	public static Item plateGold = (new ItemArmor(59, 1, EnumToolMaterial.GOLD)).setIconCoord(4, 1).setItemName("chestplateGold");
+	public static Item legsGold = (new ItemArmor(60, 2, EnumToolMaterial.GOLD)).setIconCoord(4, 2).setItemName("leggingsGold");
+	public static Item bootsGold = (new ItemArmor(61, 3, EnumToolMaterial.GOLD)).setIconCoord(4, 3).setItemName("bootsGold");
 	public static Item flint = (new Item(62)).setIconCoord(6, 0).setItemName("flint");
-	public static Item porkRaw = (new ItemFood(63, 3, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
-	public static Item porkCooked = (new ItemFood(64, 8, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
+	public static Item porkRaw = (new ItemFood(63, 25, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
+	public static Item porkCooked = (new ItemFood(64, 50, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
 	public static Item painting = (new ItemPainting(65)).setIconCoord(10, 1).setItemName("painting");
 	public static Item appleGold = (new ItemFood(66, 42, false)).setIconCoord(11, 0).setItemName("appleGold");
 	public static Item sign = (new ItemSign(67)).setIconCoord(10, 2).setItemName("sign");
@@ -98,21 +98,26 @@
 	public static Item fishingRod = (new ItemFishingRod(90)).setIconCoord(5, 4).setItemName("fishingRod");
 	public static Item pocketSundial = (new Item(91)).setIconCoord(6, 4).setItemName("clock");
 	public static Item lightStoneDust = (new Item(92)).setIconCoord(9, 4).setItemName("yellowDust");
-	public static Item fishRaw = (new ItemFood(93, 2, false)).setIconCoord(9, 5).setItemName("fishRaw");
-	public static Item fishCooked = (new ItemFood(94, 5, false)).setIconCoord(10, 5).setItemName("fishCooked");
+	public static Item fishRaw = (new ItemFood(93, 15, false)).setIconCoord(9, 5).setItemName("fishRaw");
+	public static Item fishCooked = (new ItemFood(94, 50, false)).setIconCoord(10, 5).setItemName("fishCooked");
 	public static Item dyePowder = (new ItemDye(95)).setIconCoord(14, 4).setItemName("dyePowder");
 	public static Item bone = (new Item(96)).setIconCoord(12, 1).setItemName("bone").setFull3D();
 	public static Item sugar = (new Item(97)).setIconCoord(13, 0).setItemName("sugar").setFull3D();
 	public static Item cake = (new ItemReed(98, Block.cake)).setMaxStackSize(1).setIconCoord(13, 1).setItemName("cake");
 	public static Item bed = (new ItemBed(99)).setMaxStackSize(1).setIconCoord(13, 2).setItemName("bed");
 	public static Item redstoneRepeater = (new ItemReed(100, Block.redstoneRepeaterIdle)).setIconCoord(6, 5).setItemName("diode");
-	public static Item cookie = (new ItemCookie(101, 1, false, 8)).setIconCoord(12, 5).setItemName("cookie");
+	public static Item cookie = (new ItemCookie(101, 25, false, 8)).setIconCoord(12, 5).setItemName("cookie");
 	public static ItemMap mapItem = (ItemMap)(new ItemMap(102)).setIconCoord(12, 3).setItemName("map");
 	public static ItemShears shears = (ItemShears)(new ItemShears(103)).setIconCoord(13, 5).setItemName("shears");
+	public static Item ingotCopper = (new Item(104)).setIconCoord(7, 7).setItemName("ingotCopper");
+	public static Item shortswordStone = (new ItemShortsword(105, EnumToolMaterial.STONE)).setIconCoord(1, 9).setItemName("shortswordStone");
+	public static Item shortswordSteel = (new ItemShortsword(106, EnumToolMaterial.IRON)).setIconCoord(2, 9).setItemName("shortswordIron");
+	public static Item shortswordDiamond = (new ItemShortsword(107, EnumToolMaterial.EMERALD)).setIconCoord(3, 9).setItemName("shortswordDiamond");
+	public static Item shortswordGold = (new ItemShortsword(108, EnumToolMaterial.GOLD)).setIconCoord(4, 9).setItemName("shortswordGold");
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
 	public final int shiftedIndex;
-	protected int maxStackSize = 64;
+	protected int maxStackSize = 250;
 	private int maxDamage = 0;
 	protected int iconIndex;
 	protected boolean bFull3D = false;
@@ -204,6 +209,14 @@
 
 	public int getDamageVsEntity(Entity var1) {
 		return 1;
+	}
+
+	public int getSpeedVsEntity(Entity var1) {
+		return 10;
+	}
+
+	public float getReach() {
+		return 4.0F;
 	}
 
 	public boolean canHarvestBlock(Block var1) {
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -3,16 +3,16 @@
 import java.util.Random;
 
 public class MapGenCaves extends MapGenBase {
-	protected void func_870_a(int var1, int var2, byte[] var3, double var4, double var6, double var8) {
-		this.releaseEntitySkin(var1, var2, var3, var4, var6, var8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+	protected void func_870_a(long var0, int var1, int var2, byte[] var3, double var4, double var6, double var8) {
+		this.releaseEntitySkin(var0, var1, var2, var3, var4, var6, var8, 4.0F + this.rand.nextFloat() * 4.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void releaseEntitySkin(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
+	protected void releaseEntitySkin(long var0, int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
 		double var17 = (double)(var1 * 16 + 8);
 		double var19 = (double)(var2 * 16 + 8);
 		float var21 = 0.0F;
 		float var22 = 0.0F;
-		Random var23 = new Random(this.rand.nextLong());
+		Random var23 = new Random(var0);
 		if(var14 <= 0) {
 			int var24 = this.field_1306_a * 16 - 16;
 			var14 = var24 - var23.nextInt(var24 / 4);
@@ -47,8 +47,8 @@
 			var22 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 2.0F;
 			var21 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 4.0F;
 			if(!var52 && var13 == var25 && var10 > 1.0F) {
-				this.releaseEntitySkin(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 - (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
-				this.releaseEntitySkin(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 + (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
+				this.releaseEntitySkin(var23.nextLong(), var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 - (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
+				this.releaseEntitySkin(var23.nextLong(), var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 + (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
 				return;
 			}
 
@@ -121,6 +121,7 @@
 								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
 								int var46 = (var40 * 16 + var43) * 128 + var36;
 								boolean var47 = false;
+								boolean var47a = false;
 								if(var57 * var57 + var44 * var44 < 1.0D) {
 									for(int var48 = var36 - 1; var48 >= var54; --var48) {
 										double var49 = ((double)var48 + 0.5D - var6) / var29;
@@ -129,15 +130,28 @@
 											if(var51 == Block.grass.blockID) {
 												var47 = true;
 											}
+											if(var51 == Block.mud.blockID) {
+												var47a = true;
+											}
 
-											if(var51 == Block.stone.blockID || var51 == Block.dirt.blockID || var51 == Block.grass.blockID) {
-												if(var48 < 10) {
+											if(var51 == Block.stone.blockID
+													|| var51 == Block.dirt.blockID
+													|| var51 == Block.mud.blockID
+													|| var51 == Block.grass.blockID
+													|| var51 == Block.jungleGrass.blockID
+													|| var51 == Block.blockSnow.blockID
+													|| var51 == Block.sand.blockID
+													|| var51 == Block.sandStone.blockID) {
+												if(var48 < 6) {
 													var3[var46] = (byte)Block.lavaMoving.blockID;
 												} else {
 													var3[var46] = 0;
 													if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
 														var3[var46 - 1] = (byte)Block.grass.blockID;
 													}
+													if(var47a && var3[var46 - 1] == Block.mud.blockID) {
+														var3[var46 - 1] = (byte)Block.jungleGrass.blockID;
+													}
 												}
 											}
 										}
@@ -170,15 +184,19 @@
 			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
 			int var15 = 1;
 			if(this.rand.nextInt(4) == 0) {
-				this.func_870_a(var4, var5, var6, var9, var11, var13);
-				var15 += this.rand.nextInt(4);
+				this.func_870_a(this.rand.nextLong(), var4, var5, var6, var9, var11, var13);
+				var15 += this.rand.nextInt(4) + 1;
 			}
 
 			for(int var16 = 0; var16 < var15; ++var16) {
 				float var17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
 				float var18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
-				float var19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
-				this.releaseEntitySkin(var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
+				float var19 = this.rand.nextFloat() * 3.0F + 1.0F;
+				if(this.rand.nextInt(5) == 0) {
+					var19 += 2.0F + this.rand.nextFloat();
+				}
+
+				this.releaseEntitySkin(this.rand.nextLong(), var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/StackedRecipe.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+import java.util.Objects;
+
+public class StackedRecipe {
+	public final IRecipe recipe;
+	public final ItemStack result;
+	public final ItemStack[] ingredients;
+
+	public StackedRecipe(IRecipe recipe, ItemStack result, ItemStack[] ingredients) {
+		this.recipe = recipe;
+		this.result = result;
+		this.ingredients = ingredients;
+	}
+
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		StackedRecipe that = (StackedRecipe)o;
+		return Objects.equals(recipe, that.recipe) && Objects.equals(result, that.result) && Arrays.equals(ingredients, that.ingredients);
+	}
+
+	public int hashCode() {
+		int result1 = Objects.hash(recipe, result);
+		result1 = 31 * result1 + Arrays.hashCode(ingredients);
+		return result1;
+	}
+}
--- net/minecraft/src/BlockButton.java
+++ net/minecraft/src/BlockButton.java
@@ -130,7 +130,7 @@
 		} else {
 			var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
 			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
+			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "Menu_Tick", 1.0F, 1.0F);
 			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
 			if(var7 == 1) {
 				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
@@ -207,7 +207,6 @@
 					var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
 				}
 
-				var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
 				var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
 			}
 		}
--- net/minecraft/src/StepSound.java
+++ net/minecraft/src/StepSound.java
@@ -1,6 +1,9 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class StepSound {
+	protected static final Random rand = new Random();
 	public final String field_1678_a;
 	public final float field_1677_b;
 	public final float field_1679_c;
@@ -25,5 +28,13 @@
 
 	public String func_1145_d() {
 		return "step." + this.field_1678_a;
+	}
+
+	public String breakSoundDir() {
+		return "step." + this.field_1678_a;
+	}
+
+	public boolean isTerraSound() {
+		return false;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiCreateCharacter.java
@@ -1,0 +1,163 @@
+package net.minecraft.src;
+
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL12;
+
+public class GuiCreateCharacter extends GuiScreen {
+	private final GuiScreen parentScreen;
+	private final EntityPlayerModel modelPlayer;
+	private final RenderLiving modelPlayerRenderer;
+	private final PlayerInfo overwrite;
+	private GuiTextField textboxName;
+	private GuiTextField textboxSkin;
+	private String saveFile;
+
+	public GuiCreateCharacter(GuiScreen var1) {
+		this(var1, null);
+	}
+
+	public GuiCreateCharacter(GuiScreen var1, PlayerInfo var2) {
+		this.parentScreen = var1;
+		this.modelPlayer = new EntityPlayerModel();
+		this.modelPlayerRenderer = new RenderLiving(new ModelBiped(), 0.5F);
+		this.modelPlayerRenderer.setRenderManager(RenderManager.instance);
+		this.overwrite = var2;
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+		this.textboxName.updateCursorCounter();
+		this.textboxSkin.updateCursorCounter();
+
+		++this.modelPlayer.ticksExisted;
+		this.modelPlayer.field_705_Q = this.modelPlayer.field_704_R;
+		this.modelPlayer.field_704_R += (0.5F - this.modelPlayer.field_704_R) * 0.4F;
+		this.modelPlayer.field_703_S += this.modelPlayer.field_704_R;
+	}
+
+	public void initGui() {
+		StringTranslate var1 = StringTranslate.getInstance();
+		Keyboard.enableRepeatEvents(true);
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, 150, 95, 20,
+				this.overwrite != null ? var1.translateKey("selectWorld.rename") : var1.translateKey("selectWorld.create")));
+		this.controlList.add(new GuiButton(1, this.width / 2 + 5, 150, 95, 20, var1.translateKey("gui.back")));
+		this.textboxName = new GuiTextField(this, this.fontRenderer, this.width / 2 - 59, 91, 158, 18,
+				this.overwrite != null ? this.overwrite.getName() : this.mc.session.username);
+		this.textboxName.isFocused = true;
+		this.textboxName.setMaxStringLength(32);
+		this.textboxSkin = new GuiTextField(this, this.fontRenderer, this.width / 2 - 59, 111, 158, 18,
+				this.overwrite != null ? this.overwrite.getSkin() : "");
+		this.updateView();
+		RenderManager.instance.renderEngine = this.mc.renderEngine;
+	}
+
+	private void updateView() {
+		this.saveFile = this.textboxName.getText().trim();
+		char[] var1 = ChatAllowedCharacters.allowedCharactersArray;
+		int var2 = var1.length;
+
+		for(int var3 = 0; var3 < var2; ++var3) {
+			char var4 = var1[var3];
+			this.saveFile = this.saveFile.replace(var4, '_');
+		}
+
+		if(MathHelper.stringNullOrLengthZero(this.saveFile)) {
+			this.saveFile = "default";
+		}
+
+		this.saveFile = generateUnusedFolderName(this.mc.getPlayerSaveManager(), this.saveFile);
+		this.modelPlayer.setSkin(this.textboxSkin.getText(), this.mc.session.username);
+		this.mc.renderGlobal.obtainEntitySkin(this.modelPlayer);
+	}
+
+	public static String generateUnusedFolderName(PlayerSaveManager var0, String var1) {
+		while(var0.loadPlayer(var1) != null) {
+			var1 = var1 + "-";
+		}
+
+		return var1;
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		StringTranslate var4 = StringTranslate.getInstance();
+		this.drawDefaultBackground();
+		this.drawGradientRect(this.width / 2 - 110, 80, this.width / 2 + 110, 81, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 110, 139, this.width / 2 + 110, 140, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 110, 81, this.width / 2 - 109, 139, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 + 109, 81, this.width / 2 + 110, 139, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 109, 81, this.width / 2 + 109, 139, 0xC03F4197, 0xC03F4197);
+		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterName"), this.width / 2 - 100, 96, 0xFFFFFF);
+		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterSkin"), this.width / 2 - 100, 116, 0xFFFFFF);
+		this.textboxName.drawTextBox();
+		this.textboxSkin.drawTextBox();
+		if (this.textboxSkin.getText().isEmpty()) {
+			this.drawString(this.fontRenderer, var4.translateKey("selectWorld.skinInfo"), this.width / 2 - 55, 116, -6250336);
+		}
+
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+		GL11.glPushMatrix();
+		GL11.glTranslatef((float)(this.width / 2 - 150), (float)190, 50.0F);
+		float var5 = 30.0F;
+		GL11.glScalef(-var5, var5, var5);
+		GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
+		float var9 = (float)(this.width / 2 - 150 - var1);
+		float var10 = (float)(90 - var2);
+		GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
+		RenderHelper.enableStandardItemLighting();
+		GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(-((float)Math.atan((double)(var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
+		this.modelPlayer.prevRenderYawOffset = this.modelPlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
+		this.modelPlayer.prevRotationYaw = this.modelPlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
+		this.modelPlayer.prevRotationPitch = this.modelPlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
+		this.modelPlayer.entityBrightness = 1.0F;
+		GL11.glTranslatef(0.0F, this.modelPlayer.yOffset, 0.0F);
+		RenderManager.instance.playerViewY = 180.0F;
+		this.modelPlayerRenderer.doRender(this.modelPlayer, 0.0D, 0.0D, 0.0D, 0.0F, var3);
+		this.modelPlayer.entityBrightness = 0.0F;
+		GL11.glPopMatrix();
+		RenderHelper.disableStandardItemLighting();
+		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+
+		super.drawScreen(var1, var2, var3);
+	}
+
+	public void onGuiClosed() {
+		Keyboard.enableRepeatEvents(false);
+	}
+
+	protected void keyTyped(char var1, int var2) {
+		if (this.textboxName.isFocused) {
+			this.textboxName.textboxKeyTyped(var1, var2);
+		} else {
+			this.textboxSkin.textboxKeyTyped(var1, var2);
+		}
+
+		if (var1 == 13) {
+			this.actionPerformed((GuiButton)this.controlList.get(0));
+		}
+
+		((GuiButton)this.controlList.get(0)).enabled = this.textboxName.getText().length() > 0;
+		this.updateView();
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+		this.textboxName.mouseClicked(var1, var2, var3);
+		this.textboxSkin.mouseClicked(var1, var2, var3);
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if (var1.id == 1) {
+			this.mc.displayGuiScreen(this.parentScreen);
+		} else if (var1.id == 0) {
+			PlayerInfo info = this.overwrite != null ? this.overwrite.rename(this.textboxName.getText(), this.textboxSkin.getText())
+					: new PlayerInfo(this.textboxName.getText(), this.saveFile, this.textboxSkin.getText());
+			if (this.overwrite == null) this.mc.selectedPlayer = this.saveFile;
+			this.mc.getPlayerSaveManager().savePlayer(info);
+			this.mc.displayGuiScreen(this.overwrite != null ? this.parentScreen : new GuiSelectWorld(this.parentScreen));
+		}
+	}
+}
--- net/minecraft/src/GuiChest.java
+++ net/minecraft/src/GuiChest.java
@@ -12,24 +12,29 @@
 		this.upperChestInventory = var1;
 		this.lowerChestInventory = var2;
 		this.field_948_f = false;
-		short var3 = 222;
-		int var4 = var3 - 108;
 		this.inventoryRows = var2.getSizeInventory() / 9;
-		this.ySize = var4 + this.inventoryRows * 18;
+		this.xSize = 222;
+		this.ySize = 68 + this.inventoryRows * 20;
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, 4210752);
-		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, 4210752);
+		this.drawString(this.fontRenderer, this.lowerChestInventory.getInvName(), 186, 54, 0xFFFFFF);
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
+		GL11.glEnable(GL11.GL_BLEND);
 		int var2 = this.mc.renderEngine.getTexture("/gui/container.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.inventoryRows * 18 + 17);
-		this.drawTexturedModalRect(var3, var4 + this.inventoryRows * 18 + 17, 0, 126, this.xSize, 96);
+		this.drawTexturedModalRect(this.offX, this.offY, 0, 0, 182, 62);
+		this.drawTexturedModalRect(this.offX + 40, this.offY + 66, 0, 0, 182, 1);
+		for (int i = 0; i < this.inventoryRows; i++) {
+			this.drawTexturedModalRect(this.offX + 40, this.offY + 67 + i * 20, 0, 1, 182, 20);
+		}
+		this.drawTexturedModalRect(this.offX + 40, this.offY + 67 + this.inventoryRows * 20, 0, 61, 182, 1);
+		var2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
+		this.mc.renderEngine.bindTexture(var2);
+		this.drawTexturedModalRect(this.width - 32, this.offY, 0, 62, 22, 82);
+		GL11.glDisable(GL11.GL_BLEND);
 	}
 }
--- net/minecraft/src/ItemDye.java
+++ net/minecraft/src/ItemDye.java
@@ -39,7 +39,7 @@
 				return true;
 			}
 
-			if(var8 == Block.grass.blockID) {
+			if(var8 == Block.grass.blockID || var8 == Block.jungleGrass.blockID) {
 				if(!var3.multiplayerWorld) {
 					--var1.stackSize;
 
@@ -53,14 +53,18 @@
 							var10 += itemRand.nextInt(3) - 1;
 							var11 += (itemRand.nextInt(3) - 1) * itemRand.nextInt(3) / 2;
 							var12 += itemRand.nextInt(3) - 1;
-							if(var3.getBlockId(var10, var11 - 1, var12) != Block.grass.blockID || var3.isBlockNormalCube(var10, var11, var12)) {
+							if(var3.getBlockId(var10, var11 - 1, var12) != Block.grass.blockID
+									|| var3.getBlockId(var10, var11 - 1, var12) != Block.jungleGrass.blockID
+									|| var3.isBlockNormalCube(var10, var11, var12)) {
 								continue label53;
 							}
 						}
 
 						if(var3.getBlockId(var10, var11, var12) == 0) {
 							if(itemRand.nextInt(10) != 0) {
-								var3.setBlockAndMetadataWithNotify(var10, var11, var12, Block.tallGrass.blockID, 1);
+								var3.setBlockAndMetadataWithNotify(var10, var11, var12, Block.tallGrass.blockID,
+										var3.getBlockId(var10, var11 - 1, var12) == Block.jungleGrass.blockID
+										&& itemRand.nextInt(2) == 0 ? 2 : 1);
 							} else if(itemRand.nextInt(3) != 0) {
 								var3.setBlockWithNotify(var10, var11, var12, Block.plantYellow.blockID);
 							} else {
--- net/minecraft/src/PlayerController.java
+++ net/minecraft/src/PlayerController.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+import org.lwjgl.input.Keyboard;
 
 public class PlayerController {
 	protected final Minecraft mc;
@@ -41,7 +42,7 @@
 	}
 
 	public float getBlockReachDistance() {
-		return 5.0F;
+		return this.mc.thePlayer.inventory.getReach();
 	}
 
 	public boolean sendUseItem(EntityPlayer var1, World var2, ItemStack var3) {
@@ -77,8 +78,8 @@
 		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
 	}
 
-	public EntityPlayer createPlayer(World var1) {
-		return new EntityPlayerSP(this.mc, var1, this.mc.session, var1.worldProvider.worldType);
+	public EntityPlayer createPlayer(World var1, PlayerInfo var2) {
+		return new EntityPlayerSP(this.mc, var1, var2, var1.worldProvider.worldType);
 	}
 
 	public void interactWithEntity(EntityPlayer var1, Entity var2) {
@@ -91,6 +92,46 @@
 
 	public ItemStack func_27174_a(int var1, int var2, int var3, boolean var4, EntityPlayer var5) {
 		return var5.craftingInventory.func_27280_a(var2, var3, var4, var5);
+	}
+
+	public boolean craft(EntityPlayer player, StackedRecipe recipe) {
+		boolean shiftDown = Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
+
+		if (!recipe.recipe.matchesStacked(player.inventory)) {
+			return false;
+		}
+
+		ItemStack draggedStack = player.isSneaking() ? null : player.inventory.getItemStack();
+		if (draggedStack != null && (!draggedStack.isItemEqual(recipe.result) || draggedStack.stackSize + recipe.result.stackSize > draggedStack.getMaxStackSize())) {
+			return false;
+		}
+
+		if (shiftDown && !player.inventory.addItemStackToInventory(recipe.result.copy())) {
+			return false;
+		}
+
+		for (ItemStack ingredient : recipe.ingredients) {
+			for (int i = 0; i < ingredient.stackSize; i++) {
+				boolean result;
+				if (ingredient.getItemDamage() == -1) {
+					result = player.inventory.consumeInventoryItem(ingredient.itemID);
+				} else {
+					result = player.inventory.consumeInventoryItem(ingredient.itemID, ingredient.getItemDamage());
+				}
+
+				if (!result) return false;
+			}
+		}
+
+		if (!shiftDown) {
+			if (draggedStack == null) {
+				player.inventory.setItemStack(recipe.result.copy());
+			} else {
+				draggedStack.stackSize += recipe.result.stackSize;
+			}
+		}
+
+		return true;
 	}
 
 	public void func_20086_a(int var1, EntityPlayer var2) {
--- net/minecraft/src/GuiRenameWorld.java
+++ net/minecraft/src/GuiRenameWorld.java
@@ -13,6 +13,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		this.field_22114_h.updateCursorCounter();
 	}
 
--- net/minecraft/src/GuiChat.java
+++ net/minecraft/src/GuiChat.java
@@ -16,6 +16,7 @@
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		++this.updateCounter;
 	}
 
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -1,17 +1,18 @@
 package net.minecraft.src;
 
 public class ItemSword extends Item {
-	private int weaponDamage;
+	protected int weaponDamage;
+	protected int weaponSpeed;
 
 	public ItemSword(int var1, EnumToolMaterial var2) {
 		super(var1);
 		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
-		this.weaponDamage = 4 + var2.getDamageVsEntity() * 2;
+		this.weaponDamage = var2.getDamageVsEntity();
+		this.weaponSpeed = var2.getSpeedVsEntity();
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
-		return var2.blockID == Block.web.blockID ? 15.0F : 1.5F;
+		return var2.blockID == Block.web.blockID ? 10.0F : 1.0F;
 	}
 
 	public boolean hitEntity(ItemStack var1, EntityLiving var2, EntityLiving var3) {
@@ -26,6 +27,10 @@
 
 	public int getDamageVsEntity(Entity var1) {
 		return this.weaponDamage;
+	}
+
+	public int getSpeedVsEntity(Entity var1) {
+		return this.weaponSpeed;
 	}
 
 	public boolean isFull3D() {
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -8,7 +8,10 @@
 	public EntitySlime(World var1) {
 		super(var1);
 		this.texture = "/mob/slime.png";
-		int var2 = 1 << this.rand.nextInt(3);
+		int var2 = 2;
+		if (this.rand.nextInt(3) == 0) {
+			var2 = this.rand.nextInt(2) == 0 ? 1 : 4;
+		}
 		this.yOffset = 0.0F;
 		this.slimeJumpDelay = this.rand.nextInt(20) + 10;
 		this.setSlimeSize(var2);
@@ -22,7 +25,7 @@
 	public void setSlimeSize(int var1) {
 		this.dataWatcher.updateObject(16, new Byte((byte)var1));
 		this.setSize(0.6F * (float)var1, 0.6F * (float)var1);
-		this.health = var1 * var1;
+		this.health = this.getMaxHealth();
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
@@ -36,14 +39,19 @@
 	}
 
 	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
 		this.setSlimeSize(var1.getInteger("Size") + 1);
+		super.readEntityFromNBT(var1);
 	}
 
 	public void onUpdate() {
 		this.field_767_b = this.field_768_a;
 		boolean var1 = this.onGround;
 		super.onUpdate();
+		if(!this.worldObj.multiplayerWorld && this.worldObj.difficultySetting == 0) {
+			this.setEntityDead();
+			return;
+		}
+
 		if(this.onGround && !var1) {
 			int var2 = this.getSlimeSize();
 
@@ -55,16 +63,20 @@
 				this.worldObj.spawnParticle("slime", this.posX + (double)var6, this.boundingBox.minY, this.posZ + (double)var7, 0.0D, 0.0D, 0.0D);
 			}
 
-			if(var2 > 2) {
-				this.worldObj.playSoundAtEntity(this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) / 0.8F);
-			}
-
 			this.field_768_a = -0.5F;
 		}
 
 		this.field_768_a *= 0.6F;
 	}
 
+	public void onLivingUpdate() {
+		if(!this.worldObj.isDaytime() && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+			this.attackEntityFrom(null, 5);
+		}
+
+		super.onLivingUpdate();
+	}
+
 	protected void updatePlayerActionState() {
 		this.func_27021_X();
 		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
@@ -79,9 +91,6 @@
 			}
 
 			this.isJumping = true;
-			if(this.getSlimeSize() > 1) {
-				this.worldObj.playSoundAtEntity(this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) * 0.8F);
-			}
 
 			this.field_768_a = 1.0F;
 			this.moveStrafing = 1.0F - this.rand.nextFloat() * 2.0F;
@@ -95,26 +104,10 @@
 
 	}
 
-	public void setEntityDead() {
-		int var1 = this.getSlimeSize();
-		if(!this.worldObj.multiplayerWorld && var1 > 1 && this.health == 0) {
-			for(int var2 = 0; var2 < 4; ++var2) {
-				float var3 = ((float)(var2 % 2) - 0.5F) * (float)var1 / 4.0F;
-				float var4 = ((float)(var2 / 2) - 0.5F) * (float)var1 / 4.0F;
-				EntitySlime var5 = new EntitySlime(this.worldObj);
-				var5.setSlimeSize(var1 / 2);
-				var5.setLocationAndAngles(this.posX + (double)var3, this.posY + 0.5D, this.posZ + (double)var4, this.rand.nextFloat() * 360.0F, 0.0F);
-				this.worldObj.entityJoinedWorld(var5);
-			}
-		}
-
-		super.setEntityDead();
-	}
-
 	public void onCollideWithPlayer(EntityPlayer var1) {
 		int var2 = this.getSlimeSize();
-		if(var2 > 1 && this.canEntityBeSeen(var1) && (double)this.getDistanceToEntity(var1) < 0.6D * (double)var2 && var1.attackEntityFrom(this, var2)) {
-			this.worldObj.playSoundAtEntity(this, "mob.slimeattack", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+		if(this.isEntityAlive() && this.canEntityBeSeen(var1) && (double)this.getDistanceToEntity(var1) < (double)var2 * 1.5F) {
+			var1.attackEntityFrom(this, var2 * 4);
 		}
 
 	}
@@ -128,15 +121,18 @@
 	}
 
 	protected int getDropItemId() {
-		return this.getSlimeSize() == 1 ? Item.slimeBall.shiftedIndex : 0;
-	}
-
-	public boolean getCanSpawnHere() {
-		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
-		return (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.func_997_a(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
+		return Item.slimeBall.shiftedIndex;
 	}
 
 	protected float getSoundVolume() {
 		return 0.6F;
+	}
+
+	public int getMaxHealth() {
+		return this.getSlimeSize() * (this.worldObj.difficultySetting == 3 ? 20 : 10);
+	}
+
+	public boolean getCanSpawnHere() {
+		return super.getCanSpawnHere() && this.worldObj.isDaytime() && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
 	}
 }
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -78,7 +78,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public boolean canInteractWith(EntityPlayer var1) {
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -48,7 +48,18 @@
 		}
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int quantityDropped(Random var1) {
+		return 0;
+	}
+
+	public float blockStrength(EntityPlayer var1) {
+		if (var1.getCurrentPlayerStrVsBlock(this) == 0.0F) {
+			return 0.0F;
+		}
+		return 1.0F;
+	}
+
+	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
+		var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
 	}
 }
--- net/minecraft/src/SoundPool.java
+++ net/minecraft/src/SoundPool.java
@@ -11,6 +11,7 @@
 public class SoundPool {
 	private Random rand = new Random();
 	private Map nameToSoundPoolEntriesMapping = new HashMap();
+	private Map nameToSoundPoolEntryMapping = new HashMap();
 	private List allSoundPoolEntries = new ArrayList();
 	public int numberOfSoundPoolEntries = 0;
 	public boolean field_1657_b = true;
@@ -19,19 +20,21 @@
 		try {
 			String var3 = var1;
 			var1 = var1.substring(0, var1.indexOf("."));
+			var1 = var1.replaceAll("/", ".");
+			String var1a = var1;
 			if(this.field_1657_b) {
 				while(Character.isDigit(var1.charAt(var1.length() - 1))) {
 					var1 = var1.substring(0, var1.length() - 1);
 				}
 			}
 
-			var1 = var1.replaceAll("/", ".");
 			if(!this.nameToSoundPoolEntriesMapping.containsKey(var1)) {
 				this.nameToSoundPoolEntriesMapping.put(var1, new ArrayList());
 			}
 
 			SoundPoolEntry var4 = new SoundPoolEntry(var3, var2.toURI().toURL());
 			((List)this.nameToSoundPoolEntriesMapping.get(var1)).add(var4);
+			this.nameToSoundPoolEntryMapping.put(var1a, var4);
 			this.allSoundPoolEntries.add(var4);
 			++this.numberOfSoundPoolEntries;
 			return var4;
@@ -42,6 +45,14 @@
 	}
 
 	public SoundPoolEntry getRandomSoundFromSoundPool(String var1) {
+		if (var1 == null) {
+			return null;
+		}
+
+		if (Character.isDigit(var1.charAt(var1.length() - 1))) {
+			return (SoundPoolEntry)this.nameToSoundPoolEntryMapping.get(var1);
+		}
+
 		List var2 = (List)this.nameToSoundPoolEntriesMapping.get(var1);
 		return var2 == null ? null : (SoundPoolEntry)var2.get(this.rand.nextInt(var2.size()));
 	}
--- /dev/null
+++ net/minecraft/src/GuiSelectCharacter.java
@@ -1,0 +1,184 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL12;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Collections;
+import java.util.List;
+
+public class GuiSelectCharacter extends GuiScreen {
+	private final DateFormat dateFormatter = new SimpleDateFormat();
+	private final GuiScreen parentScreen;
+	private final EntityPlayerModel modelPlayer;
+	private final EntityPlayerModel modelPlayerWalking;
+	private final RenderLiving modelPlayerRenderer;
+	private int selectedPlayer;
+	private List<PlayerInfo> playerList;
+	private GuiPlayerSlot playerSlotContainer;
+	protected String screenTitle = "Select world";
+	private boolean deleting;
+	private GuiButton buttonRename;
+	private GuiButton buttonSelect;
+	private GuiButton buttonDelete;
+	private float renderPartialTick;
+
+	public GuiSelectCharacter(GuiScreen var1) {
+		this.parentScreen = var1;
+		this.modelPlayer = new EntityPlayerModel();
+		this.modelPlayerWalking = new EntityPlayerModel();
+		this.modelPlayerRenderer = new RenderLiving(new ModelBiped(), 0.5F);
+		this.modelPlayerRenderer.setRenderManager(RenderManager.instance);
+	}
+
+	public void initGui() {
+		StringTranslate var1 = StringTranslate.getInstance();
+		this.screenTitle = var1.translateKey("selectWorld.characterTitle");
+		this.loadPlayers();
+		this.playerSlotContainer = new GuiPlayerSlot(this);
+		this.playerSlotContainer.registerScrollButtons(this.controlList, 4, 5);
+		this.initButtons();
+		RenderManager.instance.renderEngine = this.mc.renderEngine;
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+
+		++this.modelPlayer.ticksExisted;
+		++this.modelPlayerWalking.ticksExisted;
+		this.modelPlayerWalking.field_705_Q = this.modelPlayerWalking.field_704_R;
+		this.modelPlayerWalking.field_704_R += (0.5F - this.modelPlayerWalking.field_704_R) * 0.4F;
+		this.modelPlayerWalking.field_703_S += this.modelPlayerWalking.field_704_R;
+	}
+
+	private void loadPlayers() {
+		this.playerList = this.mc.getPlayerSaveManager().getPlayerList();
+		Collections.sort(this.playerList);
+		this.selectedPlayer = -1;
+	}
+
+	public void initButtons() {
+		StringTranslate var1 = StringTranslate.getInstance();
+		this.controlList.add(this.buttonSelect = new GuiButton(1, this.width / 2 - 154, this.height - 52, 150, 20, var1.translateKey("selectWorld.select")));
+		this.controlList.add(this.buttonRename = new GuiButton(6, this.width / 2 - 154, this.height - 28, 70, 20, var1.translateKey("selectWorld.rename")));
+		this.controlList.add(this.buttonDelete = new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, var1.translateKey("selectWorld.delete")));
+		this.controlList.add(new GuiButton(3, this.width / 2 + 4, this.height - 52, 150, 20, var1.translateKey("selectWorld.create")));
+		this.controlList.add(new GuiButton(0, this.width / 2 + 4, this.height - 28, 150, 20, var1.translateKey("gui.cancel")));
+		this.buttonSelect.enabled = false;
+		this.buttonRename.enabled = false;
+		this.buttonDelete.enabled = false;
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(var1.enabled) {
+			if(var1.id == 2) {
+				if (this.selectedPlayer > -1) {
+					this.deleting = true;
+					StringTranslate var3 = StringTranslate.getInstance();
+					String var4 = var3.translateKey("selectWorld.deleteQuestionCharacter");
+					String var5 = "\'" + this.playerList.get(this.selectedPlayer).getName() + "\' " + var3.translateKey("selectWorld.deleteWarning");
+					String var6 = var3.translateKey("selectWorld.deleteButton");
+					String var7 = var3.translateKey("gui.cancel");
+					GuiYesNo var8 = new GuiYesNo(this, var4, var5, var6, var7, this.selectedPlayer);
+					this.mc.displayGuiScreen(var8);
+				}
+			} else if(var1.id == 1) {
+				this.selectPlayer(this.selectedPlayer);
+			} else if(var1.id == 3) {
+				this.mc.displayGuiScreen(new GuiCreateCharacter(this));
+			} else if(var1.id == 6) {
+				this.mc.displayGuiScreen(new GuiCreateCharacter(this, this.playerList.get(this.selectedPlayer)));
+			} else if(var1.id == 0) {
+				this.mc.displayGuiScreen(this.parentScreen);
+			} else {
+				this.playerSlotContainer.actionPerformed(var1);
+			}
+
+		}
+	}
+
+	public void selectPlayer(int var1) {
+		this.mc.selectedPlayer = this.playerList.get(var1).getSaveFile();
+		this.mc.displayGuiScreen(new GuiSelectWorld(this));
+	}
+
+	public void deleteWorld(boolean var1, int var2) {
+		if (this.deleting) {
+			this.deleting = false;
+			if (var1) {
+				PlayerSaveManager playerSaveManager = this.mc.getPlayerSaveManager();
+				playerSaveManager.deletePlayer(this.playerList.get(this.selectedPlayer).getSaveFile());
+				this.loadPlayers();
+			}
+
+			this.mc.displayGuiScreen(this);
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.renderPartialTick = var3;
+		this.playerSlotContainer.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		super.drawScreen(var1, var2, var3);
+	}
+
+	public void drawPlayer(int i, int x, int y) {
+		EntityPlayerModel modelPlayer = i == this.selectedPlayer ? this.modelPlayerWalking : this.modelPlayer;
+		modelPlayer.setSkin(this.playerList.get(i).getSkin(), this.mc.session.username);
+		this.mc.renderGlobal.obtainEntitySkin(this.modelPlayer);
+
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+		GL11.glPushMatrix();
+		GL11.glTranslatef((float)x, (float)y, 50.0F);
+		float var5 = 15.0F;
+		GL11.glScalef(-var5, var5, var5);
+		GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
+		float var9 = -100.0F;
+		float var10 = 0.0F;
+		GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
+		RenderHelper.enableStandardItemLighting();
+		GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(-((float)Math.atan((double)(var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
+		modelPlayer.prevRenderYawOffset = modelPlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
+		modelPlayer.prevRotationYaw = modelPlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
+		modelPlayer.prevRotationPitch = modelPlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
+		modelPlayer.entityBrightness = 1.0F;
+		GL11.glTranslatef(0.0F, modelPlayer.yOffset, 0.0F);
+		RenderManager.instance.playerViewY = 180.0F;
+		this.modelPlayerRenderer.doRender(modelPlayer, 0.0D, 0.0D, 0.0D, 0.0F, this.renderPartialTick);
+		modelPlayer.entityBrightness = 0.0F;
+		GL11.glPopMatrix();
+		RenderHelper.disableStandardItemLighting();
+		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+	}
+
+	static List<PlayerInfo> getSize(GuiSelectCharacter var0) {
+		return var0.playerList;
+	}
+
+	static int onElementSelected(GuiSelectCharacter var0, int var1) {
+		return var0.selectedPlayer = var1;
+	}
+
+	static int getSelectedWorld(GuiSelectCharacter var0) {
+		return var0.selectedPlayer;
+	}
+
+	static GuiButton getSelectButton(GuiSelectCharacter var0) {
+		return var0.buttonSelect;
+	}
+
+	static GuiButton getRenameButton(GuiSelectCharacter var0) {
+		return var0.buttonRename;
+	}
+
+	static GuiButton getDeleteButton(GuiSelectCharacter var0) {
+		return var0.buttonDelete;
+	}
+
+	static DateFormat getDateFormatter(GuiSelectCharacter var0) {
+		return var0.dateFormatter;
+	}
+}
--- net/minecraft/src/GuiControls.java
+++ net/minecraft/src/GuiControls.java
@@ -20,10 +20,10 @@
 		int var2 = this.func_20080_j();
 
 		for(int var3 = 0; var3 < this.options.keyBindings.length; ++var3) {
-			this.controlList.add(new GuiSmallButton(var3, var2 + var3 % 2 * 160, this.height / 6 + 24 * (var3 >> 1), 70, 20, this.options.getOptionDisplayString(var3)));
+			this.controlList.add(new GuiSmallButton(var3, var2 + var3 % 2 * 160 + 76, 100 + 20 * (var3 >> 1), 70, 20, this.options.getOptionDisplayString(var3)).asTransparent());
 		}
 
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, var1.translateKey("gui.done")));
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, 220, var1.translateKey("gui.back")).asTransparent());
 		this.screenTitle = var1.translateKey("controls.title");
 	}
 
@@ -53,12 +53,17 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
 		int var4 = this.func_20080_j();
+		this.drawDefaultBackground();
+		this.drawGradientRect(this.width / 2 - 170, 90, this.width / 2 + 170, 91, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 170, 209, this.width / 2 + 170, 210, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 170, 91, this.width / 2 - 169, 209, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 + 169, 91, this.width / 2 + 170, 209, 0xC0121226, 0xC0121226);
+		this.drawGradientRect(this.width / 2 - 169, 91, this.width / 2 + 169, 209, 0xC03F4197, 0xC03F4197);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 70, 16777215);
 
 		for(int var5 = 0; var5 < this.options.keyBindings.length; ++var5) {
-			this.drawString(this.fontRenderer, this.options.getKeyBindingDescription(var5), var4 + var5 % 2 * 160 + 70 + 6, this.height / 6 + 24 * (var5 >> 1) + 7, -1);
+			this.drawString(this.fontRenderer, this.options.getKeyBindingDescription(var5), var4 + var5 % 2 * 160, 106 + 20 * (var5 >> 1), -1);
 		}
 
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/src/BlockFurnace.java
+++ net/minecraft/src/BlockFurnace.java
@@ -2,7 +2,7 @@
 
 import java.util.Random;
 
-public class BlockFurnace extends BlockContainer {
+public class BlockFurnace extends Block {
 	private Random furnaceRand = new Random();
 	private final boolean isActive;
 	private static boolean keepFurnaceInventory = false;
@@ -86,37 +86,7 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture + 17 : (var1 == 0 ? this.blockIndexInTexture + 17 : (var1 == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		if(var1.multiplayerWorld) {
-			return true;
-		} else {
-			TileEntityFurnace var6 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
-			var5.displayGUIFurnace(var6);
-			return true;
-		}
-	}
-
-	public static void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
-		keepFurnaceInventory = true;
-		if(var0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenActive.blockID);
-		} else {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenIdle.blockID);
-		}
-
-		keepFurnaceInventory = false;
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-		var6.func_31004_j();
-		var1.setBlockTileEntity(var2, var3, var4, var6);
-	}
-
-	protected TileEntity getBlockEntity() {
-		return new TileEntityFurnace();
+		return var1 == 1 ? this.blockIndexInTexture + 17 : (var1 == 0 ? this.blockIndexInTexture + 17 : (var1 == 3 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture));
 	}
 
 	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
@@ -139,35 +109,8 @@
 
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		if(!keepFurnaceInventory) {
-			TileEntityFurnace var5 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
-
-			for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
-				ItemStack var7 = var5.getStackInSlot(var6);
-				if(var7 != null) {
-					float var8 = this.furnaceRand.nextFloat() * 0.8F + 0.1F;
-					float var9 = this.furnaceRand.nextFloat() * 0.8F + 0.1F;
-					float var10 = this.furnaceRand.nextFloat() * 0.8F + 0.1F;
-
-					while(var7.stackSize > 0) {
-						int var11 = this.furnaceRand.nextInt(21) + 10;
-						if(var11 > var7.stackSize) {
-							var11 = var7.stackSize;
-						}
-
-						var7.stackSize -= var11;
-						EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.getItemDamage()));
-						float var13 = 0.05F;
-						var12.motionX = (double)((float)this.furnaceRand.nextGaussian() * var13);
-						var12.motionY = (double)((float)this.furnaceRand.nextGaussian() * var13 + 0.2F);
-						var12.motionZ = (double)((float)this.furnaceRand.nextGaussian() * var13);
-						var1.entityJoinedWorld(var12);
-					}
-				}
-			}
-		}
-
-		super.onBlockRemoval(var1, var2, var3, var4);
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		var5.displayWorkbenchGUI(var2, var3, var4);
+		return true;
 	}
 }
--- net/minecraft/src/ShapelessRecipes.java
+++ net/minecraft/src/ShapelessRecipes.java
@@ -1,20 +1,48 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
+import java.util.*;
 
 public class ShapelessRecipes implements IRecipe {
 	private final ItemStack recipeOutput;
 	private final List recipeItems;
+	private ItemStack[] stackedRecipeItems;
+	private boolean needsWorkbench;
+	private boolean needsFurnace;
+	private Block requiredBlock;
 
 	public ShapelessRecipes(ItemStack var1, List var2) {
 		this.recipeOutput = var1;
 		this.recipeItems = var2;
+
+		List<ItemStack> stackedRecipeItems = new ArrayList<>();
+		itemLoop: for (ItemStack item : (List<ItemStack>)var2) {
+			if (item == null) continue;
+			for (ItemStack stackedItem : stackedRecipeItems) {
+				if (item.itemID == stackedItem.itemID && (item.getItemDamage() == -1 || item.getItemDamage() == stackedItem.getItemDamage())) {
+					stackedItem.stackSize += item.stackSize;
+					continue itemLoop;
+				}
+			}
+			stackedRecipeItems.add(new ItemStack(item.itemID, item.stackSize, item.getItemDamage()));
+		}
+		this.stackedRecipeItems = stackedRecipeItems.toArray(new ItemStack[0]);
 	}
 
 	public ItemStack getRecipeOutput() {
 		return this.recipeOutput;
+	}
+
+	public ItemStack[] getStackedItems() {
+		return this.stackedRecipeItems;
+	}
+
+	public Block getRequiredBlock() {
+		return this.requiredBlock;
+	}
+
+	public ShapelessRecipes requireBlock(Block block) {
+		this.requiredBlock = block;
+		return this;
 	}
 
 	public boolean matches(InventoryCrafting var1) {
--- net/minecraft/src/SoundManager.java
+++ net/minecraft/src/SoundManager.java
@@ -1,7 +1,11 @@
 package net.minecraft.src;
 
 import java.io.File;
-import java.util.Random;
+import java.net.MalformedURLException;
+import java.util.*;
+import java.util.stream.Collectors;
+
+import net.minecraft.client.Minecraft;
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
@@ -10,6 +14,11 @@
 
 public class SoundManager {
 	private static SoundSystem sndSystem;
+	private static Map<String, Float> tMusicFadeList = new HashMap();
+	private static String tMusicPlaying = null;
+	private static boolean playedMenuIntro = false;
+	private static boolean isRaining = false;
+	private static float rainFade = 0.0F;
 	private SoundPool soundPoolSounds = new SoundPool();
 	private SoundPool soundPoolStreaming = new SoundPool();
 	private SoundPool soundPoolMusic = new SoundPool();
@@ -22,6 +31,10 @@
 	public void loadSoundSettings(GameSettings var1) {
 		this.soundPoolStreaming.field_1657_b = false;
 		this.options = var1;
+		if (this.options.musicVolume == 0.0F) {
+			playedMenuIntro = true;
+		}
+
 		if(!loaded && (var1 == null || var1.soundVolume != 0.0F || var1.musicVolume != 0.0F)) {
 			this.tryToSetLibraryAndCodecs();
 		}
@@ -52,6 +65,10 @@
 	}
 
 	public void onSoundOptionsChanged() {
+		if (this.options.musicVolume == 0.0F) {
+			playedMenuIntro = true;
+		}
+
 		if(!loaded && (this.options.soundVolume != 0.0F || this.options.musicVolume != 0.0F)) {
 			this.tryToSetLibraryAndCodecs();
 		}
@@ -59,6 +76,10 @@
 		if(loaded) {
 			if(this.options.musicVolume == 0.0F) {
 				sndSystem.stop("BgMusic");
+				for (String tMusic : tMusicFadeList.keySet()) {
+					sndSystem.stop(tMusic);
+				}
+				tMusicFadeList.clear();
 			} else {
 				sndSystem.setVolume("BgMusic", this.options.musicVolume);
 			}
@@ -85,6 +106,101 @@
 		this.soundPoolMusic.addSound(var1, var2);
 	}
 
+	public void playTMusic(String var1) {
+		if (loaded && this.options.musicVolume != 0.0F) {
+			if (var1.equals("50_Unknown") && playedMenuIntro && !sndSystem.playing("50_Unknown")) {
+				var1 = "51_Unknown";
+				tMusicFadeList.remove("50_Unknown");
+			}
+
+			tMusicPlaying = var1;
+			if (!tMusicFadeList.containsKey(var1)) {
+				if (var1.equals("51_Unknown") && this.isTMusicPlaying("50_Unknown")) {
+					sndSystem.stop("50_Unknown");
+					tMusicFadeList.remove("50_Unknown");
+				}
+
+				try {
+					File musicFile = new File(Minecraft.getMinecraftDir(), "/resources/tmusic/" + var1 + ".wav");
+					if (!musicFile.exists()) musicFile = new File(Minecraft.getMinecraftDir(), "/resources/tmusic/" + var1 + ".ogg");
+					if (!musicFile.exists()) return;
+
+					float volume = var1.equals("50_Unknown") || var1.equals("51_Unknown") ? 1.0F : 0.0F;
+					sndSystem.backgroundMusic(var1, musicFile.toURI().toURL(), musicFile.getName(), !var1.equals("50_Unknown"));
+					sndSystem.setVolume(var1, volume);
+					sndSystem.play(var1);
+					tMusicFadeList.put(var1, volume);
+					playedMenuIntro = true;
+				} catch (MalformedURLException e) {
+					e.printStackTrace();
+				}
+			}
+		}
+	}
+
+	public void playTRain(boolean value) {
+		isRaining = value;
+		if (loaded && this.options.musicVolume != 0.0F && isRaining && !sndSystem.playing("28_RainAmbience")) {
+			try {
+				File musicFile = new File(Minecraft.getMinecraftDir(), "/resources/tmusic/28_RainAmbience.wav");
+				if (!musicFile.exists()) musicFile = new File(Minecraft.getMinecraftDir(), "/resources/tmusic/28_RainAmbience.ogg");
+				if (!musicFile.exists()) return;
+
+				sndSystem.backgroundMusic("28_RainAmbience", musicFile.toURI().toURL(), musicFile.getName(), true);
+				sndSystem.setVolume("28_RainAmbience", 0.0F);
+				sndSystem.play("28_RainAmbience");
+			} catch (MalformedURLException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+
+	public void updateTMusic() {
+		if (!loaded || this.options.musicVolume == 0.0F) return;
+
+		for (String tMusic : tMusicFadeList.keySet()) {
+			float fade = tMusicFadeList.get(tMusic);
+
+			if (tMusicPlaying.equals(tMusic)) {
+				fade = Math.min(fade + 0.02F, 1.0F);
+			} else {
+				fade = Math.max(fade - 0.02F, 0.0F);
+			}
+
+			tMusicFadeList.put(tMusic, fade);
+			if (fade <= 0.0F) {
+				sndSystem.stop(tMusic);
+			} else {
+				sndSystem.setVolume(tMusic, fade * this.options.musicVolume * 0.75F);
+			}
+		}
+
+		tMusicFadeList = tMusicFadeList.entrySet().stream()
+				.filter(m -> m.getValue() > 0.0F)
+				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+
+		if (isRaining) {
+			rainFade = Math.min(rainFade + 0.02F, 1.0F);
+		} else {
+			rainFade = Math.max(rainFade - 0.02F, 0.0F);
+		}
+
+		if (rainFade <= 0.0F) {
+			sndSystem.stop("28_RainAmbience");
+		} else {
+			sndSystem.setVolume("28_RainAmbience", rainFade * this.options.musicVolume * 0.75F);
+		}
+	}
+
+	public boolean hasTMusic(String var1) {
+		return new File(Minecraft.getMinecraftDir(), "/resources/tmusic/" + var1 + ".wav").exists()
+				|| new File(Minecraft.getMinecraftDir(), "/resources/tmusic/" + var1 + ".ogg").exists();
+	}
+
+	public boolean isTMusicPlaying(String var1) {
+		return tMusicFadeList.containsKey(var1);
+	}
+
 	public void playRandomMusicIfReady() {
 		if(loaded && this.options.musicVolume != 0.0F) {
 			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
@@ -185,7 +301,6 @@
 					var2 = 1.0F;
 				}
 
-				var2 *= 0.25F;
 				sndSystem.setPitch(var5, var3);
 				sndSystem.setVolume(var5, var2 * this.options.soundVolume);
 				sndSystem.play(var5);
--- net/minecraft/src/SlotCrafting.java
+++ net/minecraft/src/SlotCrafting.java
@@ -32,6 +32,10 @@
 			this.thePlayer.addStat(AchievementList.buildBetterPickaxe, 1);
 		} else if(var1.itemID == Item.swordWood.shiftedIndex) {
 			this.thePlayer.addStat(AchievementList.buildSword, 1);
+		} else if(var1.itemID == Item.ingotIron.shiftedIndex) {
+			this.thePlayer.addStat(AchievementList.acquireIron, 1);
+		} else if(var1.itemID == Item.fishCooked.shiftedIndex) {
+			this.thePlayer.addStat(AchievementList.cookFish, 1);
 		}
 
 		for(int var2 = 0; var2 < this.craftMatrix.getSizeInventory(); ++var2) {
--- net/minecraft/src/ContainerChest.java
+++ net/minecraft/src/ContainerChest.java
@@ -13,18 +13,22 @@
 		int var5;
 		for(var4 = 0; var4 < this.field_27282_b; ++var4) {
 			for(var5 = 0; var5 < 9; ++var5) {
-				this.addSlot(new Slot(var2, var5 + var4 * 9, 8 + var5 * 18, 18 + var4 * 18));
+				this.addSlot(new Slot(var2, var5 + var4 * 9, 43 + var5 * 20, 69 + var4 * 20));
 			}
 		}
 
 		for(var4 = 0; var4 < 3; ++var4) {
 			for(var5 = 0; var5 < 9; ++var5) {
-				this.addSlot(new Slot(var1, var5 + var4 * 9 + 9, 8 + var5 * 18, 103 + var4 * 18 + var3));
+				this.addSlot(new Slot(var1, var5 + var4 * 9 + 9, 3 + var5 * 20, 3 + var4 * 20));
 			}
 		}
 
 		for(var4 = 0; var4 < 9; ++var4) {
-			this.addSlot(new Slot(var1, var4, 8 + var4 * 18, 161 + var3));
+			this.addSlot(new Slot(var1, var4, 3 + var4 * 20, -21));
+		}
+
+		for(var3 = 0; var3 < 4; ++var3) {
+			this.addSlot(new SlotArmor(null, var1, var1.getSizeInventory() - 1 - var3, -29, 3 + var3 * 20, var3));
 		}
 
 	}
--- net/minecraft/src/BlockReed.java
+++ net/minecraft/src/BlockReed.java
@@ -32,7 +32,7 @@
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
+		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID && var5 != Block.jungleGrass.blockID && var5 != Block.mud.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
--- net/minecraft/src/EntityWolf.java
+++ net/minecraft/src/EntityWolf.java
@@ -17,7 +17,6 @@
 		this.texture = "/mob/wolf.png";
 		this.setSize(0.8F, 0.8F);
 		this.moveSpeed = 1.1F;
-		this.health = 8;
 	}
 
 	protected void entityInit() {
@@ -327,7 +326,7 @@
 						this.setWolfTamed(true);
 						this.setPathToEntity((PathEntity)null);
 						this.setWolfSitting(true);
-						this.health = 20;
+						this.health = this.getMaxHealth();
 						this.setWolfOwner(var1.username);
 						this.showHeartsOrSmokeFX(true);
 						this.worldObj.func_9425_a(this, (byte)7);
@@ -453,5 +452,9 @@
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -5)));
 		}
 
+	}
+
+	public int getMaxHealth() {
+		return this.isWolfTamed() ? 100 : 5;
 	}
 }
--- net/minecraft/src/ColorizerFoliage.java
+++ net/minecraft/src/ColorizerFoliage.java
@@ -15,11 +15,15 @@
 	}
 
 	public static int getFoliageColorPine() {
-		return 6396257;
+		return 0x009A5D;
 	}
 
 	public static int getFoliageColorBirch() {
-		return 8431445;
+		return 0xFA83FF;
+	}
+
+	public static int getFoliageColorMahogany() {
+		return 0x5AD300;
 	}
 
 	public static int func_31073_c() {
--- net/minecraft/src/GuiDispenser.java
+++ net/minecraft/src/GuiDispenser.java
@@ -8,16 +8,19 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Dispenser", 60, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Dispenser", 186, 54, 0xFFFFFF);
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/trap.png");
+		GL11.glEnable(GL11.GL_BLEND);
+		int var2 = this.mc.renderEngine.getTexture("/gui/container.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
+		this.drawTexturedModalRect(this.offX, this.offY, 0, 0, 182, 62);
+		this.drawTexturedModalRect(this.offX + 40, this.offY + 66, 0, 62, 62, 62);
+		var2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
+		this.mc.renderEngine.bindTexture(var2);
+		this.drawTexturedModalRect(this.width - 32, this.offY, 0, 62, 22, 82);
+		GL11.glDisable(GL11.GL_BLEND);
 	}
 }
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -2,43 +2,42 @@
 
 import org.lwjgl.opengl.GL11;
 
+import java.util.Random;
+
 public class GuiGameOver extends GuiScreen {
-	public void initGui() {
-		this.controlList.clear();
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 72, "Respawn"));
-		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 96, "Title menu"));
-		if(this.mc.session == null) {
-			((GuiButton)this.controlList.get(1)).enabled = false;
-		}
-
-	}
-
-	protected void keyTyped(char var1, int var2) {
-	}
-
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
-		}
-
-		if(var1.id == 1) {
+	private static final Random rand = new Random();
+	private int updateCounter;
+
+	public void updateScreen() {
+		++updateCounter;
+		if (updateCounter >= 200) {
 			this.mc.thePlayer.respawnPlayer();
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
-
-		if(var1.id == 2) {
-			this.mc.changeWorld1((World)null);
-			this.mc.displayGuiScreen(new GuiMainMenu());
-		}
-
+	}
+
+	protected void keyTyped(char var1, int var2) {
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawGradientRect(0, 0, this.width, this.height, 1615855616, -1602211792);
+
+		int color = Math.min((int)((this.updateCounter + var3) * 127.0F / 20.0F), 127) << 16;
+		float shakeX = rand.nextFloat() * 2.0F - 1.0F;
+		float shakeY = rand.nextFloat() * 2.0F - 1.0F;
+
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
+
 		GL11.glPushMatrix();
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
-		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
+		GL11.glTranslatef(shakeX, shakeY, 0.0F);
+		this.drawCenteredString(this.fontRenderer, "You were slain...", this.width / 4, this.height / 4 - 8, color);
+		GL11.glTranslatef(-shakeX, -shakeY, 0.0F);
+		this.drawCenteredString(this.fontRenderer, String.valueOf(10 - (this.updateCounter / 20)), this.width / 4, this.height / 4 + 8, color);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
+
+		GL11.glDisable(GL11.GL_BLEND);
 		super.drawScreen(var1, var2, var3);
 	}
 
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -5,25 +5,29 @@
 	private float efficiencyOnProperMaterial = 4.0F;
 	private int damageVsEntity;
 	protected EnumToolMaterial toolMaterial;
+	protected boolean blocksIneffective;
 
 	protected ItemTool(int var1, int var2, EnumToolMaterial var3, Block[] var4) {
 		super(var1);
 		this.toolMaterial = var3;
 		this.blocksEffectiveAgainst = var4;
 		this.maxStackSize = 1;
-		this.setMaxDamage(var3.getMaxUses());
 		this.efficiencyOnProperMaterial = var3.getEfficiencyOnProperMaterial();
-		this.damageVsEntity = var2 + var3.getDamageVsEntity();
+		this.damageVsEntity = 5;
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
 		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
 			if(this.blocksEffectiveAgainst[var3] == var2) {
-				return this.efficiencyOnProperMaterial;
+				return this.blocksIneffective ? 1.0F : this.efficiencyOnProperMaterial;
 			}
 		}
 
-		return 1.0F;
+		return this.blocksIneffective ? this.efficiencyOnProperMaterial : 1.0F;
+	}
+
+	public int getSpeedVsEntity(Entity var1) {
+		return (int)(20F / (this.efficiencyOnProperMaterial / 2.0F + 1.0F));
 	}
 
 	public boolean hitEntity(ItemStack var1, EntityLiving var2, EntityLiving var3) {
@@ -42,5 +46,12 @@
 
 	public boolean isFull3D() {
 		return true;
+	}
+
+	public float getReach() {
+		if (this.toolMaterial == EnumToolMaterial.WOOD || this.toolMaterial == EnumToolMaterial.STONE) {
+			return 3.0F;
+		}
+		return super.getReach();
 	}
 }
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -23,7 +23,7 @@
 	public boolean isMultiplayerEntity = false;
 	public float prevSwingProgress;
 	public float swingProgress;
-	public int health = 10;
+	public int health;
 	public int prevHealth;
 	private int livingSoundTime;
 	public int hurtTime;
@@ -59,6 +59,7 @@
 
 	public EntityLiving(World var1) {
 		super(var1);
+		this.health = this.getMaxHealth();
 		this.preventEntitySpawning = true;
 		this.field_9363_r = (float)(Math.random() + 1.0D) * 0.01F;
 		this.setPosition(this.posX, this.posY, this.posZ);
@@ -111,7 +112,10 @@
 		}
 
 		if(this.isEntityAlive() && this.isEntityInsideOpaqueBlock()) {
-			this.attackEntityFrom((Entity)null, 1);
+			if (--this.health <= 0) {
+				this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), 1.0F);
+				this.onDeath(null);
+			}
 		}
 
 		if(this.isImmuneToFire || this.worldObj.multiplayerWorld) {
@@ -121,22 +125,22 @@
 		int var1;
 		if(this.isEntityAlive() && this.isInsideOfMaterial(Material.water) && !this.canBreatheUnderwater()) {
 			--this.air;
-			if(this.air == -20) {
-				this.air = 0;
-
-				for(var1 = 0; var1 < 8; ++var1) {
-					float var2 = this.rand.nextFloat() - this.rand.nextFloat();
-					float var3 = this.rand.nextFloat() - this.rand.nextFloat();
-					float var4 = this.rand.nextFloat() - this.rand.nextFloat();
-					this.worldObj.spawnParticle("bubble", this.posX + (double)var2, this.posY + (double)var3, this.posZ + (double)var4, this.motionX, this.motionY, this.motionZ);
-				}
-
-				this.attackEntityFrom((Entity)null, 2);
+			if(this.air == 0) {
+				this.worldObj.playSoundAtEntity(this, "Drown", 1.0F, 1.0F);
+			}
+
+			if(this.air < 0 && --this.health <= 0) {
+				this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), 1.0F);
+				this.onDeath(null);
+				this.air = -100000;
 			}
 
 			this.fire = 0;
 		} else {
-			this.air = this.maxAir;
+			this.air += 10;
+			if (this.air > this.maxAir) {
+				this.air = this.maxAir;
+			}
 		}
 
 		this.cameraPitch = this.field_9328_R;
@@ -296,8 +300,8 @@
 	public void heal(int var1) {
 		if(this.health > 0) {
 			this.health += var1;
-			if(this.health > 20) {
-				this.health = 20;
+			if(this.health > this.getMaxHealth()) {
+				this.health = this.getMaxHealth();
 			}
 
 			this.heartsLife = this.heartsHalvesLife / 2;
@@ -351,12 +355,13 @@
 
 				if(this.health <= 0) {
 					if(var3) {
-						this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+						this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), 1.0F);
+						this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), 1.0F);
 					}
 
 					this.onDeath(var1);
 				} else if(var3) {
-					this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+					this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), 1.0F);
 				}
 
 				return true;
@@ -382,11 +387,11 @@
 	}
 
 	protected String getHurtSound() {
-		return "random.hurt";
+		return "Player_Hit_";
 	}
 
 	protected String getDeathSound() {
-		return "random.hurt";
+		return "Player_Killed";
 	}
 
 	public void knockBack(Entity var1, int var2, double var3, double var5) {
@@ -396,10 +401,10 @@
 		this.motionY /= 2.0D;
 		this.motionZ /= 2.0D;
 		this.motionX -= var3 / (double)var7 * (double)var8;
-		this.motionY += (double)0.4F;
+		this.motionY += (double)var8;
 		this.motionZ -= var5 / (double)var7 * (double)var8;
-		if(this.motionY > (double)0.4F) {
-			this.motionY = (double)0.4F;
+		if(this.motionY > (double)var8) {
+			this.motionY = (double)var8;
 		}
 
 	}
@@ -437,20 +442,6 @@
 		return 0;
 	}
 
-	protected void fall(float var1) {
-		super.fall(var1);
-		int var2 = (int)Math.ceil((double)(var1 - 3.0F));
-		if(var2 > 0) {
-			this.attackEntityFrom((Entity)null, var2);
-			int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
-			if(var3 > 0) {
-				StepSound var4 = Block.blocksList[var3].stepSound;
-				this.worldObj.playSoundAtEntity(this, var4.func_1145_d(), var4.getVolume() * 0.5F, var4.getPitch() * (12.0F / 16.0F));
-			}
-		}
-
-	}
-
 	public void moveEntityWithHeading(float var1, float var2) {
 		double var3;
 		if(this.isInWater()) {
@@ -564,7 +555,7 @@
 	public void readEntityFromNBT(NBTTagCompound var1) {
 		this.health = var1.getShort("Health");
 		if(!var1.hasKey("Health")) {
-			this.health = 10;
+			this.health = this.getMaxHealth();
 		}
 
 		this.hurtTime = var1.getShort("HurtTime");
@@ -626,14 +617,8 @@
 
 		boolean var14 = this.isInWater();
 		boolean var2 = this.handleLavaMovement();
-		if(this.isJumping) {
-			if(var14) {
-				this.motionY += (double)0.04F;
-			} else if(var2) {
-				this.motionY += (double)0.04F;
-			} else if(this.onGround) {
-				this.jump();
-			}
+		if(this.isJumping && this.onGround) {
+			this.jump();
 		}
 
 		this.moveStrafing *= 0.98F;
@@ -657,7 +642,7 @@
 	}
 
 	protected void jump() {
-		this.motionY = (double)0.42F;
+		this.motionY = (double)0.6F;
 	}
 
 	protected boolean canDespawn() {
@@ -871,5 +856,9 @@
 
 	public int getItemIcon(ItemStack var1) {
 		return var1.getIconIndex();
+	}
+
+	public int getMaxHealth() {
+		return 10;
 	}
 }
--- net/minecraft/src/BlockCake.java
+++ net/minecraft/src/BlockCake.java
@@ -64,8 +64,8 @@
 	}
 
 	private void eatCakeSlice(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		if(var5.health < 20) {
-			var5.heal(3);
+		if(var5.health < var5.getMaxHealth()) {
+			var5.heal(15);
 			int var6 = var1.getBlockMetadata(var2, var3, var4) + 1;
 			if(var6 >= 6) {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
--- net/minecraft/src/ItemMinecart.java
+++ net/minecraft/src/ItemMinecart.java
@@ -13,10 +13,12 @@
 		int var8 = var3.getBlockId(var4, var5, var6);
 		if(BlockRail.isRailBlock(var8)) {
 			if(!var3.multiplayerWorld) {
-				var3.entityJoinedWorld(new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType));
+				EntityMinecart minecart = new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType);
+				var3.entityJoinedWorld(minecart);
+				var3.playSoundAtEntity(minecart, "Item_53", 1.0F, 1.0F);
+				minecart.interact(var2);
+				System.out.println("gotta go fast");
 			}
-
-			--var1.stackSize;
 			return true;
 		} else {
 			return false;
--- /dev/null
+++ net/minecraft/src/StepSoundGrass.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class StepSoundGrass extends StepSound {
+	public StepSoundGrass(String var1, float var2, float var3) {
+		super(var1, var2, var3);
+	}
+
+	public String stepSoundDir() {
+		return "Grass";
+	}
+
+	public String breakSoundDir() {
+		return "Grass";
+	}
+
+	public boolean isTerraSound() {
+		return true;
+	}
+}
--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -88,8 +88,8 @@
 				var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
 				var7.draw();
 				if(var1 >= 0) {
-					byte var10 = 100;
-					byte var11 = 2;
+					int var10 = 138;
+					int var11 = 8;
 					int var12 = var5 / 2 - var10 / 2;
 					int var13 = var6 / 2 + 16;
 					GL11.glDisable(GL11.GL_TEXTURE_2D);
@@ -102,10 +102,21 @@
 					var7.setColorOpaque_I(8454016);
 					var7.addVertex((double)var12, (double)var13, 0.0D);
 					var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var1), (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var1), (double)var13, 0.0D);
+					var7.addVertex((double)(var12 + var1 * var10 / 100), (double)(var13 + var11), 0.0D);
+					var7.addVertex((double)(var12 + var1 * var10 / 100), (double)var13, 0.0D);
 					var7.draw();
 					GL11.glEnable(GL11.GL_TEXTURE_2D);
+					GL11.glEnable(GL11.GL_BLEND);
+					var8 = this.mc.renderEngine.getTexture("/gui/loading.png");
+					GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
+					var7.startDrawingQuads();
+					var7.setColorOpaque_I(0xFFFFFF);
+					var7.addVertexWithUV((double)(var5 / 2 - 83), (double)(var13 + 15), 0.0D, 0.0D, 1.0D);
+					var7.addVertexWithUV((double)(var5 / 2 + 83), (double)(var13 + 15), 0.0D, 1.0D, 1.0D);
+					var7.addVertexWithUV((double)(var5 / 2 + 83), (double)(var13 - 20), 0.0D, 1.0D, 0.0D);
+					var7.addVertexWithUV((double)(var5 / 2 - 83), (double)(var13 - 20), 0.0D, 0.0D, 0.0D);
+					var7.draw();
+					GL11.glDisable(GL11.GL_BLEND);
 				}
 
 				this.mc.fontRenderer.drawStringWithShadow(this.field_1007_c, (var5 - this.mc.fontRenderer.getStringWidth(this.field_1007_c)) / 2, var6 / 2 - 4 - 16, 16777215);
--- net/minecraft/src/GuiWorldSlot.java
+++ net/minecraft/src/GuiWorldSlot.java
@@ -35,7 +35,7 @@
 	}
 
 	protected void drawBackground() {
-		this.parentWorldGui.drawDefaultBackground();
+		this.parentWorldGui.drawWorldBackground(1);
 	}
 
 	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
--- net/minecraft/src/RecipesCrafting.java
+++ net/minecraft/src/RecipesCrafting.java
@@ -2,9 +2,9 @@
 
 public class RecipesCrafting {
 	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
-		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.sandStone), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});
+		var1.addShapelessRecipe(new ItemStack(Block.chest), new ItemStack(Block.planks, 10), new ItemStack(Item.ingotIron, 2)).requireBlock(Block.workbench);
+		var1.addShapelessRecipe(new ItemStack(Block.stoneOvenIdle), new ItemStack(Block.cobblestone, 20), new ItemStack(Block.planks, 4), new ItemStack(Block.torchWood, 4)).requireBlock(Block.workbench);
+		var1.addShapelessRecipe(new ItemStack(Block.workbench), new ItemStack(Block.planks, 10));
+		var1.addShapelessRecipe(new ItemStack(Block.sandStone), Block.sand, Block.cobblestone).requireBlock(Block.workbench);
 	}
 }
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -1,6 +1,8 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
+import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -38,77 +40,66 @@
 		float var16;
 		float var17;
 		float var18;
-		if(var10.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var10.itemID].getRenderType())) {
-			GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
+		GL11.glScalef(0.5F, 0.5F, 0.5F);
+		int var14 = var10.getIconIndex();
+		if(var10.itemID < 256) {
 			this.loadTexture("/terrain.png");
-			float var28 = 0.25F;
-			if(!Block.blocksList[var10.itemID].renderAsNormalBlock() && var10.itemID != Block.stairSingle.blockID && Block.blocksList[var10.itemID].getRenderType() != 16) {
-				var28 = 0.5F;
-			}
-
-			GL11.glScalef(var28, var28, var28);
-
-			for(int var29 = 0; var29 < var13; ++var29) {
-				GL11.glPushMatrix();
-				if(var29 > 0) {
-					var16 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
-					var17 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
-					var18 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
-					GL11.glTranslatef(var16, var17, var18);
-				}
-
-				this.renderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID], var10.getItemDamage(), var1.getEntityBrightness(var9));
-				GL11.glPopMatrix();
-			}
 		} else {
-			GL11.glScalef(0.5F, 0.5F, 0.5F);
-			int var14 = var10.getIconIndex();
-			if(var10.itemID < 256) {
-				this.loadTexture("/terrain.png");
-			} else {
-				this.loadTexture("/gui/items.png");
-			}
-
-			Tessellator var15 = Tessellator.instance;
-			var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
-			var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
-			var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
-			float var19 = (float)(var14 / 16 * 16 + 16) / 256.0F;
-			float var20 = 1.0F;
-			float var21 = 0.5F;
-			float var22 = 0.25F;
-			int var23;
-			float var24;
-			float var25;
-			float var26;
-			if(this.field_27004_a) {
-				var23 = Item.itemsList[var10.itemID].getColorFromDamage(var10.getItemDamage());
-				var24 = (float)(var23 >> 16 & 255) / 255.0F;
-				var25 = (float)(var23 >> 8 & 255) / 255.0F;
-				var26 = (float)(var23 & 255) / 255.0F;
-				float var27 = var1.getEntityBrightness(var9);
-				GL11.glColor4f(var24 * var27, var25 * var27, var26 * var27, 1.0F);
-			}
-
-			for(var23 = 0; var23 < var13; ++var23) {
-				GL11.glPushMatrix();
-				if(var23 > 0) {
-					var24 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
-					var25 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
-					var26 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
-					GL11.glTranslatef(var24, var25, var26);
-				}
-
-				GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-				var15.startDrawingQuads();
-				var15.setNormal(0.0F, 1.0F, 0.0F);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var16, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var17, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(1.0F - var22), 0.0D, (double)var17, (double)var18);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(1.0F - var22), 0.0D, (double)var16, (double)var18);
-				var15.draw();
-				GL11.glPopMatrix();
-			}
+			this.loadTexture("/gui/items.png");
+		}
+
+		Tessellator var15 = Tessellator.instance;
+		var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
+		var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
+		var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
+		float var19 = (float)(var14 / 16 * 16 + 16) / 256.0F;
+		float var20 = 1.0F;
+		float var20a = 1.0F;
+		float var21 = 0.5F;
+		float var22 = 0.25F;
+		if (var10.itemID < 256 && Block.blocksList[var10.itemID].getRenderType() == 0) {
+			Block block = Block.blocksList[var10.itemID];
+			var16 = (float)(var14 % 16 * 16 + (int)(16.0F - (block.maxX - block.minX) * 16.0F)) / 256.0F;
+			var17 = (float)(var14 % 16 * 16 + (int)(16.0F - (block.maxX - block.minX) * 16.0F) + (int)((block.maxX - block.minX) * 12.0F)) / 256.0F;
+			var18 = (float)(var14 / 16 * 16 + (int)(16.0F - (block.maxY - block.minY) * 16.0F)) / 256.0F;
+			var19 = (float)(var14 / 16 * 16 + (int)(16.0F - (block.maxY - block.minY) * 16.0F) + (int)((block.maxY - block.minY) * 12.0F)) / 256.0F;
+			var20 -= 0.25F + (1.0F - (block.maxX - block.minX)) * 0.75F;
+			var20a -= 0.25F + (1.0F - (block.maxY - block.minY)) * 0.75F;
+			var21 -= 1.0F / 8.0F;
+			var22 -= 1.0F / 8.0F;
+		}
+		int var23;
+		float var24;
+		float var25;
+		float var26;
+		if(this.field_27004_a) {
+			var23 = Item.itemsList[var10.itemID].getColorFromDamage(var10.getItemDamage());
+			var24 = (float)(var23 >> 16 & 255) / 255.0F;
+			var25 = (float)(var23 >> 8 & 255) / 255.0F;
+			var26 = (float)(var23 & 255) / 255.0F;
+			float var27 = var1.getEntityBrightness(var9);
+			GL11.glColor4f(var24 * var27, var25 * var27, var26 * var27, 1.0F);
+		}
+
+		for(var23 = 0; var23 < var13; ++var23) {
+			GL11.glPushMatrix();
+			if(var23 > 0) {
+				var24 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
+				var25 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
+				var26 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
+				GL11.glTranslatef(var24, var25, var26);
+			}
+
+			GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+			var15.startDrawingQuads();
+			var15.setNormal(0.0F, 1.0F, 0.0F);
+			var15.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var16, (double)var19);
+			var15.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var17, (double)var19);
+			var15.addVertexWithUV((double)(var20 - var21), (double)(var20a - var22), 0.0D, (double)var17, (double)var18);
+			var15.addVertexWithUV((double)(0.0F - var21), (double)(var20a - var22), 0.0D, (double)var16, (double)var18);
+			var15.draw();
+			GL11.glPopMatrix();
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -117,30 +108,7 @@
 
 	public void drawItemIntoGui(FontRenderer var1, RenderEngine var2, int var3, int var4, int var5, int var6, int var7) {
 		float var11;
-		if(var3 < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3].getRenderType())) {
-			var2.bindTexture(var2.getTexture("/terrain.png"));
-			Block var14 = Block.blocksList[var3];
-			GL11.glPushMatrix();
-			GL11.glTranslatef((float)(var6 - 2), (float)(var7 + 3), -3.0F);
-			GL11.glScalef(10.0F, 10.0F, 10.0F);
-			GL11.glTranslatef(1.0F, 0.5F, 1.0F);
-			GL11.glScalef(1.0F, 1.0F, -1.0F);
-			GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
-			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-			int var15 = Item.itemsList[var3].getColorFromDamage(var4);
-			var11 = (float)(var15 >> 16 & 255) / 255.0F;
-			float var12 = (float)(var15 >> 8 & 255) / 255.0F;
-			float var13 = (float)(var15 & 255) / 255.0F;
-			if(this.field_27004_a) {
-				GL11.glColor4f(var11, var12, var13, 1.0F);
-			}
-
-			GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
-			this.renderBlocks.field_31088_b = this.field_27004_a;
-			this.renderBlocks.renderBlockOnInventory(var14, var4, 1.0F);
-			this.renderBlocks.field_31088_b = true;
-			GL11.glPopMatrix();
-		} else if(var5 >= 0) {
+		if(var5 >= 0) {
 			GL11.glDisable(GL11.GL_LIGHTING);
 			if(var3 < 256) {
 				var2.bindTexture(var2.getTexture("/terrain.png"));
@@ -156,7 +124,18 @@
 				GL11.glColor4f(var9, var10, var11, 1.0F);
 			}
 
-			this.renderTexturedQuad(var6, var7, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
+			if (var3 < 256 && Block.blocksList[var3].getRenderType() == 0) {
+				Block block = Block.blocksList[var3];
+				block.setBlockBoundsForItemRender();
+				this.renderTexturedQuad(var6 + 2 + (int)((1.0F - block.maxX) * 12.0F),
+						var7 + 2 + (int)((1.0F - block.maxY) * 12.0F),
+						var5 % 16 * 16 + (int)(16.0F - (block.maxX - block.minX) * 16.0F),
+						var5 / 16 * 16 + (int)(16.0F - (block.maxY - block.minY) * 16.0F),
+						(int)((block.maxX - block.minX) * 12.0F),
+						(int)((block.maxY - block.minY) * 12.0F));
+			} else {
+				this.renderTexturedQuad(var6, var7, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
+			}
 			GL11.glEnable(GL11.GL_LIGHTING);
 		}
 
@@ -171,6 +150,22 @@
 
 	public void renderItemOverlayIntoGUI(FontRenderer var1, RenderEngine var2, ItemStack var3, int var4, int var5) {
 		if(var3 != null) {
+			EntityPlayer thePlayer = Minecraft.getInstance().thePlayer;
+			if(thePlayer != null && thePlayer.potionSickness > 0 && var3.getItem() instanceof ItemFood) {
+				var2.bindTexture(var2.getTexture("/gui/items.png"));
+				float sickness = Math.min(thePlayer.potionSickness / 200.0F, 1.0F);
+				GL11.glDisable(GL11.GL_LIGHTING);
+				GL11.glDisable(GL11.GL_DEPTH_TEST);
+				GL11.glDisable(GL11.GL_ALPHA_TEST);
+				GL11.glEnable(GL11.GL_BLEND);
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, sickness * 0.8F);
+				this.renderTexturedQuad(var4, var5, 240, 240, 16, 16);
+				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glEnable(GL11.GL_ALPHA_TEST);
+				GL11.glEnable(GL11.GL_DEPTH_TEST);
+				GL11.glEnable(GL11.GL_LIGHTING);
+			}
+
 			if(var3.stackSize > 1) {
 				String var6 = "" + var3.stackSize;
 				GL11.glDisable(GL11.GL_LIGHTING);
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -22,6 +22,7 @@
 	private double field_9409_q;
 	private double field_9408_r;
 	private double field_9407_s;
+	private boolean slow;
 
 	public EntityMinecart(World var1) {
 		super(var1);
@@ -35,6 +36,11 @@
 		this.yOffset = this.height / 2.0F;
 	}
 
+	public EntityMinecart makeSlow() {
+		this.slow = true;
+		return this;
+	}
+
 	protected boolean canTriggerWalking() {
 		return false;
 	}
@@ -82,7 +88,6 @@
 				}
 
 				this.setEntityDead();
-				this.dropItemWithOffset(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
 				if(this.minecartType == 1) {
 					EntityMinecart var3 = this;
 
@@ -162,6 +167,12 @@
 	}
 
 	public void onUpdate() {
+		if (this.riddenByEntity == null) {
+			this.attackEntityFrom(null, 1000);
+		}
+
+		++this.ticksExisted;
+
 		if(this.minecartTimeSinceHit > 0) {
 			--this.minecartTimeSinceHit;
 		}
@@ -206,7 +217,7 @@
 				--var2;
 			}
 
-			double var4 = 0.4D;
+			double var4 = this.slow ? 0.3D : 0.5D;
 			boolean var6 = false;
 			var7 = 1.0D / 128.0D;
 			int var9 = this.worldObj.getBlockId(var1, var2, var3);
@@ -216,11 +227,31 @@
 				this.posY = (double)var2;
 				boolean var12 = false;
 				boolean var13 = false;
-				if(var9 == Block.railPowered.blockID) {
-					var12 = (var11 & 8) != 0;
+				boolean pushForward = (this.riddenByEntity != null
+						&& this.riddenByEntity instanceof EntityPlayer
+						&& ((EntityPlayer) this.riddenByEntity).moveVehicleForward > 0.0F);
+				boolean pushBack = (this.riddenByEntity != null
+						&& this.riddenByEntity instanceof EntityPlayer
+						&& ((EntityPlayer) this.riddenByEntity).moveVehicleForward < 0.0F);
+				if(var9 == Block.railPowered.blockID || pushForward || pushBack) {
+					var12 = ((var11 & 8) != 0 || pushForward) && !pushBack;
 					var13 = !var12;
 				}
 
+				if (pushForward && this.motionX == 0.0D && this.motionZ == 0.0D) {
+					float var5 = MathHelper.sin(this.riddenByEntity.rotationYaw * (float)Math.PI / 180.0F);
+					float var5a = MathHelper.cos(this.riddenByEntity.rotationYaw * (float)Math.PI / 180.0F);
+
+					if (var11 == 1 || var11 == 4 || var11 == 5) {
+						float bak = var5;
+						var5 = var5a;
+						var5a = bak;
+					}
+
+					this.motionX = var5 * 0.05D;
+					this.motionZ = var5a * 0.05D;
+				}
+
 				if(((BlockRail)Block.blocksList[var9]).getIsPowered()) {
 					var11 &= 7;
 				}
@@ -229,22 +260,6 @@
 					this.posY = (double)(var2 + 1);
 				}
 
-				if(var11 == 2) {
-					this.motionX -= var7;
-				}
-
-				if(var11 == 3) {
-					this.motionX += var7;
-				}
-
-				if(var11 == 4) {
-					this.motionZ += var7;
-				}
-
-				if(var11 == 5) {
-					this.motionZ -= var7;
-				}
-
 				int[][] var14 = field_855_j[var11];
 				double var15 = (double)(var14[1][0] - var14[0][0]);
 				double var17 = (double)(var14[1][2] - var14[0][2]);
@@ -261,14 +276,18 @@
 				double var25;
 				if(var13) {
 					var25 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-					if(var25 < 0.03D) {
+					if(var25 < 0.05D) {
 						this.motionX *= 0.0D;
 						this.motionY *= 0.0D;
 						this.motionZ *= 0.0D;
 					} else {
-						this.motionX *= 0.5D;
+						this.motionX *= 0.95D;
 						this.motionY *= 0.0D;
-						this.motionZ *= 0.5D;
+						this.motionZ *= 0.95D;
+
+						if (this.ticksExisted % 2 == 0) {
+							this.worldObj.playSoundAtEntity(this, "Item_55", 1.0F, 1.0F);
+						}
 					}
 				}
 
@@ -396,7 +415,7 @@
 				if(var12) {
 					var42 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 					if(var42 > 0.01D) {
-						double var44 = 0.06D;
+						double var44 = this.slow ? 0.0075D : 0.01D;
 						this.motionX += this.motionX / var42 * var44;
 						this.motionZ += this.motionZ / var42 * var44;
 					} else if(var11 == 1) {
@@ -754,7 +773,7 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 250;
 	}
 
 	public void onInventoryChanged() {
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -24,6 +24,9 @@
 	public int limitFramerate = 1;
 	public boolean fancyGraphics = true;
 	public boolean ambientOcclusion = true;
+	public int titleMusicType = 0;
+	public boolean autopause = false;
+	public boolean betariaLogo = true;
 	public String skin = "Default";
 	public KeyBinding keyBindForward = new KeyBinding("key.forward", 17);
 	public KeyBinding keyBindLeft = new KeyBinding("key.left", 30);
@@ -35,7 +38,8 @@
 	public KeyBinding keyBindChat = new KeyBinding("key.chat", 20);
 	public KeyBinding keyBindToggleFog = new KeyBinding("key.fog", 33);
 	public KeyBinding keyBindSneak = new KeyBinding("key.sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public KeyBinding keyBindQuickHeal = new KeyBinding("key.heal", 35);
+	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindQuickHeal};
 	protected Minecraft mc;
 	private File optionsFile;
 	public int difficulty = 2;
@@ -49,6 +53,13 @@
 	public float field_22272_F = 1.0F;
 	public float field_22271_G = 1.0F;
 	public int guiScale = 0;
+	public float cursorR = 0xFF / 255.0F;
+	public float cursorG = 0x32 / 255.0F;
+	public float cursorB = 0x5F / 255.0F;
+	public float cursorBorderR = 0x40 / 255.0F;
+	public float cursorBorderG = 0x40 / 255.0F;
+	public float cursorBorderB = 0x40 / 255.0F;
+	public float cursorBorderA = 0x40 / 255.0F;
 
 	public GameSettings(Minecraft var1, File var2) {
 		this.mc = var1;
@@ -88,6 +99,34 @@
 			this.mouseSensitivity = var2;
 		}
 
+		if(var1 == EnumOptions.CURSOR_R) {
+			this.cursorR = var2;
+		}
+
+		if(var1 == EnumOptions.CURSOR_G) {
+			this.cursorG = var2;
+		}
+
+		if(var1 == EnumOptions.CURSOR_B) {
+			this.cursorB = var2;
+		}
+
+		if(var1 == EnumOptions.CURSOR_BORDER_R) {
+			this.cursorBorderR = var2;
+		}
+
+		if(var1 == EnumOptions.CURSOR_BORDER_G) {
+			this.cursorBorderG = var2;
+		}
+
+		if(var1 == EnumOptions.CURSOR_BORDER_B) {
+			this.cursorBorderB = var2;
+		}
+
+		if(var1 == EnumOptions.CURSOR_BORDER_A) {
+			this.cursorBorderA = var2;
+		}
+
 	}
 
 	public void setOptionValue(EnumOptions var1, int var2) {
@@ -135,27 +174,34 @@
 			this.mc.renderGlobal.loadRenderers();
 		}
 
+		if(var1 == EnumOptions.AUTOPAUSE) {
+			this.autopause = !this.autopause;
+		}
+
 		this.saveOptions();
 	}
 
 	public float getOptionFloatValue(EnumOptions var1) {
+		if(var1 == EnumOptions.CURSOR_R) return this.cursorR;
+		else if(var1 == EnumOptions.CURSOR_G) return this.cursorG;
+		else if(var1 == EnumOptions.CURSOR_B) return this.cursorB;
+		else if(var1 == EnumOptions.CURSOR_BORDER_R) return this.cursorBorderR;
+		else if(var1 == EnumOptions.CURSOR_BORDER_G) return this.cursorBorderG;
+		else if(var1 == EnumOptions.CURSOR_BORDER_B) return this.cursorBorderB;
+		else if(var1 == EnumOptions.CURSOR_BORDER_A) return this.cursorBorderA;
+
 		return var1 == EnumOptions.MUSIC ? this.musicVolume : (var1 == EnumOptions.SOUND ? this.soundVolume : (var1 == EnumOptions.SENSITIVITY ? this.mouseSensitivity : 0.0F));
 	}
 
 	public boolean getOptionOrdinalValue(EnumOptions var1) {
-		switch(EnumOptionsMappingHelper.enumOptionsMappingHelperArray[var1.ordinal()]) {
-		case 1:
-			return this.invertMouse;
-		case 2:
-			return this.viewBobbing;
-		case 3:
-			return this.anaglyph;
-		case 4:
-			return this.advancedOpengl;
-		case 5:
-			return this.ambientOcclusion;
-		default:
-			return false;
+		switch(var1) {
+			case INVERT_MOUSE: return this.invertMouse;
+			case VIEW_BOBBING: return this.viewBobbing;
+			case ANAGLYPH: return this.anaglyph;
+			case ADVANCED_OPENGL: return this.advancedOpengl;
+			case AMBIENT_OCCLUSION: return this.ambientOcclusion;
+			case AUTOPAUSE: return this.autopause;
+			default: return false;
 		}
 	}
 
@@ -164,10 +210,14 @@
 		String var3 = var2.translateKey(var1.getEnumString()) + ": ";
 		if(var1.getEnumFloat()) {
 			float var5 = this.getOptionFloatValue(var1);
+			if (var1.getEnumString().contains("cursor")) {
+				return var3 + (int)(var5 * 255.0F);
+			}
 			return var1 == EnumOptions.SENSITIVITY ? (var5 == 0.0F ? var3 + var2.translateKey("options.sensitivity.min") : (var5 == 1.0F ? var3 + var2.translateKey("options.sensitivity.max") : var3 + (int)(var5 * 200.0F) + "%")) : (var5 == 0.0F ? var3 + var2.translateKey("options.off") : var3 + (int)(var5 * 100.0F) + "%");
 		} else if(var1.getEnumBoolean()) {
 			boolean var4 = this.getOptionOrdinalValue(var1);
-			return var4 ? var3 + var2.translateKey("options.on") : var3 + var2.translateKey("options.off");
+			return var1 == EnumOptions.AMBIENT_OCCLUSION ? (var4 ? var3 + var2.translateKey("options.ao.on") : var3 + var2.translateKey("options.ao.off"))
+					: var4 ? var3 + var2.translateKey("options.on") : var3 + var2.translateKey("options.off");
 		} else {
 			return var1 == EnumOptions.RENDER_DISTANCE ? var3 + var2.translateKey(RENDER_DISTANCES[this.renderDistance]) : (var1 == EnumOptions.DIFFICULTY ? var3 + var2.translateKey(DIFFICULTIES[this.difficulty]) : (var1 == EnumOptions.GUI_SCALE ? var3 + var2.translateKey(GUISCALES[this.guiScale]) : (var1 == EnumOptions.FRAMERATE_LIMIT ? var3 + StatCollector.translateToLocal(LIMIT_FRAMERATES[this.limitFramerate]) : (var1 == EnumOptions.GRAPHICS ? (this.fancyGraphics ? var3 + var2.translateKey("options.graphics.fancy") : var3 + var2.translateKey("options.graphics.fast")) : var3))));
 		}
@@ -251,6 +301,46 @@
 						this.lastServer = var3[1];
 					}
 
+					if(var3[0].equals("classicTitleMusic")) {
+						this.titleMusicType = Integer.parseInt(var3[1]);
+					}
+
+					if(var3[0].equals("autopause")) {
+						this.autopause = var3[1].equals("true");
+					}
+
+					if(var3[0].equals("cursorR")) {
+						this.cursorR = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("cursorG")) {
+						this.cursorG = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("cursorB")) {
+						this.cursorB = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("cursorBorderR")) {
+						this.cursorBorderR = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("cursorBorderG")) {
+						this.cursorBorderG = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("cursorBorderB")) {
+						this.cursorBorderB = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("cursorBorderA")) {
+						this.cursorBorderB = this.parseFloat(var3[1]);
+					}
+
+					if(var3[0].equals("betariaLogo")) {
+						this.betariaLogo = var3[1].equals("true");
+					}
+
 					for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
 						if(var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
 							this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
@@ -289,6 +379,16 @@
 			var1.println("ao:" + this.ambientOcclusion);
 			var1.println("skin:" + this.skin);
 			var1.println("lastServer:" + this.lastServer);
+			var1.println("classicTitleMusic:" + this.titleMusicType);
+			var1.println("autopause:" + this.autopause);
+			var1.println("cursorR:" + this.cursorR);
+			var1.println("cursorG:" + this.cursorG);
+			var1.println("cursorB:" + this.cursorB);
+			var1.println("cursorBorderR:" + this.cursorBorderR);
+			var1.println("cursorBorderG:" + this.cursorBorderG);
+			var1.println("cursorBorderB:" + this.cursorBorderB);
+			var1.println("cursorBorderA:" + this.cursorBorderA);
+			var1.println("betariaLogo:" + this.betariaLogo);
 
 			for(int var2 = 0; var2 < this.keyBindings.length; ++var2) {
 				var1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
--- net/minecraft/src/WorldGenTaiga1.java
+++ net/minecraft/src/WorldGenTaiga1.java
@@ -41,8 +41,7 @@
 				return false;
 			} else {
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
+				if(var11 == Block.blockSnow.blockID && var4 < 128 - var6 - 1) {
 					var18 = 0;
 
 					for(var13 = var4 + var6; var13 >= var4 + var7; --var13) {
--- net/minecraft/src/GuiVideoSettings.java
+++ net/minecraft/src/GuiVideoSettings.java
@@ -21,15 +21,15 @@
 		for(int var5 = 0; var5 < var4; ++var5) {
 			EnumOptions var6 = var3[var5];
 			if(!var6.getEnumFloat()) {
-				this.controlList.add(new GuiSmallButton(var6.returnEnumOrdinal(), this.width / 2 - 155 + var2 % 2 * 160, this.height / 6 + 24 * (var2 >> 1), var6, this.guiGameSettings.getKeyBinding(var6)));
+				this.controlList.add(new GuiSmallButton(var6.returnEnumOrdinal(), this.width / 2 - 75, 80 + 20 * var2, var6, this.guiGameSettings.getKeyBinding(var6)).asTransparent());
 			} else {
-				this.controlList.add(new GuiSlider(var6.returnEnumOrdinal(), this.width / 2 - 155 + var2 % 2 * 160, this.height / 6 + 24 * (var2 >> 1), var6, this.guiGameSettings.getKeyBinding(var6), this.guiGameSettings.getOptionFloatValue(var6)));
+				this.controlList.add(new GuiSlider(var6.returnEnumOrdinal(), this.width / 2 - 75, 80 + 20 * var2, var6, this.guiGameSettings.getKeyBinding(var6), this.guiGameSettings.getOptionFloatValue(var6)).asTransparent());
 			}
 
 			++var2;
 		}
 
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, var1.translateKey("gui.done")));
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, 90 + 20 * field_22108_k.length, var1.translateKey("gui.back")).asTransparent());
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -53,7 +53,6 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.field_22107_a, this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- net/minecraft/src/BlockGlass.java
+++ net/minecraft/src/BlockGlass.java
@@ -8,7 +8,7 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 0;
+		return 1;
 	}
 
 	public int getRenderBlockPass() {
